<div class="card">
    <div class="card-body">
        <h1 style="font-size: 20px">Nro orden @itemPresupuesto.OC @itemPresupuesto.Descripcion</h1>
        <br/>
            <div class="row">
        <br />
            <div class="col-sm-6">
                <label>N° de Remito</label>
                <input type="text" class="form-control" @bind="@NroRemito" placeholder="N° Remito"></input>

            </div>
            <div class="col-sm-6">
                <label>Comentario: </label>
                <input type="text" class="form-control" @bind="@Comentario"></input>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-sm-6">
                <label>Cantidad: </label>
                <input type="text" class="form-control" @bind="@Cantidad"></input>
            </div>
            <div class="col-sm-6">
                <label>Estado del lote: </label>
                <RadzenDropDown AllowClear="true" TValue="string" Style="width: 100%" AllowFiltering="true"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data=@(listaLoteEstados) @bind-Value="EstadoLote" />
            </div>
        </div>
        <br/>
        <div stlye="display:flex; flex-direction:row; gap:3px">
            <button type="button" @onclick="cancel"  class="btn btn-light">Cancelar</button>
                
            <button type="button" @onclick='(()=>accept("Recibido"))' class="btn btn-primary mr-2">Aceptar</button>

             <button type="button" @onclick="(()=>accept(null))"  class="btn btn-primary mr-2">Parcial</button>

            <button type="button" @onclick="(()=>Reject(null))" class="btn btn-primary mr-2">Rechazar</button>
        </div>
        
    </div>
</div>


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    public string? NroRemito;
    public string? Comentario;
    public int? Cantidad = 0;
    public string? Estado;
    public string? EstadoLote;
    List<string> listaLoteEstados = new() { "Aprobado", "Desaprobado", "En observacion" };

    int? mayorNroLote = 0;
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    ItemPresupuesto? itemPresupuesto = new();
    ProveedoreDTO? oProve = new();
    RecepcionesHistoricas? historica = new();

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }


    public async Task Get()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<ItemPresupuesto>>($"/api/itemPresupuesto/{Id}");
        itemPresupuesto = rta.List;
        var rt = await http.GetFromJsonAsync<Respuesta<ProveedoreDTO>>($"/api/Proveedore/{itemPresupuesto.Proveedor}");
        oProve = rt.List;
        itemPresupuesto.FechaFinish =  DateTime.Now;

    }

    async Task Reject(string? estado)
    {
        if (string.IsNullOrEmpty(NroRemito))
        {
            await alertaError("No ingresó un remito válido");

        }
        else if (string.IsNullOrEmpty(Comentario))
        {
            await alertaError("No ingresó un comentario válido");

        }
        else if (Cantidad < 0)
        {
            await alertaError("No ingresó una cantidad válida");
        }
        else
        {
            SweetAlertResult result;
            {
                SweetAlertOptions laAlert = new SweetAlertOptions
                    {
                        Title = "¿Está seguro?",
                        Text = "Se rechazara la recepción de la orden de compra.",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Aceptar",
                        CancelButtonText = "Cancelar"

                    };
                result = await Swal.FireAsync(laAlert);
            }
            if (result.IsConfirmed)
            {
                estado = "RecepcionRechazada";
                itemPresupuesto.Comentario = Comentario;
                itemPresupuesto.Estado = estado;
                itemPresupuesto.NroRemito = NroRemito;
                itemPresupuesto.Cantidad = Cantidad;

                //falta levantarla por ID
                await http.PutAsJsonAsync<ItemPresupuesto>("/api/itemPresupuesto", itemPresupuesto);



                await BlazoredModal.CloseAsync(ModalResult.Ok((NroRemito, Comentario, 0, "Omitir")));
            }

        }
    }

    async Task accept(string? estado)
    {
        if (string.IsNullOrEmpty(NroRemito))
        {
            await alertaError("No ingresó un remito válido");

        }
        if (string.IsNullOrEmpty(EstadoLote))
        {
            await alertaError("No ingresó un estado válido");

        }
        else if (string.IsNullOrEmpty(Comentario))
        {
            await alertaError("No ingresó un comentario válido");

        }
        else if (Cantidad < 0 )
        {
            await alertaError("No ingresó una cantidad válida");
        }
        else
        {
            SweetAlertResult result;
            if (estado == "Recibido"){
                SweetAlertOptions laAlert = new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "Se cerrara la entrega con la cantidad elegida.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"

                };
                result = await Swal.FireAsync(laAlert);
                Estado = estado;
            }
            else
            {
                SweetAlertOptions laAlert = new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "Quedara pendiente la cantidad restante para una futura entrega.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"

                };
                result = await Swal.FireAsync(laAlert);
            }      
            if (result.IsConfirmed)
            {

                await Guardar();

                await BlazoredModal.CloseAsync(ModalResult.Ok((NroRemito, Comentario, 0, "Omitir")));
            }
        }
    }


    public async Task Guardar()
    {

        string? NumRemito = NroRemito;
        int? cantidad = Cantidad;


        var insumo = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{itemPresupuesto.Insumo}");
        var DeLoteUnico = insumo.List.Tipo == "Lote unico";


        if (cantidad > 0)
        {
            itemPresupuesto.Estado = Estado;
            itemPresupuesto.Comentario = Comentario;
            itemPresupuesto.NroRemito = NumRemito;

            if (Estado == "Recibido" )
            {
                if (EstadoLote != "En observacion"){
                    itemPresupuesto.Cantidad = cantidad;
                    await http.PutAsJsonAsync<ItemPresupuesto>("/api/itemPresupuesto", itemPresupuesto);
                }
                else
                {
                    itemPresupuesto.Cantidad = cantidad;
                    itemPresupuesto.Estado = "Observacion";
                    await http.PutAsJsonAsync<ItemPresupuesto>("/api/itemPresupuesto", itemPresupuesto);
                }

            }

            if(Estado == null)
            {
                itemPresupuesto.Estado = "OrdenGenerada";
                itemPresupuesto.Cantidad -= cantidad;
                await http.PutAsJsonAsync<ItemPresupuesto>("/api/itempresupuesto", itemPresupuesto);

                if(EstadoLote != "En observacion")
                {
                    Console.WriteLine("Llego AL PRIMERO DE observacion");


                    ItemPresupuesto Item = new()
                        {
                            Estado = "RecepcionParcial",
                            Cantidad = cantidad,
                            Insumo = itemPresupuesto.Insumo,
                            Precio = itemPresupuesto.Precio,
                            PrecioUnitario = itemPresupuesto.PrecioUnitario,
                            Descripcion = itemPresupuesto.Descripcion,
                            Presupuesto = itemPresupuesto.Presupuesto,
                            Observacion = itemPresupuesto.Observacion,
                            OC = itemPresupuesto.OC,
                            Proveedor = itemPresupuesto.Proveedor,
                            Comentario = itemPresupuesto.Comentario,
                            NroRemito = itemPresupuesto.NroRemito,
                            CondicionPago = itemPresupuesto.CondicionPago

                        };
                    await http.PostAsJsonAsync<ItemPresupuesto>("/api/itempresupuesto", Item);
                }
                else
                {
                    Console.WriteLine("Llego");
                    // itemPresupuesto.Cantidad = cantidad;
                    // itemPresupuesto.Estado = "Observacion";

                    ItemPresupuesto Item = new()
                        {
                            Estado = "Observacion",
                            Cantidad = cantidad,
                            Insumo = itemPresupuesto.Insumo,
                            Precio = itemPresupuesto.Precio,
                            PrecioUnitario = itemPresupuesto.PrecioUnitario,
                            Descripcion = itemPresupuesto.Descripcion,
                            Presupuesto = itemPresupuesto.Presupuesto,
                            Observacion = itemPresupuesto.Observacion,
                            OC = itemPresupuesto.OC,
                            Proveedor = itemPresupuesto.Proveedor,
                            Comentario = itemPresupuesto.Comentario,
                            NroRemito = itemPresupuesto.NroRemito,
                            CondicionPago = itemPresupuesto.CondicionPago

                        };
                    await http.PostAsJsonAsync<ItemPresupuesto>("/api/itempresupuesto", Item);
                }

            }



            var lotesGet = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");


            if (lotesGet.List.Where(x => x.IdInsumo == insumo.List.Id).Count() != 0)
            {
                foreach (var loteParticular in lotesGet.List.Where(x => x.IdInsumo == insumo.List.Id))
                {
                    if (loteParticular.Numero > mayorNroLote)
                    {
                        mayorNroLote = loteParticular.Numero;
                    }
                }
            }

            insumo.List.Recepcion = "Recibido";
            insumo.List.StockReal += Convert.ToInt32(cantidad);

            Lote loteNuevo = new()
                {
                    NroRemito = NumRemito,
                    IdInsumo = insumo.List.Id,
                    Tipo = "Lote unico",
                    Numero = mayorNroLote + 1,
                    Cantidad = cantidad,
                    FechaIngreso = DateTime.Now,
                    Presupuesto = Id,
                    Proveedor = oProve.RazonSocial,
                    Estado = "Aprobado"
                };
            if (!DeLoteUnico)
            {
                loteNuevo.Tipo = "Lote nuevo";
            }
            if (EstadoLote == "Desaprobado")
            {
                loteNuevo.Estado = "Desaprobado";
            }
            else if (EstadoLote == "En observacion")
            {
                loteNuevo.Estado = "En observacion";
            }

            loteNuevo.NumeroMuestra = lotesGet.List.LastOrDefault().Id + 1;

            historica.Presupuesto = itemPresupuesto.Presupuesto;
            historica.Insumo = itemPresupuesto.Insumo;
            historica.Fecha = DateTime.Now;
            historica.Cantidad = cantidad;
            historica.NroRemito = NumRemito;
            historica.PrecioCotizado = itemPresupuesto.Precio;
            historica.CondicionEntrada = loteNuevo.Estado;


            await http.PostAsJsonAsync<Lote>("/api/Lotes", loteNuevo);
            await http.PostAsJsonAsync<RecepcionesHistoricas>("/api/RecepcionesHistoricas", historica);
            await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", insumo.List);

        }
        else
        {
            StateHasChanged();
        }
    }
    async Task cancel()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());

    }
    public async Task alertaError(string error)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = error,
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });

      
    }
}
