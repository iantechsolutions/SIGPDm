<div class="card">
    <div class="card-body">
        <div class="row">
        <br />
            <div class="col-sm-6">
                <label>Ingrese N° de Remito</label>
                <input type="text" class="form-control" @bind="@NroRemito" placeholder="N° Remito"></input>

            </div>
            <div class="col-sm-6">
                <label>Comentario: </label>
                <input type="text" class="form-control" @bind="@Comentario"></input>
            </div>
        </div>
        <br />
        <div class="row">
          
            <label>Cantidad: </label>
            <input type="text" class="form-control" @bind="@Cantidad"></input>
        </div>
        <div class="row">
            <br />
             <button type="button" @onclick="cancel" style=" float: right;" class="btn btn-light">Cancelar</button>
            <br />
            <button type="button" @onclick='(()=>accept("Recibido"))' style=" float: right;" class="btn btn-primary mr-2">Aceptar</button>
            <br />
            <button type="button" @onclick="(()=>accept(null))" style=" float: right;" class="btn btn-primary mr-2">Parcial</button>
            
        </div>
        
    </div>
</div>


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    public string? NroRemito;
    public string? Comentario;
    public int? Cantidad = 0;
    public string? Estado;


    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {


    }

    async Task accept(string? estado)
    {
        if (string.IsNullOrEmpty(NroRemito))
        {
            await alertaError("No ingresó un remito válido");

        }
        if (string.IsNullOrEmpty(Comentario))
        {
            await alertaError("No ingresó un comentario válido");

        }
        if (Cantidad <= 0 )
        {
            await alertaError("No ingresó una cantidad válida");
        }
        else
        {
            SweetAlertResult result;
            if (estado == "Recibido"){
                SweetAlertOptions laAlert = new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "Se cerrara la entrega con la cantidad elegida.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"

                };
                result = await Swal.FireAsync(laAlert);
            }
            else
            {
                SweetAlertOptions laAlert = new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "Quedara pendiente la cantidad restante para una futura entrega.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"

                };
                result = await Swal.FireAsync(laAlert);
            }      
            if (result.IsConfirmed)
            {
                Estado = estado;
                await BlazoredModal.CloseAsync(ModalResult.Ok((NroRemito, Comentario, Cantidad, Estado)));
            }
        }
    }


    // async Task partial()
    // {
    //     if (string.IsNullOrEmpty(NroRemito))
    //     {
    //         await alertaError("No ingresó un remito válido");

    //     }
    //     if (string.IsNullOrEmpty(Comentario))
    //     {
    //         await alertaError("No ingresó un comentario válido");

    //     }
    //     if (Cantidad <= 0)
    //     {
    //         await alertaError("No ingresó una cantidad válida");
    //     }
    //     else{
    //     SweetAlertOptions laAlert = new SweetAlertOptions
    //         {
    //             Title = "¿Está seguro?",
    //             Text = "Quedara pendiente la cantidad restante para una futura entrega.",
    //             Icon = SweetAlertIcon.Warning,
    //             ShowCancelButton = true,
    //             ConfirmButtonText = "Aceptar",
    //             CancelButtonText = "Cancelar"

    //         };

    //     SweetAlertResult result = await Swal.FireAsync(laAlert);

    //     if (result.IsConfirmed)
    //     {
    //         await BlazoredModal.CloseAsync(ModalResult.Ok((NroRemito, Comentario, Cantidad, Estado)));
    //     }
    //     }

    // }
    async Task cancel()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());

    }
    public async Task alertaError(string error)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = error,
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });

      
    }
}
