@page "/recepcionmateriales"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Recepción de materiales</h1>
<p>En esta sección se podrán gestionar la recepción de los materiales.</p>
<hr />
@if (oRespuesta.List != null)
{



    <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

    <br />
    <br />
    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                    AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                    Data="@oRespuesta.List" TItem="OrdencompraDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                   
        <Columns>
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="InsumoNavigation.Descripcion" Title="Insumo" Width="30%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="ProveedorNavigation.RazonSocial" Title="Proveedor" Width="20%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Cantidad" Title="Cantidad" Width="10%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Especificacion" Title="Especificación" Width="10%" />

            
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                <Template Context="data">
                    <button class="btn" title="Confirmar recepcion" @onclick="() => Aceptar(data)"><FeatherCheck Color="Green" /></button>
                </Template>
            </RadzenDataGridColumn>

            
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                <Template Context="data">
                    <button class="btn" title="Rechazar recepción" @onclick="() => Rechazada(data)"><FeatherTrash Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>


        </Columns>

    </RadzenDataGrid>


}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    List<InsumoDTO> oRespuestaPendienteRecepcion = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    int? mayorLote = 0;
    Respuesta<List<OrdencompraDTO>> oRespuesta = new();
    ICollection<OrdencompraDTO> Presupuestos;
    List<Lote> todosLosLotes = new();
    RadzenDataGrid<OrdencompraDTO>? grid;
    bool allowFiltering = false;



    protected override async Task OnInitializedAsync()
    {
        //var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        //oRespuesta = respuesta;
        //oRespuestaPendienteRecepcion = respuesta.List.Where(x => x.Recepcion == "Esperando recepcion").ToList();

        var respuesta = await http.GetFromJsonAsync<Respuesta<List<OrdencompraDTO>>>($"/api/oc/Recepciones");
        oRespuesta = respuesta;

        var rta = await http.GetFromJsonAsync<Respuesta<List<Lote>>>($"/api/Lotes");
        todosLosLotes = rta.List;
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }

    public async Task ModalConfirm(OrdencompraDTO data, (string?, string?, int?) valores)
    {

        string? NumRemito = valores.Item1;
        string? Comentario = valores.Item2;
        int? cantidad = valores.Item3;

        Console.WriteLine(cantidad);
        Console.WriteLine(Comentario);
        Console.WriteLine(NumRemito);

        var insumo = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{data.InsumoNavigation.Id}");
        var DeLoteUnico = insumo.List.Tipo == "Lote unico";

        SweetAlertOptions laAlert = new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Confirmará la recepción.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"

            };

        SweetAlertResult result = await Swal.FireAsync(laAlert);

        if (result.IsConfirmed)
        {
            var orden = await http.GetFromJsonAsync<Respuesta<OrdencompraDTO>>($"/api/OC/insumo/{data.InsumoNavigation.Id}");
            var lotesGet = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");
            insumo.List.Recepcion = "Recibido";

            if (insumo.List.Lotes != null)
            {
                var lotesExistentes = lotesGet.List.Where(x => x.IdInsumo == insumo.List.Id);

                if (lotesExistentes.Count() != 0)
                {
                    foreach (var loteParticular in lotesExistentes)
                    {
                        if (loteParticular.Numero > mayorLote)
                        {
                            mayorLote = loteParticular.Numero; 
                        }
                    }
                }
            }

            if (DeLoteUnico)
            {
                insumo.List.StockReal += Convert.ToInt32(data.Cantidad);
                if (lotesGet != null)
                {

                    var lotesExistentes = lotesGet.List.Where(x => x.IdInsumo == insumo.List.Id).ToList();



                    Lote loteNuevo = new()
                        {
                            IdInsumo = insumo.List.Id, 
                            Tipo = "Lote unico",
                            Numero = mayorLote + 1,
                    Cantidad = insumo.List.StockReal, 
                    FechaIngreso = DateTime.Now, OC = data.Id };

                    if (cantidad != 0)
                    {
                        loteNuevo.Cantidad = cantidad;
                    }

                    await http.PostAsJsonAsync<Lote>("/api/lotes",loteNuevo);


                }
                else
                {
                    Lote loteNuevo = new()
                        {

                            IdInsumo = insumo.List.Id,
                            Tipo = "Lote unico",
                            Numero = mayorLote + 1,
                            Cantidad = insumo.List.StockReal,
                            FechaIngreso = DateTime.Now,
                            OC = data.Id
                        };


                    if(cantidad != 0)
                    {
                        loteNuevo.Cantidad = cantidad;
                    }
                    await http.PostAsJsonAsync<Lote>("/api/lotes", loteNuevo);
                }
                await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", insumo.List);
            }

            if (!DeLoteUnico)
            {

                insumo.List.StockReal += Convert.ToInt32(data.Cantidad);



                if (insumo.List.Lotes != null)
                {
                    var lotesExistentes = lotesGet.List.Where(x => x.IdInsumo == insumo.List.Id).ToList();

                    Lote lotesNuevo = new() { IdInsumo = insumo.List.Id,Tipo = "Lote nuevo", Numero = mayorLote + 1 , 
                     Cantidad = Convert.ToInt32(data.Cantidad), FechaIngreso = DateTime.Now, OC = data.Id,
                     NroRemito = NumRemito, Proveedor = data.ProveedorNavigation.RazonSocial };


                    if (cantidad != 0)
                    {
                        lotesNuevo.Cantidad = cantidad;
                    }
                    await http.PostAsJsonAsync<Lote>("/api/Lotes", lotesNuevo);



                }
                else
                {

                    List<Lote> lotes = new();
                    Lote lotesNuevo = new()
                        {
                            IdInsumo = insumo.List.Id,Tipo = "Lote nuevo",
                            Numero = mayorLote + 1, Cantidad = Convert.ToInt32(data.Cantidad),
                    FechaIngreso = DateTime.Now, OC = data.Id };

                    if (cantidad != 0)
                    {
                        lotesNuevo.Cantidad = cantidad;
                    }

                    await http.PostAsJsonAsync<Lote>("/api/Lotes", lotesNuevo);

                }

                await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", insumo.List);
            }

            data.Recepcionada = DateTime.Now;
            data.Comentario = Comentario;            
            await http.PutAsJsonAsync<OrdencompraDTO>("/api/OC", orden.List);


            await OnInitializedAsync();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }


    async Task Aceptar(OrdencompraDTO data)
    {


        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };

        var formModal = Modal.Show<AddReception>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await ModalConfirm(data, ((string?, string?, int?))result.Data);

            await OnInitializedAsync();
            await grid.Reload();

        }



    }

    public async Task Rechazada(OrdencompraDTO data)
    {
        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };

        parameters.Add(nameof(AddRechazada.id), data.Id);

        var formModal = Modal.Show<AddRechazada>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
           
            await OnInitializedAsync();
            await grid.Reload();

        }


    }


}