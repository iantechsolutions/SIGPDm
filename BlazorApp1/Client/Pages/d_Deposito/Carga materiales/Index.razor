@page "/recepcionmateriales"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Recepción de materiales</h1>
<p>En esta sección se podrán gestionar la recepción de los materiales.</p>
<hr />
@if (oRespuesta.List != null)
{



    <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

    <br />
    <br />
    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                    AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                    Data="@oRespuesta.List" TItem="OrdencompraDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">

        <Columns>
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="InsumoNavigation.Descripcion" Title="Insumo" Width="25%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="ProveedorNavigation.RazonSocial" Title="Proveedor" Width="25%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Precio" Title="Precio" Width="10%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="15%" />
            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Especificacion" Title="Especificación" Width="15%" />


            <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                <Template Context="data">
                    <button class="btn" title="Confirmar recepcion" @onclick="() => confirmarRecepcion(data)"><FeatherCheck Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>



        </Columns>

    </RadzenDataGrid>


    @*    <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="4"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@oRespuestaPendienteRecepcion" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="50px" />
            <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Código" Width="50px" />
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">

                    <a>@(data.OrdencompraInsumoNavigations.Where(x=>x.Estado=="Aprobada").ToList().First().Cantidad)</a>

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="OrdencompraInsumoNavigations.ProveedorNavigation.RazonSocial" Title="Cantidad" Width="50px" />

            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Confirmar recepcion" @onclick="() => confirmarRecepcion(data.InsumoNavigation.Id)"><FeatherCheck Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>*@
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    List<InsumoDTO> oRespuestaPendienteRecepcion = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    int? mayorLote = 0;
    Respuesta<List<OrdencompraDTO>> oRespuesta = new();
    ICollection<OrdencompraDTO> Presupuestos;
    RadzenDataGrid<OrdencompraDTO>? grid;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        //var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        //oRespuesta = respuesta;
        //oRespuestaPendienteRecepcion = respuesta.List.Where(x => x.Recepcion == "Esperando recepcion").ToList();

        var respuesta = await http.GetFromJsonAsync<Respuesta<List<OrdencompraDTO>>>($"/api/oc/Recepciones");
        oRespuesta = respuesta;


        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }

    public async Task ModalConfirm(OrdencompraDTO data, string? NroRemito)
    {
        var esDeLoteUnico = await http.GetFromJsonAsync<bool>($"/api/lotes/esdeloteunico{data.InsumoNavigation.Id}");

        SweetAlertOptions laAlert = new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Confirmará la recepción.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"

            };

        SweetAlertResult result = await Swal.FireAsync(laAlert);

        if (result.IsConfirmed)
        {
            var insumo = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{data.InsumoNavigation.Id}");
            var orden = await http.GetFromJsonAsync<Respuesta<OrdencompraDTO>>($"/api/OC/insumo/{data.InsumoNavigation.Id}");

            insumo.List.Recepcion = "Recibido";

            if (insumo.List.Lotes != null)
            {
                var lotesExistentes = JsonSerializer.Deserialize<List<Lote>>(insumo.List.Lotes);

                if (lotesExistentes.Count != 0)
                {
                    foreach (var loteParticular in lotesExistentes)
                    {
                        if (loteParticular.Numero > mayorLote)
                        {
                            mayorLote = loteParticular.Numero;
                        }
                    }
                }
            }

            if (esDeLoteUnico)
            {
                insumo.List.StockReal += Convert.ToInt32(orden.List.Cantidad);
                if (insumo.List.Lotes != null)
                {
                    var lotes = JsonSerializer.Deserialize<List<Lote>>(insumo.List.Lotes);
                    Lote loteNuevo = new() { Tipo = "Lote unico", Numero = mayorLote + 1, Cantidad = insumo.List.StockReal, FechaIngreso = DateTime.Now, OC = orden.List.Id };
                    lotes.Add(loteNuevo);
                    insumo.List.Lotes = JsonSerializer.Serialize<List<Lote>>(lotes);
                }
                else
                {
                    List<Lote> lotes = new();
                    Lote loteNuevo = new() { Tipo = "Lote unico", Numero = mayorLote + 1, Cantidad = insumo.List.StockReal, FechaIngreso = DateTime.Now, OC = orden.List.Id };
                    lotes.Add(loteNuevo);
                    insumo.List.Lotes = JsonSerializer.Serialize<List<Lote>>(lotes);
                }
                await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", insumo.List);
            }

            if (!esDeLoteUnico)
            {

                insumo.List.StockReal += Convert.ToInt32(orden.List.Cantidad);


                if (insumo.List.Lotes != null)
                {

                    var lotes = JsonSerializer.Deserialize<List<Lote>>(insumo.List.Lotes);

                    Lote loteNuevo = new() { Tipo = "Lote nuevo", Numero = mayorLote + 1, Cantidad = Convert.ToInt32(orden.List.Cantidad), FechaIngreso = DateTime.Now, OC = orden.List.Id, NroRemito = NroRemito, Proveedor = data.ProveedorNavigation.RazonSocial };
                    lotes.Add(loteNuevo);
                    insumo.List.Lotes = JsonSerializer.Serialize<List<Lote>>(lotes);

                }
                else
                {

                    List<Lote> lotes = new();
                    Lote loteNuevo = new() { Tipo = "Lote nuevo", Numero = mayorLote + 1, Cantidad = Convert.ToInt32(orden.List.Cantidad), FechaIngreso = DateTime.Now, OC = orden.List.Id };
                    lotes.Add(loteNuevo);
                    insumo.List.Lotes = JsonSerializer.Serialize<List<Lote>>(lotes);
                }

                await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", insumo.List);
            }

            orden.List.Recepcionada = DateTime.Now;
            await http.PutAsJsonAsync<OrdencompraDTO>("/api/OC", orden.List);


            await OnInitializedAsync();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task confirmarRecepcion(OrdencompraDTO data)
    {


        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };

        var formModal = Modal.Show<AddReception>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await ModalConfirm(data,(string?) result.Data);
            await OnInitializedAsync();
            await grid.Reload();

        }



    }
}