@page "/herramientas"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Herramientas</h1>
<p>Descripción herramientas (*)</p>
<hr />
<br/>
<AuthorizeView Roles="Deposito, USUARIOMAESTRO">
        <Authorized>
<button class="btn btn-outline-success" @onclick="()=>add(0)">Agregar herramienta</button>
        </Authorized>
    </AuthorizeView>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />

@if (oHerramientas != null)
{
    <br />

    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                Data="@oHerramientas" TItem="MaquinasHerramienta" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Codigo" Filterable="false" Title="Codigo" Width="15%" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Descripcion" Title="Descripción" Width="15%" />
            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Marca" Title="Marca" Width="15%" />
            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Cantidad" Title="Cantidad" Width="15%" />

            @* <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="MantenimientoPreventivo" Title="Mantenimiento preventivo" Width="20%" >
                <Template Context="data">
                    @if (data.MantenimientoPreventivo != null && data.MantenimientoPreventivo.Value.Day == DateTime.Now.Day)
                    {
                        <a>@data.MantenimientoPreventivo</a>
                    }
                    else
                    {
                        <a>No realizado</a>

                    }
                </Template>
            </RadzenDataGridColumn> *@
            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="FechaIngreso" Title="Fecha de ingreso" Width="20">
                <Template Context="data">
                    @if (data.FechaIngreso.HasValue)
                    {
                        <a>@data.FechaIngreso.Value.ToString("dd/MM/yyyy")</a>
                    }
                </Template>
            </RadzenDataGridColumn>

            <AuthorizeView Roles="Deposito, USUARIOMAESTRO">
                <Authorized>
                    <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button class="btn" title="Editar" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                        </Template>
                    </RadzenDataGridColumn>
      

            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="8%">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
                </Authorized>
            </AuthorizeView>
            <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="8%">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    List<MaquinasHerramienta> oHerramientas = new();

    RadzenDataGrid<MaquinasHerramienta>? grid;
    int currentPage;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }

    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        nav.NavigateTo($"/infoherramienta/{id}");
        await grid.GoToPage(currentPage);
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<MaquinasHerramienta>>>("/api/Maquinas");
        oHerramientas = respuesta.List.Where(x => x.Codigo.StartsWith("H-")).ToList();
        StateHasChanged();
    }

    async void delete(int id)
    {
        
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/Maquinas/{id}");
        await Get();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int id)
    {
        
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Marca").FirstOrDefault();
        var columNom = grid.ColumnsCollection.Where(c => c.Property == "FechaIngreso").FirstOrDefault();
        
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        object? filtroAnteriorNom = columNom.GetFilterValue();


        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddMaquinas.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };
        var formModal = Modal.Show<AddMaquinas>("Agregar maquina o herramienta", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
            
            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columNom.FilterValue = filtroAnteriorNom;
            
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            columNom.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();
        }
    }

   

    async Task AddMantenimiento(int id)
    {

        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Mantenimiento.id), id);

        var formModal = Modal.Show<Mantenimiento>("Generar mantenimiento preventivo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await Get();
        }


    }
}