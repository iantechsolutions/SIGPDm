@page "/herramientas"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Herramientas</h1>
<p>Descripción herramientas (*)</p>
<hr />
<br/>
<AuthorizeView Roles="Deposito, USUARIOMAESTRO">
        <Authorized>
<button class="btn btn-outline-success" @onclick="()=>addNew(0)">Agregar herramienta</button>
        </Authorized>
    </AuthorizeView>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />

@if (oHerramientas != null)
{
    <br />
     <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            

            <RadzenTabsItem Text="Herramientas">
                <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid3"
                                Data="@oInsumos" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Filterable="false" Title="Codigo" Width="15%" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="15%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Marca" Title="Marca" Width="15%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="StockReal" Title="Cantidad" Width="10%">
                            <Template Context="data">
                                @if (data.Tipo == "Lote unico")
                                {
                                    @data.StockReal
                                }
                                else
                                {
                                    @calcularCantidad(data)
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        @* <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="MantenimientoPreventivo" Title="Mantenimiento preventivo" Width="20%" >
                    <Template Context="data">
                    @if (data.MantenimientoPreventivo != null && data.MantenimientoPreventivo.Value.Day == DateTime.Now.Day)
                    {
                    <a>@data.MantenimientoPreventivo</a>
                    }
                    else
                    {
                    <a>No realizado</a>

                    }
                    </Template>
                    </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="FechaIngreso" Title="Fecha de ingreso" Width="20">
                            <Template Context="data">
                                @if (data.FechaIngreso.HasValue)
                                {
                                    <a>@data.FechaIngreso.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <AuthorizeView Roles="Deposito, USUARIOMAESTRO">
                            <Authorized>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="8%">
                                    <Template Context="data">
                                        <button class="btn" title="Editar" @onclick="() => addNew(data.Id)"><FeatherEdit Color="green" /></button>
                                    </Template>
                                </RadzenDataGridColumn>


                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="8%">
                                    <Template Context="data">
                                        <button class="btn" title="Eliminar" @onclick="() => alertaDeleteNew(data.Id)"><FeatherTrash2 Color="red" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Authorized>
                        </AuthorizeView>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="8%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfoNew(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            </RadzenTabsItem>
            <RadzenTabsItem Text="Herramientas temporal">
                <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@oHerramientas" TItem="MaquinasHerramienta" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Codigo" Filterable="false" Title="Codigo" Width="15%" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Descripcion" Title="Descripción" Width="15%" />
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Marca" Title="Marca" Width="15%" />
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Cantidad" Title="Cantidad" Width="15%" />

                        @* <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="MantenimientoPreventivo" Title="Mantenimiento preventivo" Width="20%" >
                    <Template Context="data">
                    @if (data.MantenimientoPreventivo != null && data.MantenimientoPreventivo.Value.Day == DateTime.Now.Day)
                    {
                    <a>@data.MantenimientoPreventivo</a>
                    }
                    else
                    {
                    <a>No realizado</a>

                    }
                    </Template>
                    </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="FechaIngreso" Title="Fecha de ingreso" Width="20">
                            <Template Context="data">
                                @if (data.FechaIngreso.HasValue)
                                {
                                    <a>@data.FechaIngreso.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <AuthorizeView Roles="Deposito, USUARIOMAESTRO">
                            <Authorized>
                                <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="8%">
                                    <Template Context="data">
                                        <button class="btn" title="Editar" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                                    </Template>
                                </RadzenDataGridColumn>


                                <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="8%">
                                    <Template Context="data">
                                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Authorized>
                        </AuthorizeView>
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="8%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    List<MaquinasHerramienta> oHerramientas = new();
    List<InsumoDTO>? oInsumos = new();

    RadzenDataGrid<MaquinasHerramienta>? grid;
    RadzenDataGrid<InsumoDTO>? grid3;
    int currentPage;
    bool allowFiltering = false;



    List<Lote>? listaTodosLotes = new();


    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }

    async Task gotoinfo(MaquinasHerramienta maquina)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "El insumo se visualizara en la seccion de herramientas ",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Mover",
                CancelButtonText = "Cancelar"
            });
        InsumoDTO? insumo = new();
        if (!string.IsNullOrEmpty(result.Value))
        {
            maquina.Categoria = "Herramienta";
            insumo.Categoria = "Herramienta";
            insumo.StockMin = 0;
            insumo.StockMax = 0;
            insumo.StockReal = maquina.Cantidad ?? 0;
            insumo.Nombre = maquina.Nombre;
            insumo.Codigo = maquina.Codigo;
            insumo.Descripcion = maquina.Descripcion;
            insumo.Tipo = "Lote unico";
            insumo.Asignacion = maquina.Asignacion;
            insumo.PeriodicidadMantenimiento = maquina.PeriodicidadMantenimiento;
            insumo.Estado = maquina.Estado;
            insumo.MotivoEstado = maquina.MotivoEstado;
            insumo.Disposicion = maquina.Disposicion;
            insumo.MotivoDisposicion = maquina.MotivoDisposicion;
            insumo.UltimoMant = maquina.UltimoMant;
            insumo.DetalleMantenimiento = maquina.DetalleMantenimiento;
            insumo.Personal = maquina.Personal;
            insumo.DetalleCorrectivo = maquina.DetalleCorrectivo;
            insumo.MantenimientoPreventivo = maquina.MantenimientoPreventivo;
            insumo.Categoria = maquina.Categoria;
            insumo.Marca = maquina.Marca;
            insumo.FechaIngreso = maquina.FechaIngreso;
            await http.DeleteAsync($"/api/Maquinas/{maquina}");

            await http.PostAsJsonAsync<InsumoDTO>("/api/insumo", insumo);


        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }

    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<MaquinasHerramienta>>>("/api/Maquinas");
        oHerramientas = respuesta.List.Where(x => x.Codigo.StartsWith("H-")).ToList();

        var rta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oInsumos = rta.List.Where(x => x.Categoria == "Herramienta").ToList();


        var respuestaa = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/lotes");
        listaTodosLotes = respuestaa.List;
        StateHasChanged();
    }

    async void delete(int id)
    {
        
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/Maquinas/{id}");
        await Get();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int id)
    {
        
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Marca").FirstOrDefault();
        var columNom = grid.ColumnsCollection.Where(c => c.Property == "FechaIngreso").FirstOrDefault();
        
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        object? filtroAnteriorNom = columNom.GetFilterValue();


        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddHerramientas.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };
        var formModal = Modal.Show<AddHerramientas>("Agregar maquina o herramienta", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
            
            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columNom.FilterValue = filtroAnteriorNom;
            
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            columNom.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();
        }
    }

   

    async Task AddMantenimiento(int id)
    {

        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Mantenimiento.id), id);

        var formModal = Modal.Show<Mantenimiento>("Generar mantenimiento preventivo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await Get();
        }


    }










    async Task addNew(int id)
    {

       


        currentPage = grid3.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddHerramientaInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };
        var formModal = Modal.Show<AddHerramientaInsumo>("Agregar insumo tipo herramienta", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await Get();
            if (currentPage > grid3.Count / grid3.PageSize - 1 && grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage - 1);
            }
            else if (grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage);
            }
        }
        else
        {
            await Get();
            if (currentPage > grid3.Count / grid3.PageSize - 1 && grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage - 1);
            }
            else if (grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage);
            }
        }
    }

    async Task gotoinfoNew(int id)
    {
        currentPage = grid3.CurrentPage;
        nav.NavigateTo($"/infoherramienta/{id}");
        await grid3.GoToPage(currentPage);
    }
    async void deleteNew(int id)
    {
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/insumo/{id}");
        await Get();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }
    public async Task alertaDeleteNew(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteNew(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }







    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
        }
        insumo.StockReal = total;
        return total;
    }
}