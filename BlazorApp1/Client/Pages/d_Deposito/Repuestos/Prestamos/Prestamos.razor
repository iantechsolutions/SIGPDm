@page "/Prestamo"

<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1 class="no-print">Prestamos</h1>
<br />
@* <button class="btn btn-outline-success" @onclick="gotoprestamo">Agregar prestamo</button>
 *@
<button class="btn btn-outline-success" @onclick="gotoprestamoMaquina">Agregar prestamo de maquina</button>
<button class="btn btn-outline-success" @onclick="gotoprestamoHerramientas">Agregar prestamo de herramientas</button>

<br />
<br />
 
<RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Pendientes">
            <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridPendientes"
                            Data="@oPrestamoPendiente" TItem="PrestamoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    

                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="Operario" Title="Operario" Width="15%">
                        <Template Context="data">
                            @if (data.OperarioNavigation.Nombres != null)
                            {
                                <p>@(data.OperarioNavigation.Apellido)  @data.OperarioNavigation.Nombres</p>
                            }
                            else
                            {
                                <Div> -</Div>
                            }
                        </Template>
                        </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="Maquina" Width="20%">
                        <Template Context="data">
                            @try
                            {
                                @Maquinas.Where(x => x.Id == data.Maquina).FirstOrDefault().Descripcion
                            }
                            catch
                            {
                                <Div> -</Div>
                            }
                        </Template>
                        </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="FechaInicio" Title="Fecha de inicio" Width="15%" />
                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="Cantidad" Title="Cantidad" Width="15%" />

                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Información" @onclick="() => GoInfo(data.Id)"><FeatherInfo Color="Blue" /> </button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Finalizar" @onclick="() => FinishAlert(data.Id)"><FeatherCheck Color="Green" /> </button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Eliinar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash Color="Red" /> </button>
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>

        </RadzenTabsItem>

        <RadzenTabsItem Text="Finalizados">

            <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
           
            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                            Data="@oPrestamoFinish.Where(x=>x.Maquina!=null)" TItem="PrestamoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>  
                   <RadzenDataGridColumn TItem="PrestamoDTO" Property="Operario" Title="Operario" Width="15%">
                        <Template Context="data">
                            @if (data.OperarioNavigation.Nombres != null)
                            {
                                <p>@(data.OperarioNavigation.Apellido)  @data.OperarioNavigation.Nombres</p>

                            }
                            else
                            {
                                <Div> -</Div>
                            }
                        </Template>
                        </RadzenDataGridColumn>

                     <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="Maquina" Width="20%">
                        <Template Context="data">
                            @try
                            {
                                @Maquinas.Where(x => x.Id == data.Maquina).FirstOrDefault().Descripcion
                            }
                            catch
                            {
                                <Div> -</Div>
                            }
                        </Template>
                        </RadzenDataGridColumn>           
                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="FechaInicio" Title="Fecha de inicio" Width="15%" />
                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="FechaFinReal" Title="Fecha fin" Width="15%" />

                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Información" @onclick="() => GoInfo(data.Id)"><FeatherInfo Color="Blue" /> </button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Eliinar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash Color="Red" /> </button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
    
        </RadzenTabsItem>
        </Tabs>
        </RadzenTabs>



@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    Respuesta<List<PrestamoDTO>> oPrestamo = new();
    List<PrestamoDTO> oPrestamoFinish = new();
    List<PrestamoDTO> oPrestamoPendiente = new();
    List<MaquinasHerramienta> maquinas = new();
    RadzenDataGrid<PrestamoDTO>? grid;
    RadzenDataGrid<PrestamoDTO>? gridPendientes;

    Respuesta<List<PersonalDTO>> oPersonal = new();

    List<MaquinasHerramienta> Maquinas = new();

    bool allowFiltering = false;
    object? Filter;


    protected override async Task OnInitializedAsync()
    {
        oPrestamo = await http.GetFromJsonAsync<Respuesta<List<PrestamoDTO>>>("/api/prestamo");

        oPrestamoFinish = oPrestamo.List.Where(x=>x.Estado == "Finalizado").ToList();

        oPrestamoPendiente = oPrestamo.List.Where(x => x.Estado != "Finalizado").ToList();

        var rt = await http.GetFromJsonAsync<Respuesta<List<MaquinasHerramienta>>>("/api/Maquinas");
        Maquinas = rt.List;

        StateHasChanged();
    }



    async Task gotoprestamo()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddPrestamo>("Administrar Prestamos", options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");


            await OnInitializedAsync();         
        }
        else
        {
            await gridPendientes.Reload();
            await OnInitializedAsync();


        }
    }

    async Task gotoprestamoMaquina()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddMaquinaPrestamo>("Crear prestamos", options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");


            await OnInitializedAsync();
        }
        else
        {
            await gridPendientes.Reload();
            await OnInitializedAsync();


        }
    }
    async Task gotoprestamoHerramientas()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var parameters = new ModalParameters();
        parameters.Add(nameof(AddMaquinaPrestamo.tipo), "herramienta");
        var formModal = Modal.Show<AddMaquinaPrestamo>("Crear prestamos", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");


            await OnInitializedAsync();
        }
        else
        {
            await gridPendientes.Reload();
            await OnInitializedAsync();


        }
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    public async Task Finish(int id)
    {
        var presta = oPrestamoPendiente.Where(x => x.Id == id).FirstOrDefault();

        presta.Estado = "Finalizado";
        presta.FechaFinReal = DateTime.Now;

        await http.PutAsJsonAsync<PrestamoDTO>("/api/prestamo", presta);

        await grid.Reload();
        await OnInitializedAsync();

    }

    public async Task FinishAlert(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se finalizara el presupuesto",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Finalizar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            Finish(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            Console.WriteLine("Modal was cancelled");
        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este prestamo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            Console.WriteLine("Modal was cancelled");
        }
    }

    public async Task delete(int id)
    {


        await http.DeleteAsync($"/api/prestamo/{id}");
        await grid.Reload();
        await OnInitializedAsync();

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }
    public async Task GoInfo(int id)
    {
       
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(InfoPrestamos.Id), id);
        var formModal = Modal.Show<InfoPrestamos>("", parameters, options);
        var result = await formModal.Result;
    }


}
