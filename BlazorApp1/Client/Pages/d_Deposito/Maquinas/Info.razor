@page "/infoInsumos/{id:int}"

@using System;
@using System.Drawing.Printing;
@using System.Windows;
@inject IJSRuntime _js

<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        .sidebar {
            display: none !important;
        }
        body {
            font-size: 7px !important;
            margin: 0;
            padding: 0;
            margin-bottom: 5px;
        }

        .texto3 {
            font-size: 2vh !important;
        }


        .texto {
            font-size: 8px !important;
        }
        .rz-datagrid-table {
            border-collapse: collapse !important;
        }

        .rz-datagrid-cell,
        .rz-datagrid-header-cell,
        .rz-datagrid-row {
            font-size: 6px !important;
            border: none !important;
            box-shadow: none !important;
        }

        .text2 {
            font-size: 10px;
        }

        .print-small-text {
            font-size: 8px;
        }

       
        .texto {
            font-size: 8px !important;
        }
        .rz-card {
            border: none !important;
            box-shadow: none !important;
        }

        hr {
            display: none !important;
        }
        br {
            display: none !important;
        }
    }
    


</style>

<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<div class="flex-column no-print">

    <button class="btn btn-outline-success " style="float:right" @onclick="()=>Mantenimiento()">Mantenimiento correctivo</button>
    <button class="btn btn-outline-success" style="float:right" @onclick="()=>Print()">Imprimir detalles de mantenimiento</button>

    <p>Descripción maquina (*)</p>
</div>
<br />

<hr />
<br />

<div class="row">
    <!-- Tarjeta para información general de la máquina y mantenimientos preventivos -->
    <div class="col-12 no-print">
        <RadzenCard Class="m-3 no-print">
            <div class="p-3">
                <h1 style="font-size:3vh"><strong>Ficha técnica @oInsumo.Codigo</strong></h1>
                <div class="no-print">
                    <div class="row">
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Nombre</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Nombre</b></RadzenText>
                        </div>
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Marca</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Marca</b></RadzenText>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Descripcion</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Descripcion</b></RadzenText>
                        </div>
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Asignacion</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Asignacion</b></RadzenText>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Detalle ultimo mantenimiento preventivo</RadzenText>
                            @if (oInsumo.DetalleMantenimiento != null)
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.DetalleMantenimiento</b></RadzenText>
                            }
                            else
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>No se registro un detalle</b></RadzenText>
                            }
                        </div>
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Ultimo mantenimiento preventivo</RadzenText>
                            @if (oInsumo.UltimoMant.HasValue)
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.MantenimientoPreventivo</b></RadzenText>
                            }
                            else
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>No se registro un mantenimiento inicial</b></RadzenText>
                            }
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Fecha de ingreso</RadzenText>
                            @if (oInsumo.FechaIngreso.HasValue)
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.FechaIngreso.Value.ToString("dd/MM/yyyy")</b></RadzenText>
                            }
                            else
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>Sin fecha de ingreso registrada</b></RadzenText>
                            }
                        </div>
                        <div class="col-sm-6">
                            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Periodicidad mantenimiento</RadzenText>
                            @if (oInsumo.PeriodicidadMantenimiento.HasValue)
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>Cada @oInsumo.PeriodicidadMantenimiento Días</b></RadzenText>
                            }
                            else
                            {
                                    <RadzenText TextStyle="TextStyle.Body1"><b>No se registro una periodicidad para el mantenimiento</b></RadzenText>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </RadzenCard>
    </div>

    <br />
    <RadzenCard Class="m-3">
        <div style="display: flex; justify-content: space-between; align-items: center;" >
            <h1 style="font-size: 2vh; margin: 0;" class="texto3"><strong> @oInsumo.Codigo @oInsumo.Nombre MARCA @oInsumo.Marca @DateTime.Now.ToString("dd/MM/yyyy")</strong></h1>
            <button class="btn btn-outline-success no-print" @onclick="()=>Print2()">Imprimir detalles de mantenimiento</button>
        </div>

        <br />
        <div class="row" style="margin-top: 2vh">
            <div class="col-sm-2">
                <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0 texto">Asignación</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="text2"><b>@oInsumo.Asignacion</b></RadzenText>
            </div>

            <div class="col-sm-2">
                <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0 texto">Estado</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="text2"><b>@oInsumo.Estado</b></RadzenText>
            </div>

            <div class="col-sm-2">
                <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0 texto">Motivo Estado</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="text2"><b>@oInsumo.MotivoEstado</b></RadzenText>
            </div>
            <div class="col-sm-3">
                <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0 texto">Fecha de ingreso</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="text2"><b>@oInsumo.FechaIngreso.Value.ToString("dd/MM/yyyy")</b></RadzenText>
            </div>
            <div class="col-sm-3">
                <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0 texto">Proximo mantenimiento</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="text2"><b>@proxMant.ToString("dd/MM/yyyy")</b></RadzenText>
            </div>
        </div>
    </RadzenCard>

    <div class="row align-items-end no-print">
        <div class="col-3 no-print">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Seleccione fecha de inicio: </RadzenText>
            <RadzenDatePicker @bind-Value="@fechaDesde" Style="margin-bottom: 20px;" ShowTime="false" />
        </div>
        <div class="col-3 no-print">
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Seleccione fecha de fin: </RadzenText>
            <RadzenDatePicker @bind-Value="@fechaHasta" Style="margin-bottom: 20px;" ShowTime="false" />
        </div>
    </div>

    <br />
    <div>
        <br />

        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                        AllowSorting="true" PageSize="60" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" Density="Density.Compact" ShowPagingSummary="true" @ref="grid2"
                        Data="@FiltrarMantenimientosPorFecha()" TItem="Mantenimiento" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or" Style="font-size: 8px!important;border: none !important;
            box-shadow: none !important;">
            <Columns>
                <RadzenDataGridColumn TItem="Mantenimiento" Property="Fecha" Filterable="false" Title="Fecha" Width="15%" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        @if (data.Fecha.HasValue)
                        {
                                 <p class="texto-clamp text2 " style="word-wrap: break-word; word-break: break-all; white-space: normal;">@data.Fecha.Value.ToString("dd/MM/yyyy")</p>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Mantenimiento" Property="Personal" Filterable="false" Title="Operario" Width="15%" TextAlign="TextAlign.Center">
                 <Template Context="data">
                        @if (data.Personal != null)
                        {
                            <p class="texto-clamp text2 " style="word-wrap: break-word; word-break: break-all; white-space: normal;">@data.Personal</p>
                        }
                    </Template>
                    </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Mantenimiento" Property="Detalle" Filterable="false" Title="Detalle" Width="30%" TextAlign="TextAlign.Center">
                  <Template Context="data">
                    @if(data.Detalle != null)
                        {
                        <p class="texto-clamp text2 " style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.Detalle)</p>
                        }
                        else
                        {
                            <p>-</p>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Mantenimiento" Property="Tipo" Filterable="false" Title="Tipo" Width="10%" TextAlign="TextAlign.Center" >
                     <Template Context="data">
                        @if (data.Tipo != null)
                        {
                            <p class="texto-clamp text2 " style="word-wrap: break-word; word-break: break-all; white-space: normal;">@data.Tipo</p>
                        }
                    </Template>
                    </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Mantenimiento" Property="Etapas" Filterable="false" Title="Pasos" Width="30%" TextAlign="TextAlign.Center">
                  <Template Context="data">
                        @if (data.Etapas != null)
                        {
                        <p class="texto-clamp text2 " style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.Etapas)</p>
                        }
                        else
                        {
                            <p>-</p>
                        }
                    </Template>
                </RadzenDataGridColumn>
              
            </Columns>
        </RadzenDataGrid>
    </div>
    </div>


    <br />
<br />
<br />


@code {

    [Parameter] public int id { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    InsumoDTO? oInsumo = new();
    RadzenDataGrid<InsumoDTO>? grid = new();
    DateTime proxMant = new();
    int currentPage;
    bool allowFiltering = false;
    string? desc = "";

    List<Mantenimiento> Mantenimientoss = new();
    RadzenDataGrid<Mantenimiento>? grid2;

    DateTime? fechaDesde = new DateTime(DateTime.Now.Year, 1, 1);

    DateTime? fechaHasta = DateTime.Now;


    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/insumo/{id}");


        var respuesta2 = await http.GetFromJsonAsync<Respuesta<List<Mantenimiento>>>("/api/Mantenimiento");
        Mantenimientoss = respuesta2.List.Where(x=>x.Insumo == id).OrderByDescending(x=>x.Fecha).ToList();

        if (respuesta == null || respuesta.List == null)
        {
            Console.WriteLine("La respuesta de la API es nula.");
            return;
        }

        oInsumo = respuesta.List;
        StateHasChanged();

        if (!string.IsNullOrEmpty(oInsumo.DescripcionMantenimiento))
        {
            try
            {
                desc = string.Join(", ", JsonSerializer.Deserialize<List<string>>(oInsumo.DescripcionMantenimiento) ?? new List<string>());
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error al deserializar DescripcionMantenimiento: {ex.Message}");
                desc = "-";
            }
        }

        if (oInsumo.UltimoMant.HasValue && oInsumo.PeriodicidadMantenimiento.HasValue)
        {
            TimeSpan perio = TimeSpan.FromDays((double)oInsumo.PeriodicidadMantenimiento);
            TimeSpan difference = DateTime.Now - oInsumo.UltimoMant.Value;
            var multiplicador = Math.Ceiling(difference.TotalDays / perio.TotalDays);
            proxMant = oInsumo.UltimoMant.Value.AddDays(multiplicador * ((double)oInsumo.PeriodicidadMantenimiento));
        }
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/maquinas");
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }



    private IEnumerable<Mantenimiento> FiltrarMantenimientosPorFecha()
    {
        return Mantenimientoss
            .Where(m =>
                (!fechaDesde.HasValue || m.Fecha >= fechaDesde) &&  // Filtra por fecha desde si se ha seleccionado
                (!fechaHasta.HasValue || m.Fecha <= fechaHasta))    // Filtra por fecha hasta si se ha seleccionado
            .ToList();
    }











    public async Task Mantenimiento()
    {
        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Large
            };
        parameters.Add(nameof(MantenimientoCorrectivo.id), id);

        var formModal = Modal.Show<MantenimientoCorrectivo>("Generar mantenimiento correctivo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await Get();
        }
    }



    public async Task MantenimientoInfo(int? id)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(InfoMantenimiento.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Medium

            };
        var formModal = Modal.Show<InfoMantenimiento>("Informacion del mantenimiento", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {

        }
    }

    public async Task Print2()
        => await _js.InvokeVoidAsync("window.print");


    public async Task Print()
    {
        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
                Size= ModalSize.Large
            };
        parameters.Add(nameof(ImprimirMantenimiento.id), id);

        var formModal = Modal.Show<ImprimirMantenimiento>("imprimir mantenimiento", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await Get();
        }
    }

}
