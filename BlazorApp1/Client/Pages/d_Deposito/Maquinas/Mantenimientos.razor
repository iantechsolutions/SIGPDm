<center>
    <div class="card">
        <div class="card-body d-flex flex-column" style="height: 100%;">
            @if (insumo != null)
            {

                <RadzenText><strong>Mantenimiento preventivo</strong></RadzenText>
                <br />

                <div class="row mb-3">
                    <div class="col-sm-6">
                        <label class="float:left;">Descripción del mantenimiento</label>
                        <input class="form-control" @bind="mant.Detalle" placeholder="descripcion" />
                    </div>
                    <div class="col-sm-6">
                        <label class="float:left;">Cantidad del mantenimiento</label>
                        <input type="number" class="form-control" @bind="mant.Cantidad" placeholder="Cantidad" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-sm-6">
                        <label class="float:left;">Fecha mantenimiento</label>
                        <RadzenDatePicker @bind-Value="insumo.MantenimientoPreventivo" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:100%;" />
                    </div>
                    @if (oRtaPersonal != null && oRtaPersonal.Count > 0)
                    {
                        <div class="col-sm-6">
                            <label>Operario</label>
                            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                    Data=@(oRtaPersonal) Style="width: 100%" AllowColumnResize="true" @bind-Value="operario"
                                                    TextProperty="Nombres" AllowFilteringByAllStringColumns="true">
                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombre/s" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No hay personal para mostrar</p>
                    }
                </div>

                <div>
                    <label>Pasos del mantenimiento:</label>
                    <br />
                    @foreach (var item in DescripcionMantenimiento)
                    {
                        <div class="col-sm-12 d-flex align-items-center mb-2">
                            <RadzenText>@item.Descripcion</RadzenText>
                            <RadzenCheckBox TValue="bool" @bind-Value="item.Seleccionado" style="margin-left: 10px;" />
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-end mt-auto">
                    <button style="font-size: 1.25rem; padding: 0.5rem 1rem;" class="rz-text-secondary-color rz-background-color-secondary-lighter" @onclick="cancel">Cancelar</button>
                    <button style="font-size: 1.25rem; padding: 0.5rem 1rem;" class="rz-text-primary-color rz-background-color-primary-lighter" @onclick="Guardar">Aceptar</button>
                </div>
            }
            else
            {
                <div>
                    <RadzenText>Error</RadzenText>
                </div>

            }
        </div>
    </div>
</center>



@code {
    bool disable;
    [Parameter] public int id { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }

    RadzenSteps? steps;
    // List<string> DescripcionMantenimiento = new();
    string? descripcion;
    IEnumerable<int>? values = new int[] { };
    Boolean? check = false;
    int? cantidad;
    Mantenimiento? mant = new();


    InsumoDTO? insumo = new();

    List<PersonalDTO>? oRtaPersonal = new();
    PersonalDTO? operario = new();

    // Nueva lista para mantener el estado de los checkboxes
    // List<bool> checkboxStates = new();


    public class PasoMantenimiento
    {
        public string? Descripcion { get; set; }
        public bool Seleccionado { get; set; }
    }
    List<PasoMantenimiento> DescripcionMantenimiento = new();



    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        disable = false;
        var rta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/insumo/{id}");
        insumo = rta.List;
        insumo.MantenimientoPreventivo = DateTime.Now;
        mant.Cantidad = insumo.StockReal ?? 0;

        var rta3 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/Personal");
        oRtaPersonal = rta3.List.Where(x => x.Activo == true).ToList();
        if (!string.IsNullOrEmpty(insumo.DescripcionMantenimiento))
        {
            try
            {
                var descripciones = JsonSerializer.Deserialize<List<string>>(insumo.DescripcionMantenimiento) ?? new List<string>();
                DescripcionMantenimiento = descripciones
                    .Select(d => new PasoMantenimiento { Descripcion = d, Seleccionado = false })
                    .ToList();
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Error deserializando DescripcionMantenimiento: {ex.Message}");
                DescripcionMantenimiento = new List<PasoMantenimiento>();
            }
        }
        else
        {
            DescripcionMantenimiento = new List<PasoMantenimiento>();
        }
    }

    public async Task alertaOk()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Se agregó el último mantenimiento",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = false,
                ConfirmButtonText = "Entendido"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }

    private async Task Guardar()
    {
        if (string.IsNullOrEmpty(mant.Detalle) ||
            mant.Cantidad <= 0 ||
            operario == null)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Todos los campos son obligatorios",
                    Icon = SweetAlertIcon.Success,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Entendido"
                });
        }
        else
        {

            insumo.DetalleMantenimiento = mant.Detalle;

            insumo.UltimoMant = DateTime.Now;
            await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", insumo);
            mant.Maquina = null;
            mant.Insumo = insumo.Id;
            mant.Name = insumo.Nombre;
            mant.Estado = insumo.Estado;

            mant.Personal = operario.Nombres + operario.Apellido;
            mant.Fecha = DateTime.Now;
            var pasosSeleccionados = DescripcionMantenimiento
               .Where(p => p.Seleccionado)
               .Select(p => p.Descripcion);
            mant.Etapas = string.Join(", ", pasosSeleccionados);
            mant.Detalle = mant.Detalle;

            await http.PostAsJsonAsync<Mantenimiento>("/api/Mantenimiento", mant);

            StateHasChanged();
            await alertaOk();

        }
    }


    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }
    public async Task alertaError2(string texto)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Formulario incompleto",
                Text = $"{texto}",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }
}
