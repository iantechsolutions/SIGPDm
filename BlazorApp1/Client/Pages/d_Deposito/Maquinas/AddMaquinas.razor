<div class="card">
    <div class="card-body">

        <EditForm Model="@maquina" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <!-- Información básica de la máquina -->
            <div class="row" style="width: 100%;">
                <div class="col-sm-4">
                    <label>Nombre</label>
                    <InputText @bind-Value="@maquina.Nombre" class="form-control" placeholder="Nombre"></InputText>
                    <ValidationMessage For="(() => maquina.Nombre)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Marca</label>
                    <InputText @bind-Value="@maquina.Marca" class="form-control" placeholder="Marca"></InputText>
                    <ValidationMessage For="(() => maquina.Marca)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label class="col-sm">Descripción</label>
                    <InputText @bind-Value="@maquina.Descripcion" class="form-control" placeholder="Descripción"></InputText>
                    <ValidationMessage For="(() => maquina.Descripcion)" style="color:red;" />
                </div>
            </div>
            <br />

            <!-- Información adicional de la máquina -->
            <div class="row" style="width: 100%;">
                <div class="col-sm-4">
                    <label>Código</label>
                    <InputText class="form-control" @bind-Value="@maquina.Codigo" placeholder="Código"></InputText>
                    <ValidationMessage For="(() => maquina.Codigo)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Estado</label>
                    <RadzenDropDown class="form-control" TValue="string" Data=@(estado) placeholder="Estado" @bind-Value=@maquina.Estado />
                    <ValidationMessage For="(() => maquina.Estado)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Motivo Estado</label>
                    <InputText @bind-Value="@maquina.MotivoEstado" class="form-control" placeholder="Motivo estado"></InputText>
                    <ValidationMessage For="(() => maquina.MotivoEstado)" style="color:red;" />
                </div>
            </div>
            <br />

            <!-- Información sobre la disposición -->
            <div class="row" style="width: 100%;">
                <div class="col-sm-4">
                    <label>Disposición</label>
                    <RadzenDropDown class="form-control" TValue="string" Data=@(disposicion) placeholder="Disposición" @bind-Value=@maquina.Disposicion />
                    <ValidationMessage For="(() => maquina.Disposicion)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Motivo Disposición</label>
                    <InputText @bind-Value="@maquina.MotivoDisposicion" class="form-control" placeholder="Motivo disposición"></InputText>
                    <ValidationMessage For="(() => maquina.MotivoDisposicion)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Asignación</label>
                    <InputText @bind-Value="@maquina.Asignacion" class="form-control" placeholder="Asignación"></InputText>
                    <ValidationMessage For="(() => maquina.Asignacion)" style="color:red;" />
                </div>
            </div>
            <br />

            <!-- Información de mantenimiento -->
            <div class="row" style="width: 100%;">
                <div class="col-sm-4">
                    <label>Fecha de ingreso</label>
                    <InputDate @bind-Value="@maquina.FechaIngreso" class="form-control" placeholder="Fecha de ingreso"></InputDate>
                    <ValidationMessage For="(() => maquina.FechaIngreso)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Fecha último mantenimiento</label>
                    <InputDate @bind-Value="@maquina.UltimoMant" class="form-control" placeholder="Fecha último mantenimiento"></InputDate>
                    <ValidationMessage For="(() => maquina.UltimoMant)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Periodicidad del mantenimiento (días)</label>
                    <InputNumber @bind-Value="@maquina.PeriodicidadMantenimiento" class="form-control" placeholder="Periodicidad del mantenimiento"></InputNumber>
                    <ValidationMessage For="(() => maquina.PeriodicidadMantenimiento)" style="color:red;" />
                </div>
            </div>
            <br />

            <!-- Sección de descripción de mantenimiento -->
            <div class="row" style="width: 100%;">
                <div class="col-sm-8">
                    <label>Ítems descripción</label>
                   <div class="flex">

                    <InputText class="form-control" @bind-Value="@descriptionValue" placeholder="Descripción"></InputText>
                    <button class="btn" type="button" @onclick="addDescription"><FeatherCheck Color="green" /></button>
                   </div>
                    <br />
                    <div class="col-sm-12">
                        @foreach (var item in DescripcionMantenimiento)
                        {
                            <div class="row flex">
                                 <li>
                                   @item
                                    <button class="btn" type="button" @onclick="() => deleteDescription(item)"><FeatherX Color="red"></FeatherX></button>
                                </li>
                             </div>
                        }
                    </div>
              </div>
            </div>
<br />

<!-- Botones de acción -->
<div class="row" style="width: 100%;">
    <div class="col-sm-12">
        <button type="submit" class="btn btn-primary mr-2" disabled=@disable>Aceptar</button>
        <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        <button @onclick="Reasignar" disabled="@(id == 0)" class="btn btn-primary mr-2 no-print">Mover a insumo</button>
        <button @onclick="ReasignarHerramienta" disabled="@(id == 0)" class="btn btn-primary mr-2 no-print">Mover a herramienta</button>



    </div>
</div>
</EditForm>
    </div>
</div>


@code {
    bool disable;
    MaquinasHerramienta? maquina = new();
    Respuesta<MaquinasHerramienta>? oRta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [Parameter] public int id { get; set; }
    List<string> estado = new() { "Alta", "Baja" };
    List<string> disposicion = new() { "Opcion 1", "Opcion 2" };

    InsumoDTO? insumo = new();
    string? descriptionValue;
    List<string>? DescripcionMantenimiento = new();

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        if (id != 0)
        {
            oRta = await http.GetFromJsonAsync<Respuesta<MaquinasHerramienta>>($"/api/maquinas/{id}");
            maquina = oRta.List;

            if (!string.IsNullOrEmpty(maquina.DescripcionMantenimiento))
            {
                DescripcionMantenimiento = JsonSerializer.Deserialize<List<string>>(maquina.DescripcionMantenimiento);
            }
            else
            {
                DescripcionMantenimiento = new List<string>();
            }
        }
    }

    async Task Guardar()
    {
        if(maquina.UltimoMant >= DateTime.Now )
        {
            await alertaError("La fecha de ultimo mantenimiento es futura");
        }
        else if (string.IsNullOrEmpty(maquina.Codigo) || string.IsNullOrEmpty(maquina.Nombre) || string.IsNullOrEmpty(maquina.Marca)
        || maquina.FechaIngreso == null)
        {
            await alertaError("Codigo, nombre, marca, fecha de ingreso y descripcion de mantenimiento son necesarios");

        }
        else
        {
            maquina.DescripcionMantenimiento = JsonSerializer.Serialize<List<string>>(DescripcionMantenimiento);
            disable = true;
            if (id == 0)
            {
                await http.PostAsJsonAsync<MaquinasHerramienta>("/api/maquinas", maquina);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
            }
            else
            {
                await http.PutAsJsonAsync<MaquinasHerramienta>("/api/maquinas", maquina);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
            }
            disable = false;
        }

    }

    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    public async Task deleteDescription(string descriptionValue)
    {
        DescripcionMantenimiento.Remove(descriptionValue);
    }
    public async Task addDescription()
    {
        if (!string.IsNullOrEmpty(descriptionValue))
        {
            DescripcionMantenimiento.Add(descriptionValue);
            descriptionValue = "";

            Console.WriteLine("Posta?", descriptionValue);
        }
    }


    public async Task alertaError(string texto)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"{texto}",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }
    public async Task alertaError2(string texto)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Formulario incompleto",
                Text = $"{texto}",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }









    public async Task ReasignarHerramienta()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "El insumo se visualizara en la seccion de herramientas ",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Mover",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            maquina.Categoria = "maquina";
            insumo.Categoria = "maquina";
            insumo.StockMin = 0;
            insumo.StockMax = 0;
            insumo.StockReal = maquina.Cantidad;
            insumo.Nombre = maquina.Nombre;
            insumo.Codigo = maquina.Codigo;
            insumo.Descripcion = maquina.Descripcion;
            insumo.Tipo = "Lote unico";
            insumo.Asignacion = maquina.Asignacion;
            insumo.PeriodicidadMantenimiento = maquina.PeriodicidadMantenimiento;
            insumo.Estado = maquina.Estado;
            insumo.MotivoEstado = maquina.MotivoEstado;
            insumo.Disposicion = maquina.Disposicion;
            insumo.MotivoDisposicion = maquina.MotivoDisposicion;
            insumo.UltimoMant = maquina.UltimoMant;
            insumo.DetalleMantenimiento = maquina.DetalleMantenimiento;
            insumo.Personal = maquina.Personal;
            insumo.DetalleCorrectivo = maquina.DetalleCorrectivo;
            insumo.MantenimientoPreventivo = maquina.MantenimientoPreventivo;
            insumo.Categoria = maquina.Categoria;
            insumo.Marca = maquina.Marca;
            insumo.FechaIngreso = maquina.FechaIngreso;
            await http.DeleteAsync($"/api/Maquinas/{id}");

            await http.PostAsJsonAsync<InsumoDTO>("/api/insumo", insumo);

            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }



    public async Task Reasignar()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReasignarMaquina.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large,
                DisableBackgroundCancel = true,
                HideCloseButton = false
            };

        var formModal = Modal.Show<ReasignarMaquina>("Reasignar", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await ModalInstance.CloseAsync(ModalResult.Cancel());
        }
    }
}
