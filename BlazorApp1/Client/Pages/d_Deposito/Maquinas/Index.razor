@page "/maquinas"


<style>
    .RadzenDataGrid {
        position: relative;
        z-index: 1; /* Mantenerlo bajo el menú de notificaciones */
    }
</style>
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack">
    <FeatherArrowLeft Color="Blue"></FeatherArrowLeft>
</button>
<br />
<br />
<h1>Maquinas</h1>
<p>Descripción Maquinas (*)</p>
<hr />
<br />
<AuthorizeView Roles="Deposito, USUARIOMAESTRO">
    <Authorized>
        <button class="btn btn-outline-success" @onclick="()=>addNew(0)">Agregar máquina</button>
    </Authorized>
</AuthorizeView>
<button style="outline:none; float: right; height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()">
    <FeatherFilter Color="Black"></FeatherFilter>
</button>
<br />

@if (oMaquinas != null || Mantenimientoss != null)
{
    <br />


    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Maquinas">
                <RadzenDataGrid AllowFiltering="allowFiltering"
                                AllowColumnResize="true"
                                AllowAlternatingRows="false"
                                FilterMode="FilterMode.Simple"
                                AllowSorting="true"
                                PageSize="50"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowPaging="true"
                                PagerHorizontalAlign="HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                @ref="grid3"
                                Data="@oInsumos"
                                TItem="InsumoDTO"
                                ColumnWidth="250px"
                                LogicalFilterOperator="LogicalFilterOperator.Or">

                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Filterable="false" Title="Codigo" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="100px" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Marca" Title="Marca" Width="100px" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="MantenimientoPreventivo" Title="Mantenimiento preventivo" Width="100px">
                            <Template Context="data">
                                @if (data.MantenimientoPreventivo != null && data.MantenimientoPreventivo.Value.Day == DateTime.Now.Day)
                                {
                                    <a>@data.MantenimientoPreventivo</a>
                                }
                                else
                                {
                                    <a>No realizado</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="FechaIngreso" Title="Fecha de ingreso" Width="100px">
                            <Template Context="data">
                                @if (data.FechaIngreso.HasValue)
                                {
                                    <a>@data.FechaIngreso.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <AuthorizeView Roles="Deposito, USUARIOMAESTRO">
                            <Authorized>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Editar" @onclick="() => addNew(data.Id)"><FeatherEdit Color="green" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Ver info" @onclick="() => gotoinfoNew(data.Id)"><FeatherInfo Color="blue" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Eliminar" @onclick="() => alertaDeleteNew(data.Id)"><FeatherTrash2 Color="red" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Authorized>
                        </AuthorizeView>

                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Mantenimiento" @onclick="() => AddMantenimientoNew(data.Id)"><FeatherTool Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            
            
            
           @*  <RadzenTabsItem Text="Maquinas temporal">
                <RadzenDataGrid AllowFiltering="allowFiltering"
                                AllowColumnResize="true"
                                AllowAlternatingRows="false"
                                FilterMode="FilterMode.Simple"
                                AllowSorting="true"
                                PageSize="50"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowPaging="true"
                                PagerHorizontalAlign="HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                @ref="grid"
                                Data="@oMaquinas"
                                TItem="MaquinasHerramienta"
                                ColumnWidth="250px"
                                LogicalFilterOperator="LogicalFilterOperator.Or">

                    <Columns>
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Codigo" Filterable="false" Title="Codigo" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Descripcion" Title="Descripción" Width="100px" />
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="Marca" Title="Marca" Width="100px" />
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="MantenimientoPreventivo" Title="Mantenimiento preventivo" Width="100px">
                            <Template Context="data">
                                @if (data.MantenimientoPreventivo != null && data.MantenimientoPreventivo.Value.Day == DateTime.Now.Day)
                                {
                                    <a>@data.MantenimientoPreventivo</a>
                                }
                                else
                                {
                                    <a>No realizado</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="FechaIngreso" Title="Fecha de ingreso" Width="100px">
                            <Template Context="data">
                                @if (data.FechaIngreso.HasValue)
                                {
                                    <a>@data.FechaIngreso.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <AuthorizeView Roles="Deposito, USUARIOMAESTRO">
                            <Authorized>
                                <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Editar" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                                 <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Ver info" @onclick="() => gotoinfo(data)"><FeatherInfo Color="blue" /></button>
                                    </Template>
                                </RadzenDataGridColumn> 
                                <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Authorized>
                        </AuthorizeView>

                       @*  <RadzenDataGridColumn TItem="MaquinasHerramienta" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Mantenimiento" @onclick="() => AddMantenimiento(data.Id)"><FeatherTool Color="blue" /></button>
                            </Template>
            </RadzenTabsItem> 
                </RadzenDataGrid>
                    </Columns>
                        </RadzenDataGridColumn> *@
            <RadzenTabsItem Text="Maquinas en baja">
                <RadzenDataGrid AllowFiltering="allowFiltering"
                                AllowColumnResize="true"
                                AllowAlternatingRows="false"
                                FilterMode="FilterMode.Simple"
                                AllowSorting="true"
                                PageSize="50"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowPaging="true"
                                PagerHorizontalAlign="HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                @ref="grid"
                                Data="@oInsumosBaja"
                                TItem="InsumoDTO"
                                ColumnWidth="250px"
                                LogicalFilterOperator="LogicalFilterOperator.Or">

                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Filterable="false" Title="Codigo" Width="50px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="100px" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Marca" Title="Marca" Width="100px" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="MantenimientoPreventivo" Title="Mantenimiento preventivo" Width="100px">
                            <Template Context="data">
                                @if (data.MantenimientoPreventivo != null && data.MantenimientoPreventivo.Value.Day == DateTime.Now.Day)
                                {
                                    <a>@data.MantenimientoPreventivo</a>
                                }
                                else
                                {
                                    <a>No realizado</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="FechaIngreso" Title="Fecha de ingreso" Width="100px">
                            <Template Context="data">
                                @if (data.FechaIngreso.HasValue)
                                {
                                    <a>@data.FechaIngreso.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>

                        <AuthorizeView Roles="Deposito, USUARIOMAESTRO">
                            <Authorized>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Editar" @onclick="() => addNew(data.Id)"><FeatherEdit Color="green" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Ver info" @onclick="() => gotoinfoNew(data.Id)"><FeatherInfo Color="blue" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                                    <Template Context="data">
                                        <button class="btn" title="Eliminar" @onclick="() => alertaDeleteNew(data.Id)"><FeatherTrash2 Color="red" /></button>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Authorized>
                        </AuthorizeView>

                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Mantenimiento" @onclick="() => AddMantenimientoNew(data.Id)"><FeatherTool Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
           

            <RadzenTabsItem Text="Mantenimientos">
                <RadzenDataGrid AllowFiltering="allowFiltering"
                                AllowColumnResize="true"
                                AllowAlternatingRows="false"
                                FilterMode="FilterMode.Simple"
                                AllowSorting="true"
                                PageSize="50"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowPaging="true"
                                PagerHorizontalAlign="HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                @ref="grid2"
                                Data="@Mantenimientoss"
                                TItem="Mantenimiento"
                                ColumnWidth="250px"
                                LogicalFilterOperator="LogicalFilterOperator.Or">

                    <Columns>
                        <RadzenDataGridColumn TItem="Mantenimiento" Property="Name" Filterable="false" Title="Nombre" Width="20%" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Mantenimiento" Property="Etapas" Filterable="false" Title="Pasos" Width="20%" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Mantenimiento" Property="Personal" Filterable="false" Title="Operario" Width="20%" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Mantenimiento" Property="Fecha" Filterable="false" Title="Fecha" Width="20%" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Mantenimiento" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => MantenimientoInfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    List<MaquinasHerramienta>? oMaquinas = new();
    List<Mantenimiento>? Mantenimientoss = new();
    List<InsumoDTO>? oInsumos = new();
    List<InsumoDTO>? oInsumosBaja = new();



    RadzenDataGrid<InsumoDTO>? grid;
    RadzenDataGrid<Mantenimiento>? grid2;
    RadzenDataGrid<InsumoDTO>? grid3;

    int currentPage;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }


    public async Task MantenimientoInfo(int? id)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(InfoMantenimiento.id), id);
        var options = new ModalOptions()
                {
                    Size = ModalSize.Medium

                };
        var formModal = Modal.Show<InfoMantenimiento>("Informacion del mantenimiento", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {

        }
    }



    async Task gotoinfo(MaquinasHerramienta maquina)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Está seguro?",
                    Text = "El insumo se visualizara en la seccion de herramientas ",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Mover",
                    CancelButtonText = "Cancelar"
                });
        InsumoDTO? insumo = new();
        if (!string.IsNullOrEmpty(result.Value))
        {
            maquina.Categoria = "Maquina";
            insumo.Categoria = "Maquina";
            insumo.StockMin = 0;
            insumo.StockMax = 0;
            insumo.StockReal = maquina.Cantidad ?? 0;
            insumo.Nombre = maquina.Nombre;
            insumo.Codigo = maquina.Codigo;
            insumo.Descripcion = maquina.Descripcion;
            insumo.Tipo = "Lote unico";
            insumo.Asignacion = maquina.Asignacion;
            insumo.PeriodicidadMantenimiento = maquina.PeriodicidadMantenimiento;
            insumo.Estado = maquina.Estado;
            insumo.MotivoEstado = maquina.MotivoEstado;
            insumo.Disposicion = maquina.Disposicion;
            insumo.MotivoDisposicion = maquina.MotivoDisposicion;
            insumo.UltimoMant = maquina.UltimoMant;
            insumo.DetalleMantenimiento = maquina.DetalleMantenimiento;
            insumo.Personal = maquina.Personal;
            insumo.DetalleCorrectivo = maquina.DetalleCorrectivo;
            insumo.MantenimientoPreventivo = maquina.MantenimientoPreventivo;
            insumo.Categoria = maquina.Categoria;
            insumo.Marca = maquina.Marca;
            insumo.FechaIngreso = maquina.FechaIngreso;
            await http.DeleteAsync($"/api/Maquinas/{maquina}");

            await http.PostAsJsonAsync<InsumoDTO>("/api/insumo", insumo);


        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }

    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<MaquinasHerramienta>>>("/api/Maquinas");
        oMaquinas = respuesta.List.Where(x => !x.Codigo.StartsWith("H-")).ToList();

        var respuesta2 = await http.GetFromJsonAsync<Respuesta<List<Mantenimiento>>>("/api/Mantenimiento");
        Mantenimientoss = respuesta2.List;

        var rta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oInsumos = rta.List.Where(x=>x.Categoria == "Maquina" && x.Estado != "Baja").ToList();


        oInsumosBaja = rta.List.Where(x => x.Estado == "Baja").ToList();

        StateHasChanged();
    }



    async Task gotoinfoNew(int id)
    {
        currentPage = grid.CurrentPage;
        nav.NavigateTo($"/infoInsumos/{id}");
        await grid.GoToPage(currentPage);
    }
    async void delete(int id)
    {
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/Maquinas/{id}");
        await Get();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task addNew(int id)
    {

       
        currentPage = grid3.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddMaquinaInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };
        var formModal = Modal.Show<AddMaquinaInsumo>("Agregar insumo tipo maquina", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await Get();
            if (currentPage > grid3.Count / grid3.PageSize - 1 && grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage - 1);
            }
            else if (grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage);
            }
        }
        else
        {
            await Get();
            if (currentPage > grid3.Count / grid3.PageSize - 1 && grid3.Count != 0)
            {
                await grid3.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid3.GoToPage(currentPage);
            }
        }
    }
   









    async void deleteNew(int id)
    {
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/insumo/{id}");
        await Get();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid3.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }
    public async Task alertaDeleteNew(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará esta maquina",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteNew(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }



    async Task AddMantenimiento(int id)
    {

        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Mantenimientos.id), id);

        var formModal = Modal.Show<Mantenimientos>("Generar mantenimiento preventivo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await Get();
        }
       

    }
       



    async Task add(int id)
    {

        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Marca").FirstOrDefault();
        var columNom = grid.ColumnsCollection.Where(c => c.Property == "FechaIngreso").FirstOrDefault();

        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        object? filtroAnteriorNom = columNom.GetFilterValue();


        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddMaquinas.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };
        var formModal = Modal.Show<AddMaquinas>("Agregar maquina o herramienta", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);

            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columNom.FilterValue = filtroAnteriorNom;

            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            columNom.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();
        }
    }

    async Task AddMantenimientoNew(int id)
    {

        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Mantenimientos.id), id);

        var formModal = Modal.Show<Mantenimientos>("Generar mantenimiento preventivo", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            await Get();
        }


    }
            
}
    

