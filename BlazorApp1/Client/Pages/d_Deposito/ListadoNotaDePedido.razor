@page "/listadonotas"



<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Notas de pedido</h1>
<p>Aqui puede visualizar, agregar y eliminar notas de pedido anteriores</p>
<hr />
<br />
<button class="btn btn-outline-success" @onclick="()=>gotonotadepedido()">Agregar Nota</button>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />

@if (oNotas != null && oNotas.Count()>0)
{
    <br />

 <RadzenDataGrid class="tablacontent" IsLoading="isLoading" LoadData="LoadData" style="position:relative;width:93.5%;left:3.33%"
                    AllowFiltering="allowFiltering" AllowColumnResize="true" AllowPaging="true" AllowAllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="15"
                    ShowPagingSummary="true" SelectionMode="DataGridSelectionMode.Single" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid" Count="cantidad"
                    Density="Density.Compact"  Data="@oNotas" TItem="PedidosPañol" ColumnWidth="3.33%" LogicalFilterOperator="LogicalFilterOperator.Or" PagerHorizontalAlign="HorizontalAlign.Center">
    <Columns>
            <RadzenDataGridColumn TItem="PedidosPañol" Property="Id" Title="Id" Width="10%" />
            <RadzenDataGridColumn TItem="PedidosPañol" Property="" Title="Operario" Width="20%">
                <Template Context="data">
                    @data.operarioNavigation.Nombres

                </Template>
                </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PedidosPañol" Property="" Title="Insumo" Width="20%">
                <Template Context="data">
                    @data.insumoNavigation.Descripcion
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PedidosPañol" Property="Fecha" Title="Fecha" Width="15%">
                <Template Context="data">
                    @if (data.Fecha.HasValue)
                    {
                        <a class="texto">@(data.Fecha.Value.ToString("dd/MM/yyyy"))</a>
                    }
                    else
                    {
                        <p>-</p>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PedidosPañol" Property="Cantidad" Title="Cantidad" Width="15%" />
            <RadzenDataGridColumn TItem="PedidosPañol" Property="" Title="" Filterable="false" Width="10%">
                <Template Context="data">
                    <button class="btn" title="Cancelar" @onclick="() => alertaDeleteMistake(data)"><FeatherAlertCircle Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PedidosPañol" Property="" Title="" Filterable="false" Width="10">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
    </Columns>
    </RadzenDataGrid>

    <br/>
    <br/>
    <br/>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    int currentPage;
    bool allowFiltering = false;
    RadzenDataGrid<PedidosPañol>? grid;
    List<PedidosPañol> oNotas = new();
    List<InsumoDTO> insumos = new();

    Boolean isLoading = false;
    int skip= 0;
    int take= 20;
    int cantidad;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        insumos = respuesta.List;


        var rta = await http.GetFromJsonAsync<Respuesta<List<PedidosPañol>>>($"api/PedidosPañol/LimitadosFiltrados?skip={skip}&take={take}");
        oNotas = rta.List.Where(x => x.Codigo == "nota de pedido").ToList();

        var rta2 = await http.GetFromJsonAsync<Respuesta<int>>($"api/PedidosPañol/cantidad");
        cantidad = rta2.List;






        StateHasChanged();
    }

    async Task gotonotadepedido()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddNotaDePedido>("Agregar nota de pedido", options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {
            await Get();
        }
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará esta nota, el insumo quedara como esta",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Get();
        }
    }
    async void delete(int id)
    {
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/PedidosPañol/{id}");
        await OnInitializedAsync();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }


    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        if (!string.IsNullOrEmpty(args.Filter))
        {
            var rta = await http.GetFromJsonAsync<Respuesta<List<PedidosPañol>>>($"api/PedidosPañol/LimitadosFiltrados?skip={args.Skip.Value}&take={args.Top.Value}&expression={args.Filter}");
            oNotas = rta.List;
        } 
        else
        {

            var rta = await http.GetFromJsonAsync<Respuesta<List<PedidosPañol>>>($"api/PedidosPañol/LimitadosFiltrados?skip={args.Skip.Value}&take={args.Top.Value}");
            oNotas = rta.List;
        }

        isLoading = false;
    }





    public async Task alertaDeleteMistake(PedidosPañol id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Si tipo de insumo es unico la cantidad se sumara",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteMistake(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Get();
        }
    }
    async void deleteMistake(PedidosPañol id)
    {

        var ins = insumos.Where(x=>x.Id == id.Insumo).FirstOrDefault();
        Console.WriteLine("Hoola", ins);

        if (ins.Tipo == "Lote unico")
        {

            ins.StockReal += id.Cantidad;
            await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", ins);

            Console.WriteLine("Hola", id.Cantidad);

            await http.DeleteAsync($"/api/PedidosPañol/{id.Id}");
            currentPage = grid.CurrentPage;
            await Get();
            if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
            {
                await grid.GoToPage(currentPage - 1);
            }
            else if (grid.Count != 0)
            {
                await grid.GoToPage(currentPage);
            }

        }
        else
        {



            await alertaSinCantidad();




        }

    }

    public async Task alertaSinCantidad()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "No se puede sumar el stock al insumo de lote multiple",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    
}
