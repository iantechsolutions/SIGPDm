@page "/insumos"


@using System.Reflection;
@using OfficeOpenXml.Table;
@using OfficeOpenXml.LoadFunctions.Params;





<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1 class="no-print">Insumos</h1>
<p class="no-print">Descripción insumos (*)</p>
<hr />
<button class="btn btn-outline-success no-print" @onclick="()=>add(0)">Agregar insumo</button>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => GenerateExcel()"><FeatherSave Color="Black"></FeatherSave></button>


<br />

@if (oRespuesta.List != null)
{
    <br />


    <RadzenDataGrid  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                Data="@oRespuesta.List" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or" >
         
        <Columns>
            
            <RadzenDataGridColumn TItem="InsumoDTO" Title="Foto" Filterable="false" Width="30px">
                <Template Context="data">
                    <RadzenImage Path="@data.Foto" class="rz-gravatar" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="200px"/>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Código" Width="60px" />
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="Cantidad" Width="50px">
                <Template Context="data">
                    @if (esDeLoteUnico(data))
                    {
                        @data.StockReal
                    }
                    else
                    {
                        @data.StockReal
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    @if (!esDeLoteUnico(data))
                    {
                        <button class="btn" title="Agregar lote" @onclick="() => addLote(data.Id)"><FeatherPlus Color="blue" /></button>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn no-print" title="Editar insumo" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
            
        </Columns>
          
    </RadzenDataGrid>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

<script>
    saveAsFile = (fileName, contentBase64) => {
        var link = document.createElement('a');
        link.download = fileName;
        link.href = contentBase64;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<InsumoDTO>> oRespuesta = new();
    IEnumerable<InsumoDTO> insumo;
    bool allowFiltering = false;
    RadzenDataGrid<InsumoDTO>? grid;
    int currentPage;
    Radzen.DataGridColumnFilterEventArgs<InsumoDTO>? args;

    object? Filter;


    protected override async Task OnInitializedAsync()
    {

        await Get();




    }


    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotes = JsonSerializer.Deserialize<List<Lotes>>(insumo.Lotes);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
        }
        return total;
    }
    bool esDeLoteUnico(InsumoDTO insumo)
    {
        if (insumo.Lotes == null) return false;
        var lotes = JsonSerializer.Deserialize<List<Lotes>>(insumo.Lotes);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote unico") return true;
        }
        return false;
    }
    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/infoinsumo/{id}");
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }
    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        oRespuesta = respuesta;
        StateHasChanged();
        //await grid.Reload();

    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async void delete(int id)
    {
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/Insumo/{id}");
        await Get();
        if (currentPage >= (grid.Count / grid.PageSize) - 1 && grid.Count != 0 && filtroAnteriorDes == null)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0 && filtroAnteriorDes == null)
        {
            await grid.GoToPage(currentPage);
        }
        else
        {
            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();
        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este insumo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task add(int id)
    {
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        currentPage = grid.CurrentPage;
        //
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddInsumo>("Editar insumo", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {

            await Get();
            await grid.GoToPage(currentPage);

            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();



        }
    }

    async Task addLote(int id)
    {
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddLote>("Agregar lote", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);

            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();


        }
    }




    private async Task GenerateExcel()
    {
        var elements = oRespuesta.List;
        Console.WriteLine("llega");
        Stream stream = new MemoryStream();
        using (var excelPackage = new OfficeOpenXml.ExcelPackage())
        {
            var t = typeof(InsumoDTO);
            var worksheet = excelPackage.Workbook.Worksheets.Add("Elements");
            worksheet.Cells["A1"].LoadFromCollection(elements, true, TableStyles.None, LoadFromCollectionParams.DefaultBindingFlags,
            new MemberInfo[]
            {
                t.GetProperty("Codigo"),   
                t.GetProperty("Descripcion"),
                t.GetProperty("StockMin"),
                t.GetProperty("StockMax"),
                t.GetProperty("StockReal")
            });
            worksheet.Cells["A:E"].AutoFitColumns();
            excelPackage.SaveAs(stream);
            var fileContents = excelPackage.GetAsByteArray();
            DateTime fechaHoy = DateTime.Now;
            var fileName = $"ReporteInsumos_{fechaHoy.ToString("dd_MM")}.xlsx";
            var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            string url = $"data:{contentType};base64,{Convert.ToBase64String(fileContents)}";

            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, url);
        }
    }
   
    private class Excel
    {
        public string? Codigo { get; set; }
        public string? Nombre { get; set; }
        public string? Descripcion { get; set; }
        public int? StockMin{ get; set; }
        public int? StockMax{ get; set; }
        public int? StockReal{ get; set; }

    }

}
