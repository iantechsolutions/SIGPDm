@using Blazored.Typeahead;﻿


<div class="card">
    <div class="card-body">

        <EditForm Model="@oInsumo" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary ShowValidationErrors="false" />
            <div class="row">
                <div class="col-sm-4">
                    <label>Descripción</label>
                    <InputText class="form-control" @bind-Value="@oInsumo.Descripcion" placeholder="Descripción"></InputText>
                    <ValidationMessage For="(()=> oInsumo.Descripcion)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label class="col-sm">Código</label>
                    <InputText @bind-Value="@oInsumo.Codigo" class="form-control" placeholder="Código"></InputText>
                    <ValidationMessage For="(()=> oInsumo.Codigo)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label class="col-sm">Foto</label>
                    <InputFile OnChange="@OnInputFileChange" unique/>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-sm-4">
                    <label>Stock minimo</label>
                    <InputNumber class="form-control" @bind-Value="@oInsumo.StockMin" placeholder="Stock minimo"></InputNumber>
                    <ValidationMessage For="(()=> oInsumo.StockMin)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Stock real</label>
                    <InputNumber disabled="@(tipoLote == "Lote Multiple")" class="form-control" @bind-Value="@oInsumo.StockReal" placeholder="Stock real"></InputNumber>
                    <ValidationMessage For="(()=> oInsumo.StockReal)" style="color:red;" />
                </div>
                <div class="col-sm-4">
                    <label>Stock maximo</label>
                    <InputNumber class="form-control" @bind-Value="@oInsumo.StockMax" placeholder="Stock maximo"></InputNumber>
                    <ValidationMessage For="(()=> oInsumo.StockMax)" style="color:red;" />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-sm-4">
                    <label>Tipo de lotes</label>
                    <RadzenDropDown class="form-control" TValue="string" Data=@(tiposList) placeholder="Tipo" @bind-Value="@tipoLote" />
                </div>
                <div class="col-sm">
                    <label>Proveedores posibles</label>
                    <BlazoredTypeahead SearchMethod="BuscarProveedor"
                    @bind-Values="proveedoresSeleccionados"
                                       EnableDropDown="true"
                                       placeholder="Busque por Nombre">
                        <SelectedTemplate Context="prov">
                            @prov.RazonSocial
                        </SelectedTemplate>
                        <NotFoundTemplate Context="searchText">
                            No se encuentra "@searchText" 
                        </NotFoundTemplate>
                        <ResultTemplate Context="prov">
                            @prov.RazonSocial
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
            </div>
            <br />
            <div class="row">

                @if (oListaLotes.Count != 0)
                {
                    @if (!(oInsumo.Tipo == "Lote unico"))
                    {
                        <div class="col-sm-12">
                            <a>Lotes</a>
                            <RadzenTabs RenderMode="TabRenderMode.Client">
                                <Tabs>
                                    <RadzenTabsItem Text="Nuevos">

                                        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="false" AllowAlternatingRows="false" AllowSorting="true" PageSize="4" @ref="grid"
                                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="false"
                                                        Density="Density.Compact" Data="@oListaLotesNuevos" TItem="Lote" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="Lote" Property="Id" Title="Numero" Width="30px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="FechaIngreso" Title="Fecha ingreso" Width="30px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="Cantidad" Title="Cantidad" Width="20px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="NroRemito" Title="Nro Remito" Width="20px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="Proveedor" Title="Proveedor" Width="20px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="" Title="" Filterable="false" Width="40px">
                                                    <Template Context="data">

                                                        <button type="button" class="btn" title="Info" @onclick="() => Infor(data.Id)"><FeatherInfo Size="18" Color="blue" /> </button>

                                                        <button type="button" class="btn" title="Editar" @onclick="() => editar(data.Id)"><FeatherEdit Size="18" Color="blue" /> </button>

                                                        <button type="button" class="btn" title="Borrar lote" @onclick="() => alertaDelete(data)"><FeatherTrash2 Size="18" Color="red" /></button>



                                                    </Template>
                                                </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenDataGrid>

                                    </RadzenTabsItem>
                                    <RadzenTabsItem Text="Recorte">

                                        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="false" AllowAlternatingRows="false" AllowSorting="true" PageSize="4" @ref="grid"
                                                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="false"
                                                        Data="@oListaLotesRecorte" TItem="Lote" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                                            <Columns>
                                                <RadzenDataGridColumn TItem="Lote" Property="FechaIngreso" Title="ingreso" Width="30px" />

                                                <RadzenDataGridColumn TItem="Lote" Property="Alto" Title="Alto" Width="20px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="Ancho" Title="Ancho" Width="20px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="Proveedor" Title="Proveedor" Width="20px" />
                                                <RadzenDataGridColumn TItem="Lote" Property="" Title="" Filterable="false" Width="40px">
                                                    <Template Context="data">
                                                        <button type="button" class="btn" title="Info" @onclick="() => Infor(data.Id)"><FeatherInfo Color="blue" /> </button>

                                                        <button type="button" class="btn" title="Editar" @onclick="() => editar(data.Id)"><FeatherEdit Color="blue" /> </button>

                                                        <button type="button" class="btn" title="Borrar lote" @onclick="() => alertaDelete(data)"><FeatherTrash2 Color="red" /></button>

                                                    </Template>
                                                </RadzenDataGridColumn>
                                            </Columns>
                                        </RadzenDataGrid>

                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>


                        </div>
                    }
                }
            </div>

            <br />
            <button type="submit" class="btn btn-primary mr-2 no-print">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light no-print">Cancelar</button>







        </EditForm>
    </div>
</div>


@code {

    //<button type="button" class="btn" title="Tag" @onclick="() => AlertaTag()"> <FeatherTag Color="blue" />
    InsumoDTO oInsumo = new();
    List<Lote> oListaLotesNuevos = new();
    List<Lote> oListaLotesRecorte = new();
    List<Lote> oListaLotes = new();
    List<Lote> oListaLotesDeleteados = new();
    Respuesta<InsumoDTO> oRta = new();
    IList<ProveedoreDTO> proveedoresSeleccionados;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    string? tipoLote;
    List<string> tiposList = new() { "Lote unico", "Lote Multiple" };
    RadzenDataGrid<Lote>? grid;
    List<Lote> lotes = new();
    List<ProveedoreDTO> proveedores = new();
    //upload files
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool shouldRender;
    MultipartFormDataContent content = new MultipartFormDataContent();


    protected override async Task OnInitializedAsync()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>("/api/Proveedore");
        proveedores = respuesta.List;
        if (id != 0)
        {

            oRta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{id}");
            oInsumo = oRta.List;

            var oRtaLotes = await http.GetFromJsonAsync<Respuesta<List<Lote>>>($"/api/Lotes");

            var lotes = oRtaLotes.List.Where(x => x.IdInsumo == oInsumo.Id);

            oListaLotesNuevos = lotes.Where(x => x.Tipo == "Lote nuevo").OrderByDescending(x => x.FechaIngreso).ToList();
            oListaLotesRecorte = lotes.Where(x => x.Tipo == "Lote de recorte").OrderByDescending(x => x.FechaIngreso).ToList();
            oListaLotes = lotes.ToList();
            try{
                proveedoresSeleccionados = JsonSerializer.Deserialize<List<ProveedoreDTO>>(oInsumo.ProveedoresPosibles);
            }
            catch
            {

            }
            tipoLote = oInsumo.Tipo;
            // (tipoLote == "Lote Multiple") oInsumo.StockReal = calcularCantidad(oInsumo);
        }
    }

    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotesCant = oListaLotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote in lotesCant)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
        }


        return total;
    }

    async Task Guardar()
    {
        if (string.IsNullOrEmpty(oInsumo.Descripcion))
        {
            await alertaError("una descripción");

        }
        else if (string.IsNullOrEmpty(oInsumo.Codigo))
        {
            await alertaError("un código ");
        }
        else if (string.IsNullOrEmpty(oInsumo.StockMax.ToString()))
        {
            await alertaError("un stock máximo");
        }
        else if (string.IsNullOrEmpty(oInsumo.StockMin.ToString()))
        {
            await alertaError("un stock mínimo");
        }
        else if (string.IsNullOrEmpty(tipoLote))
        {
            await alertaError("un tipo de lote");
        }
        else
        {
            try
            {
                oInsumo.ProveedoresPosibles = JsonSerializer.Serialize<List<ProveedoreDTO>>(proveedoresSeleccionados.ToList());
            }
            catch
            {
                Console.WriteLine("Proveedores no agregados");
            }
            try{
                Upload();
                oInsumo.Foto = $"/imagenes/insumos/{oInsumo.Codigo}.png";


                if (id == 0)
                {
                    oInsumo.Tipo = tipoLote;
                    if (tipoLote == "Lote Multiple") //NICO: Se me estaba rompiendo por no tener algo que metiera una lista vacia cuando se agregaba un insumo
                    {
                        oInsumo.Lotes = "[]"; 
                        oInsumo.StockReal = 0;
                    }
                    await http.PostAsJsonAsync<InsumoDTO>("/api/Insumo", oInsumo);
                    await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
                }
                else
                {
                    oInsumo.Tipo = tipoLote;
                    await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", oInsumo);
                    await ModalInstance.CloseAsync(ModalResult.Ok());
                }
            }
            catch(Exception ex){
                Console.WriteLine(ex.Message);
            }
        }
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }

    async Task cancel()
    {
        foreach (Lote lote in oListaLotesDeleteados)
        {
            await http.PostAsJsonAsync<Lote>($"/api/lotes/{id}", lote);
        }



        await ModalInstance.CloseAsync(ModalResult.Cancel());


    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = $"{oInsumo.Codigo}.png" });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: $"{oInsumo.Codigo}.png");
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }


        shouldRender = true;
    }

    public async Task Upload()
    {
        var client = ClientFactory.CreateClient();
        var response =
            await client.PostAsync($"{nav.BaseUri}api/images",
            content);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

            using var responseStream =
                await response.Content.ReadAsStreamAsync();

            var newUploadResults = await JsonSerializer
                .DeserializeAsync<IList<UploadResult>>(responseStream, options);

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }
    }

    async Task Get()
    {
        if (id != 0)
        {
            oRta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{id}");
            oInsumo = oRta.List;
            var oRtaLotes = await http.GetFromJsonAsync<Respuesta<List<Lote>>>($"/api/Lotes/{id}");
            oListaLotesNuevos = oRtaLotes.List.Where(x => x.Tipo == "Lote nuevo").ToList();
            oListaLotesRecorte = oRtaLotes.List.Where(x => x.Tipo == "Lote de recorte").ToList();
            oListaLotes = oRtaLotes.List;
        }
    }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    async Task Infor(int? num)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(InfoLotes.num), num);
        parameters.Add(nameof(InfoLotes.id), oInsumo.Id);



        nav.NavigateTo($"/infoLotes/{oInsumo.Id}/{num}");



    }






    async Task editar(int? id)
    {

        var parameters = new ModalParameters();


        parameters.Add(nameof(AddLote.idLote), id);
        parameters.Add(nameof(AddLote.id), oInsumo.Id);


        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddLote>("Editar Lote", parameters, options);
        var result = await formModal.Result;

        if (result.Confirmed)
        {
            await OnInitializedAsync();
        }
    }



    public async Task alertaDelete(Lote lote)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará el lote seleccionado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deleteLote(lote);

            if (result.IsConfirmed)
            {
                await OnInitializedAsync();
                await grid.Reload();
            }
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task deleteLote(Lote lote)
    {
        oListaLotesDeleteados.Add(lote);
        await http.DeleteAsync($"/api/lotes/{lote.Id}");
        oListaLotes.RemoveAll(x => x == lote);
        oListaLotesNuevos.RemoveAll(x => x == lote);
        oListaLotesRecorte.RemoveAll(x => x == lote);
       
        var oRtaLotes = await http.GetFromJsonAsync<Respuesta<List<Lote>>>($"/api/Lotes/idinsumo/{id}");
       
        if (oRtaLotes.List.Where(x => x.Tipo == "Lote nuevo").Count()>0){
            oListaLotesNuevos = oRtaLotes.List.Where(x => x.Tipo == "Lote nuevo").ToList();
        }
        if(oRtaLotes.List.Where(x => x.Tipo == "Lote de recorte").Count()>0){
            oListaLotesRecorte = oRtaLotes.List.Where(x => x.Tipo == "Lote de recorte").ToList();
        }
        oListaLotes = oRtaLotes.List;
        if (tipoLote == "Lote Multiple") oInsumo.StockReal = calcularCantidad(oInsumo);
        await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", oInsumo);
        StateHasChanged();
        grid.Reload();
        
        
    }
    private async Task<IEnumerable<ProveedoreDTO>> BuscarProveedor(string searchText)
    {
        return await Task.FromResult(proveedores.Where(x => x.RazonSocial.ToLower().Contains(searchText.ToLower())).ToList());
    }


    private class File
    {
        public string? Name { get; set; }
    }
    // if(cantidad == null)
    // {
    // cantidad = 0;
    // }
    // if( remito == null)
    // {
    // remito = 0;
    // }
    // 
    // fecha == null )
    // {
    // fecha = DateTime.Now;
    // }
    //     if (num == null)
    // {
    // num = 0;
    // }
    // if (fecha != null)
    // {
    // nav.NavigateTo($"/infoLotes/{remito}/{num}/{cantidad}/{fecha.Value.Ticks}");
    // }
    // else
    // {
    // nav.NavigateTo($"/infoLotes/{remito}/{num}/{cantidad}/");
    // }
   
}