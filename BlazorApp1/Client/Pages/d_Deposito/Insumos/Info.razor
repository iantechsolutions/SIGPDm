
@page "/infoinsumo/{id:int}"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
            <button class="btn btn-outline-success no-print" title="Crear presupuesto" style="float: right;" @onclick="()=>AddPresupuesto()">Crear presupuesto</button>
<button class="btn btn-outline-success no-print" title="Crear presupuesto" style="float: right;" @onclick="()=>changePrice()">Cambiar ultimo precio</button>

            <button style="outline:none; float: right;" class="no-print btn btn-outline" @onclick="() => print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
<br />
<br />
<br />
<hr />


@if (oInsumo != null)
{
    <br />

            <RadzenCard Class="m-3">
    <div class="row">
        <div class="col-md-6">
                <div class="p-3">
                    <div class="col">
                        <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-black">
                            <strong>Insumo @oInsumo.Codigo</strong>
                        </RadzenText>
                        @* <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Nombre</b></RadzenText> *@

                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Descripcion: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(oInsumo.Descripcion ?? "")</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Stock real: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(oInsumo.StockReal ?? 0)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Stock máximo: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(oInsumo.StockMax ?? 0)</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Stock minimo: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(oInsumo.StockMin ?? 0)</b></RadzenText>
                    </div>
                </div>
        </div>
        <div class="col-md-6">
                <div class="p-3">
                    <div class="col">
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Fecha ultimo precio: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(fecha ?? "Fecha no disponible")</b></RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Ultimo precio del insumo: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>$ @(precio ?? "Precio no disponible") </b></RadzenText>
                        @* <button type="button" @onclick='(()=>changePrice())' .class="btn btn-primary mr-2">Aceptar</button> *@
                        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Cantidad en prestamo: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1"><b>@(StockCantidad ?? 0)</b></RadzenText>
                    </div>
                </div>
        </div>
    </div>
            </RadzenCard>

    @if (oLotes != null && oLotes.Count() > 0)
    {


        <RadzenCard class="rz-shadow-0 rz-border-radius-0 ">

            <RadzenTabs RenderMode="TabRenderMode.Client">
                <Tabs>
                    <RadzenTabsItem Text="Nuevos">
                        <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                        <br />

                        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                        AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridNuevos"
                                        Data="@oLotesNuevo" TItem="Lote" Style="max-height:50vh;max-width:100%; font-size:small;" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn TItem="Lote" Property="Id" Title="N° Lote" Width="15%">
                                    <Template Context="data">
                                        @($"LN{data.Id}")
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Lote" Property="Cantidad" Title="Cantidad" Width="5%" />
                                <RadzenDataGridColumn TItem="Lote" Property="FechaIngreso" Title="Fecha de Ingreso" Width="20%" />
                                <RadzenDataGridColumn TItem="Lote" Property="NroRemito" Title="N° Remito" Width="10%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Alto" Title="Alto" Width="7%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Ancho" Title="Ancho" Width="7%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Proveedor" Title="Proveedor" Width="15%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Estado" Title="Estado" Width="15%" />
                                <RadzenDataGridColumn TItem="Lote" Property="" Title="" Filterable="false" Width="10%">
                                    <Template Context="data">
                                        <button type="button" class="btn" title="Info" @onclick="() => Infor(data.Id, data.IdInsumo)"><FeatherInfo Color="blue" /> </button>
                                    </Template>
                                </RadzenDataGridColumn>
                                @* <RadzenDataGridColumn TItem="Lote" Property="" Title="" Filterable="false" Width="10%">
                                    <Template Context="data">
                                        <button class="btn" title="Editar insumo" @onclick="() => addDataLote(data.Id)"><FeatherEdit Color="green" /></button>
                                    </Template>
                                </RadzenDataGridColumn> *@
                                <br />
                                <br />
                            </Columns>
                        </RadzenDataGrid>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Recorte">
                        <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                        <br />

                        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                        AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridRecorte"
                                        Data="@oLotesRecorte" TItem="Lote" Style="max-height:50vh;max-width:100%; font-size:small;" LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn TItem="Lote" Property="Id" Title="N° Lote" Width="10%">
                                    <Template Context="data">
                                        @($"LR{data.Id}")
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Lote" Property="Cantidad" Title="Cantidad" Width="15%" />
                                <RadzenDataGridColumn TItem="Lote" Property="FechaIngreso" Title="Fecha de Ingreso" Width="20%" />
                                <RadzenDataGridColumn TItem="Lote" Property="NroRemito" Title="N° Remito" Width="10%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Alto" Title="Alto" Width="10%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Ancho" Title="Ancho" Width="10%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Proveedor" Title="Proveedor" Width="15%" />
                                <RadzenDataGridColumn TItem="Lote" Property="Estado" Title="Estado" Width="10%" />
                                <RadzenDataGridColumn TItem="Lote" Property="" Title="" Filterable="false" Width="10%">
                                    <Template Context="data">
                                        <button type="button" class="btn" title="Info" @onclick="() => Infor(data.Id, data.IdInsumo)"><FeatherInfo Color="blue" /> </button>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Lote" Property="" Title="" Filterable="false" Width="10%">
                                    <Template Context="data">
                                        <button class="btn" title="Editar insumo" @onclick="() => addDataLote(data.Id)"><FeatherEdit Color="green" /></button>
                                        
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                        <br />
                        <br />
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>


        </RadzenCard>
    }
    else
    {
        <a>No dispone lotes.</a>
    }








    @if (itemLista != null && itemLista.Count() > 0)
    {


        <RadzenCard class="rz-shadow-0 rz-border-radius-0 ">

                    <RadzenText>Recepcion de materiales</RadzenText>
                        <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                        <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@itemLista" TItem="ItemPresupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Id" Title="Id" Width="10%" />
                       @*  <RadzenDataGridColumn TItem="ItemPresupuesto" Property="" Title="Insumo" Filterable="false" Width="20%">
                            <Template Context="data">
                                <p>@oInsumo.Where(x => x.Id == data.Insumo).First().Descripcion</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ItemPresupuesto" Property="" Title="Proveedor" Width="20%">
                            <Template Context="data">
                                <p>@proveedores.Where(x => x.Id == data.Proveedor).First().RazonSocial</p>
                            </Template>
                        </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="10%" />
                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Estado" Title="Estado" Width="10%" />

                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio unitario" Width="10%">
                            <Template Context="data">
                            <a>@($"{data.PrecioUnitario} $")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Comentario" Title="Especificación" Width="10%" />
                    </Columns>
                </RadzenDataGrid>
                  

        </RadzenCard>
    }
    else
    {
        <a>No dispone recepciones.</a>
    }



}
else
{
    <br />
    <br />
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}





@code {

    InsumoDTO oInsumo = new();
    Presupuesto presupuesto = new();

    Respuesta<InsumoDTO> oRta = new();



    List<Lote> oLotes = new();
    List<Lote> oLotesRecorte = new();
    List<Lote> oLotesNuevo = new();

    string? fecha = null;

    RadzenDataGrid<Lote>? gridNuevos;
    RadzenDataGrid<Lote>? gridRecorte;

    string? ultimoPrecio = "";

    RadzenDataGrid<ItemPresupuesto>? grid;
    ItemPresupuesto? item;
    List<ItemPresupuesto> itemLista = new();
    bool allowFiltering = false;


    [Parameter] public int? id { get; set; }

    int? StockCantidad;
    string? precio = "0";

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }
    public async Task Get()
    {
        oRta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/insumo/{id}");
        oInsumo = oRta.List;



        var rta2 = await http.GetFromJsonAsync<Respuesta<List<ItemPresupuesto>>>($"/api/ItemPresupuesto/insumo/{id}");
        itemLista = rta2.List;
        itemLista.Reverse();

        try
        {
            item = itemLista.FirstOrDefault();
            decimal precioDecimal = decimal.Parse(item.PrecioUnitario);
            precioDecimal = Math.Round(precioDecimal, 2);

            precio = precioDecimal.ToString("F2");
        }
        catch
        {
            precio = "0";
        }



        try
        {
            var rta3 = await http.GetFromJsonAsync<Respuesta<Presupuesto>>($"/api/presupuesto/{item.Presupuesto}");

            var fe = rta3.List.Aprobada;
            fecha = fe.Value.ToString("dd/MM/yyyy"); 
        }
        catch
        {
            fecha = null;
        }






        var rta = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/lotes");
        oLotes = rta.List.Where(x => x.IdInsumo == oInsumo.Id).ToList();


        oLotesNuevo = oLotes.Where(x => x.Tipo == "Lote nuevo").OrderByDescending(x => x.FechaIngreso).ToList();

        oLotesRecorte = oLotes.Where(x => x.Tipo == "Lote de recorte").OrderByDescending(x => x.FechaIngreso).ToList();


        var oPrestamo = await http.GetFromJsonAsync<Respuesta<List<PrestamoDTO>>>("/api/prestamo");

        StockCantidad = oPrestamo.List.Where(x => x.Insumo == id && x.FechaInicio >= DateTime.Now && x.FechaFin > DateTime.Now && x.FechaFinReal == null).Sum(x => x.Cantidad);

        StateHasChanged();
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/insumos");
    }

    async Task Infor(int? num, int? id)
    {
        var parameters = new ModalParameters();

        parameters.Add(nameof(Lote.Id), id);
        parameters.Add(nameof(Lote.IdInsumo), num);



        nav.NavigateTo($"/infoLotes/{id}/{num}");

    }
    async Task AddPresupuesto()
    {

        nav.NavigateTo($"/infoinsumo/PresupuestosDisponibles/{id}");

    }

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    async Task print()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EtiquetaInsumo.Id), id);



        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<EtiquetaInsumo>("", parameters, options);
        var result = await formModal.Result;

    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task add(int? id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddLote>("Editar Lote", parameters, options);
        var result = await formModal.Result;

        if (result.Confirmed)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {
            await Get();
        }
    }

    async Task addDataLote(int idLote)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddLote.id), id);
        parameters.Add(nameof(AddLote.idLote), idLote);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddLote>("Editar lote", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {

            await Get();

        }
    }

    public async Task changePrice()
    {
        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(ChangePrice.id), id);

        var formModal = Modal.Show<ChangePrice>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else if (result.Data != null)
        {
            StateHasChanged();
            await Get();
        }
    }

}
