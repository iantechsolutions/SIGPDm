@inject IJSRuntime _js
@using System.Drawing
@using QRCoder
@using System.Drawing.Imaging;


<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        .head {
            display: none !important;
        }

        .header {
            display: none !important;
        }

        .bm-header {
            display: none !important;
        }

        .page {
            display: none !important;
        }
    }



    .impresion {
        height: 230px;
        width: 100%;
    }


    .card-img-left {
        float: left;
        height: 70%;
        width: 80%;
    }


    .clearfix {
        clear: both;
    }


    .cabeza {
        font-size: 15px;
        float: left;
        width: 60%;
    }

    .izq {
        font-size: 15px;
        float: left;
        width: 60%;
        height: 100%
    }

    .col {
        width: 50%;
        height: 100%
    }
</style>









<div class="impresion row" id="DivIdToPrint" style="margin-bottom: 20px;">


    <div class="izq col">

        <img src="/Images/logo1.png" class="card-img-left" alt="...">
        <div class="clearfix"></div>




        @foreach (var lote in LoteChoose)
        {
            if (lote.Numero != null)
            {
                <a>NÚMERO DE LOTE: @lote.Numero</a>
            }
            else
            {
                <a>NÚMERO DE LOTE: No encontrado</a>
            }

        }


        <div class="clearfix"></div>


        @foreach (var lote in LoteChoose)
        {
            if (lote.FechaIngreso != null)
            {
                <a>FECHA INGRESO: </a>
                <br />
                <a>@lote.FechaIngreso</a>
            }
            else
            {
                <a>FECHA INGRESO: No encontrado</a>
            }

        }

        <div class="clearfix"></div>




        @foreach (var lote in LoteChoose)
        {
            if (lote.Cantidad != null)
            {
                <a> CANTIDAD: @lote.Cantidad</a>
            }
            else
            {
                <a> CANTIDAD: No encontrado</a>
            }

        }

        <div class="clearfix"></div>
        <br />






    </div>




    <section class="col" style=" float: right;  margin-top: 10px">

        <button style="outline:none; float: right;height:100%; margin-top: 0px;" class="no-print btn btn-outline" @onclick="() =>
       Print()">
            <FeatherPrinter Color="Black"></FeatherPrinter>
        </button>
        @if (imageQR is not null)
        {
            <img src="@imageQR" style="height: 60%; width: 60%; " alt="...">
        }





        <br />

        <h1 style="font-size: 25px; font-weight: 3px; margin-left: 20px; "> APROBADO</h1>

        <div class="clearfix"></div>

        <br />


        <label style="font-size: 15px; margin-left: 20px;"> FIRMA __________________</label>

    </section>



</div>


@code {




    InsumoDTO oInsumo = null;



    Respuesta<InsumoDTO> oRta = new();
    [Parameter] public int? Id { get; set; }

    string imageQR = null;


    List<Lotes> oLotes = null;

    [Parameter] public int? num { get; set; }

    List<Lotes> LoteChoose = null;

    protected override async Task OnInitializedAsync()
    {

        oRta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/insumo/{Id}");
        oInsumo = oRta.List;



        oLotes = JsonSerializer.Deserialize<List<Lotes>>(oInsumo.Lotes);

        LoteChoose = oLotes.Where(x => x.Numero == num).ToList();



        QRCodeGenerator qrCodeGenerate = new();


        QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode($"http://localhost:5000/infoLotes/{Id}/{num}", QRCodeGenerator.ECCLevel.Q);





        PngByteQRCode qrCode = new(qrCodeData);



        byte[] qrByte = qrCode.GetGraphic(20);



        string base64 = Convert.ToBase64String(qrByte);
        imageQR = string.Format("data:image/png;base64,{0}", base64);





    }


    private async Task Print()
         => await _js.InvokeVoidAsync("window.print");






}