@inject IJSRuntime _js
@using System.Drawing
@using QRCoder
@using System.Drawing.Imaging;


<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        .head {
            display: none !important;
        }

        .header {
            display: none !important;
        }

        .bm-header {
            display: none !important;
        }

        .page {
            display: none !important;
        }
    }



    .impresion {
        height: 30%;
        width: 100%;
    }

    .izq {

     
        
    }

    .der {
        
        
      
    }
   


    .clearfix {
        clear: both;
    }

    
</style>





<button style="outline:none; float: right;height:100%; margin-top: 0px;" class="no-print btn btn-outline" @onclick="() =>
       Print()">
    <FeatherPrinter Color="Black"></FeatherPrinter>
</button>



<div class="impresion row" id="DivIdToPrint" style="margin-bottom: 20px;">


    <div class="col">

        <img src="/Images/logo1.png" style=" float: left;height: 70%; width: 100%;" alt="...">
        <div class="clearfix"></div>

        <br />


        @foreach (var lote in LoteChoose)
        {
            if (lote.Numero != null)
            {
                <a>NÚMERO DE LOTE: @lote.Numero</a>
            }
            else
            {
                <a>NÚMERO DE LOTE: No encontrado</a>
            }

        }


        <br />
        <br />

        @foreach (var lote in LoteChoose)
        {
            if (lote.FechaIngreso != null)
            {
                <a>FECHA INGRESO: @lote.FechaIngreso </a>
                
                
            }
            else
            {
                <a>FECHA INGRESO: No encontrado</a>
            }

        }

      
        <br />
        <br />


        @foreach (var lote in LoteChoose)
        {
            if (lote.Cantidad != null)
            {
                <a> UNIDADES: @lote.Cantidad</a>
            }
            else
            {
                <a> UNIDADES: No encontrado</a>
            }

        }

       
        






    </div>


   
    <div class="col" style="text-align: right; float: right;">

        
        @if (imageQR is not null)
        {
            <img src="@imageQR" style="height: 70%; width: 70%; margin-top: 20px; margin-left: 30%; " alt="...">
        }

        <h1 style="font-size: 30px; font-weight: 5px; margin-right: 15%; "><strong>APROBADO</strong> </h1>

       

        <br />
        <br />

        <label style="font-size: 20px; margin-left: 20px;"> FIRMA _______________________________</label>

    </div>



</div>


@code {




    InsumoDTO oInsumo = null;



    Respuesta<InsumoDTO> oRta = new();
    [Parameter] public int? Id { get; set; }

    string imageQR = null;


    List<Lote> oLotes = null;

    [Parameter] public int? num { get; set; }

    List<Lote> LoteChoose = null;

    protected override async Task OnInitializedAsync()
    {

        oRta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/insumo/{Id}");
        oInsumo = oRta.List;


        var rta = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lote");
        oLotes = rta.List.Where(x=>x.IdInsumo==oInsumo.Id).ToList();

        LoteChoose = oLotes.Where(x => x.Numero == num).ToList();



        QRCodeGenerator qrCodeGenerate = new();


        QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode($"http://localhost:5000/infoLotes/{Id}/{num}", QRCodeGenerator.ECCLevel.Q);





        PngByteQRCode qrCode = new(qrCodeData);



        byte[] qrByte = qrCode.GetGraphic(20);



        string base64 = Convert.ToBase64String(qrByte);
        imageQR = string.Format("data:image/png;base64,{0}", base64);





    }


    private async Task Print()
         => await _js.InvokeVoidAsync("window.print");





   
}
