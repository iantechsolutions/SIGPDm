@inject IJSRuntime _js
@using System.Drawing
@using QRCoder
@using System.Drawing.Imaging;


<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        .head {
            display: none !important;
        }

        .header {
            display: none !important;
        }

        .bm-header {
            display: none !important;
        }

        .page {
            display: none !important;
            margin: 0;
        }

        .blazored-modal {
            width: 100% !important;
            margin: 0 !important;
            padding: 0 !important;
        }
    }



    .impresion {
        height: 30%;
        width: 100%;
    }

    .izq {
    }

    .der {
    }



    .clearfix {
        clear: both;
    }

</style>





<button style="outline:none; float: right;height:100%; margin-top: 0px;" class="no-print btn btn-outline" @onclick="() =>
       Print()">
    <FeatherPrinter Color="Black"></FeatherPrinter>
</button>



<div class="impresion row" id="DivIdToPrint" style="margin-bottom: 20px">
    <div class="col-1"/>
    <div class="col-6">

        <img src="/Images/logo2.jpg" style="float: left;height: 15%; widht: auto;" alt="...">
        <div class="clearfix"></div>
        <br />
        @if (LoteChoose.Id != null)
        {
            <RadzenText TextStyle="TextStyle.H5" Style="font-weight:700">NÚMERO DE LOTE: @LoteChoose.Id</RadzenText>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.H5" Style="font-weight:700">NÚMERO DE LOTE: No encontrado</RadzenText>
        }
        <br />
        @if (LoteChoose.FechaIngreso != null)
        {
            <RadzenText TextStyle="TextStyle.H5" Style="font-weight:700">FECHA INGRESO: @LoteChoose.FechaIngreso.Value.ToString("dd/MM/yyyy") </RadzenText>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.H5" Style="font-weight:700">FECHA INGRESO: No encontrado</RadzenText>
        }
        <br />
        @if (LoteChoose.Cantidad != null)
        {
            <RadzenText TextStyle="TextStyle.H5" Style="font-weight:700" > UNIDADES: @LoteChoose.Cantidad</RadzenText>
        }
        else
        {
            <RadzenText TextStyle="TextStyle.H5" Style="font-weight:700"> UNIDADES: No encontrado</RadzenText>
        }
    </div>
    <div class="col-4">
        @if (imageQR is not null)
        {
            <img src="@imageQR" style="height: 30%; width: auto; margin-top: 20px; margin-left: 10%;" alt="...">
        }
        <h1 style="font-size: 30px; font-weight: 5px; margin-right: 15% "><strong>APROBADO</strong> </h1>
        <br />
        <br />
        <label style="font-size: 20px; margin-left: 20px"> FIRMA </label>
    </div>
    <div class="col-1" />
</div>


@code {




    InsumoDTO oInsumo = null;



    Respuesta<InsumoDTO> oRta = new();
    Respuesta<List<Lote>> rta = new();
    [Parameter] public int? Id { get; set; }

    string imageQR = null;


    List<Lote> oLotes = null;

    [Parameter] public int? idLote { get; set; }

    Lote LoteChoose = null;

    protected override async Task OnInitializedAsync()
    {

        oRta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/insumo/{Id}");
        oInsumo = oRta.List;


        rta = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");


        LoteChoose = rta.List.Where(x => x.Id == idLote).FirstOrDefault();


        Console.WriteLine(idLote);
        Console.WriteLine(Id);


        QRCodeGenerator qrCodeGenerate = new();


        QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode($"http://localhost:5000/infoLotes/{Id}/{idLote}", QRCodeGenerator.ECCLevel.Q);





        PngByteQRCode qrCode = new(qrCodeData);



        byte[] qrByte = qrCode.GetGraphic(10);



        string base64 = Convert.ToBase64String(qrByte);
        imageQR = string.Format("data:image/png;base64,{0}", base64);





    }


    private async Task Print()
         => await _js.InvokeVoidAsync("window.print");






}
