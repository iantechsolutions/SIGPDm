@if (oRtaInsumos != null && oRtaPersonal != null)
{

    <div>
        <div class="card-body">

            <EditForm Model="@nota" OnValidSubmit="Guardar">
                @if (oRtaInsumos.List.Count > 0)
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <label>Insumo</label>

                            <RadzenDropDownDataGrid AllowClear="true" TValue="InsumoDTO" Style="width: 100%" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data=@(oRtaInsumos.List) TextProperty="Descripcion" @bind-Value="ins">

                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="Descripcion" Title="Descripción" Width="60%" />
                                    <RadzenDropDownDataGridColumn Property="Codigo" Title="Código" Width="20%" />
                                    <RadzenDropDownDataGridColumn Property="" Title="Stock" Width="20%">
                                        <Template Context="data">
                                            @if (data.Tipo == "Lote unico")
                                            {
                                                @data.StockReal
                                            }
                                            else
                                            {
                                                @data.StockReal
                                            }
                                        </Template>
                                    </RadzenDropDownDataGridColumn>
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-sm-12">
                            <label>Lote</label>
                            <RadzenDropDownDataGrid TValue="Lote" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                    Data=@(lotesNuevos(ins)) Style="width: 100%" AllowColumnResize="true" @bind-Value="lote" Disabled='ins.Tipo=="Lote unico"'
                                            TextProperty="Numero" AllowFilteringByAllStringColumns="true">

                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="Id" Title="Numero" Width="30%" />
                                    <RadzenDropDownDataGridColumn Property="Cantidad" Title="Cantidad" Width="30%" />
                                    <RadzenDropDownDataGridColumn Property="" Title="Cantidad prestamo" Width="30%">
                                        <Template Context="data">
                                            @StockCantidad.Where(x=>x.Lote == data.Id).Sum(x => x.Cantidad)
                                        </Template>
                                    </RadzenDropDownDataGridColumn>
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    </div>
                }
                else
                {
                    <p> No hay insumos para mostrar</p>
                }
                <br />

                <div class="row">
                    <div class="col-sm-6">
                        <label>Cantidad</label>
                        <InputNumber class="form-control" @bind-Value="@nota.Cantidad" placeholder="Cantidad"></InputNumber>
                        <ValidationMessage For="(()=> nota.Cantidad)" style="color:red;" />

                    </div>
                    @if (oRtaPersonal.Count > 0)
                    {
                        <div class="col-sm-6">
                            <label>Operario</label>

                            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                            Data=@(oRtaPersonal) Style="width: 100%" AllowColumnResize="true" @bind-Value="operario"
                                            TextProperty="Id" AllowFilteringByAllStringColumns="true">
                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombre/s" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    }
                    else
                    {
                        <p> No hay personal para mostrar</p>
                    }
                </div>
                <br />



                <button type="submit" class="btn btn-primary mr-2" Disabled=@disable>Aceptar</button>
                <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    bool disable;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    Respuesta<List<InsumoDTO>> oRtaInsumos = new();
    List<PersonalDTO> oRtaPersonal = new();
    List<Lote> listaLotes = new();
    InsumoDTO ins = new();
    Lote lote = new();
    PersonalDTO operario = new();

    PedidosPañol nota = new();

    IEnumerable<PrestamoDTO> StockCantidad;

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        var rtaa = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");
        listaLotes = rtaa.List;
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        oRtaInsumos = respuesta;
        var rta = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/Personal");
        oRtaPersonal = rta.List.Where(x => x.Activo == true || x.Activo == null).ToList();



        var oPrestamo = await http.GetFromJsonAsync<Respuesta<List<PrestamoDTO>>>("/api/prestamo");
        // Cantidad de un mismo lote usado en un prestamo
        StockCantidad = oPrestamo.List.Where(x => x.FechaInicio >= DateTime.Now && x.FechaFin > DateTime.Now && x.FechaFinReal == null);



        StateHasChanged();
    }

    async Task Guardar()
    {
        disable = true;

        nota.Operario = operario.Id;
        nota.Fecha = DateTime.Now;
        nota.Codigo = "nota de pedido";
        nota.Insumo = ins.Id;
        nota.Lote = lote.Id;

        if (ins.Tipo == "Lote unico")
        {
            if (nota.Cantidad <= ins.StockReal)
            {
                ins.StockReal -= nota.Cantidad;
                await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", ins);

                Console.WriteLine("Hola", nota.Cantidad);
                await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", nota);

                Console.WriteLine("nO LLEGO ):");

                Console.WriteLine(nota.Operario);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));


            }
            else
            {
                await alertaSinCantidad();
            }
        }
        else
        {
            if (nota.Cantidad <= lote.Cantidad)
            {

                Console.WriteLine("poderoso ):");

                lote.Cantidad -= nota.Cantidad;
                ins.StockReal = calcularCantidad(ins);
                await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", ins);
                await http.PutAsJsonAsync<Lote>($"/api/lotes", lote);

          

                await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", nota);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
            }
            else
            {
                await alertaSinCantidad();
            }
        }
    }

    public async Task alertaSinCantidad()
    {
        disable = false;
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No se dispone de esta cantidad",
                Text = "",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }

    List<Lote>? lotesNuevos(InsumoDTO insumo)
    {
        var lotes = listaLotes.Where(x => x.IdInsumo == insumo.Id);
        return lotes.Where(x => x.Tipo == "Lote nuevo").ToList();
    }

    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotesCant = listaLotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote in lotesCant)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
        }


        return total;
    }

}
