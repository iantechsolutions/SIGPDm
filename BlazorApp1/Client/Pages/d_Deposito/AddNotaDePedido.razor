@if (oRtaInsumos != null && oRtaPersonal != null)
{

    <div>
        <div class="card-body">

            <EditForm Model="@nota" OnValidSubmit="Guardar">
                @if (oRtaInsumos.List.Count > 0)
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <label>Insumo</label>
                            <RadzenDropDown AllowClear="true" TValue="InsumoDTO" Style="width: 100%" AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Data=@(oRtaInsumos.List) TextProperty="Descripcion" @bind-Value="ins" />
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-sm-12">
                            <label>Lote</label>
                            <RadzenDropDownDataGrid TValue="Lote" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                            Data=@(lotesNuevos(ins)) Style="width: 100%" AllowColumnResize="true" @bind-Value="lote" Disabled="esDeLoteUnico(ins)"
                                            TextProperty="Numero" AllowFilteringByAllStringColumns="true">

                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="Numero" Title="Numero" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Cantidad" Title="Cantidad" Width="100px" />
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    </div>
                }
                else
                {
                    <p> No hay insumos para mostrar</p>
                }
                <br />

                <div class="row">
                    <div class="col-sm-6">
                        <label>Cantidad</label>
                        <InputNumber class="form-control" @bind-Value="@nota.Cantidad" placeholder="Cantidad"></InputNumber>
                        <ValidationMessage For="(()=> nota.Cantidad)" style="color:red;" />

                    </div>
                    @if (oRtaPersonal.List.Count > 0)
                    {
                        <div class="col-sm-6">
                            <label>Operario</label>

                            <RadzenDropDownDataGrid TValue="Personal" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                            Data=@(oRtaPersonal.List) Style="width: 100%" AllowColumnResize="true" @bind-Value="operario"
                                            TextProperty="Id" AllowFilteringByAllStringColumns="true">
                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombre/s" Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    }
                    else
                    {
                        <p> No hay clientes para mostrar</p>
                    }
                </div>
                <br />



                <button type="submit" class="btn btn-primary mr-2" Disabled=@disable>Aceptar</button>
                <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    bool disable;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    Respuesta<List<InsumoDTO>> oRtaInsumos = new();
    Respuesta<List<Personal>> oRtaPersonal = new();
    List<Lote> listaLotes = new();
    InsumoDTO ins = new();
    Lote lote = new();
    Personal operario = new();

    PedidosPañol nota = new();

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        var rtaa = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lote");
        listaLotes = rtaa.List
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        oRtaInsumos = respuesta;
        var rta = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/Personal");
        oRtaPersonal = rta;
        StateHasChanged();
    }

    async Task Guardar()
    {
        disable = true;

        nota.Operario = operario.Id;
        nota.Fecha = DateTime.Now;
        nota.Codigo = "nota de pedido";
        nota.Insumo = ins.Id;
        if (esDeLoteUnico(ins))
        {
            if (nota.Cantidad <= ins.StockReal)
            {
                ins.StockReal -= nota.Cantidad;
                await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", ins);
                await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", nota);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));

            }
            else
            {
                await alertaSinCantidad();
            }
        }
        else
        {
            if (nota.Cantidad <= lote.Cantidad)
            {
                lote.Cantidad -= nota.Cantidad;
                await http.PutAsJsonAsync<Lote>($"/api/lotes/{ins.Id}", lote);
                await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", nota);
                await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));

            }
            else
            {
                await alertaSinCantidad();
            }
        }
    }

    public async Task alertaSinCantidad()
    {
        disable = false;
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No se dispone de esta cantidad",
                Text = "",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }

    bool esDeLoteUnico(InsumoDTO insumo)
    {
        if (insumo.Lotes == null) return true;
        var lotes = listaLotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote1 in lotes)
        {
            if (lote1.Tipo == "Lote unico")
            {
                return true;
            }
        }

        return false;
    }

    List<Lote>? lotesNuevos(InsumoDTO insumo)
    {
        if (insumo.Lotes == null) return null;
        var lotes = listaLotes.Where(x => x.IdInsumo == insumo.Id);
        return lotes.Where(x => x.Tipo == "Lote nuevo").ToList();
    }
}
