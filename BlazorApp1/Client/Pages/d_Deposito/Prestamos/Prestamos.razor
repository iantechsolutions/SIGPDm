@page "/Prestamo"

<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1 class="no-print">Prestamos</h1>
<br />
<button class="btn btn-outline-success" @onclick="gotoprestamo">Administrar herramientas</button>
<br />
<br />

<RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Pendientes">


            <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
            
            

            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                            Data="@oPrestamoPendiente" TItem="Prestamo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    

                    
                    
                    <RadzenDataGridColumn TItem="Prestamo"  Property="Id" Title="Id" Width="5%" />
                   
                    <RadzenDataGridColumn TItem="Prestamo" Property="Operario" Title="Operario" Width="20%" />

                    <RadzenDataGridColumn TItem="Prestamo" Property="Insumo" Title="Insumo" Width="20%" />

                    <RadzenDataGridColumn TItem="Prestamo" Property="Cantidad" Title="Cantidad" Width="10%" />
                    <RadzenDataGridColumn TItem="Prestamo" Property="FechaInicio" Title="Fecha inicio" Width="17%" />
                    <RadzenDataGridColumn TItem="Prestamo" Property="FechaFin" Title="Fecha fin" Width="17%" />

                    <RadzenDataGridColumn TItem="Prestamo" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Editar" @onclick="() => FinishAlert(data.Id)"><FeatherEdit Color="blue" /> </button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Prestamo" Property="" Title="" Filterable="false" Width="8%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Eliinar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash Color="Red" /> </button>
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>

        </RadzenTabsItem>

        <RadzenTabsItem Text="Finalizados">

            <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
            <br />
            <br />
           
            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                            Data="@oPrestamoFinish" TItem="Prestamo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>

                    

                     <RadzenDataGridColumn TItem="Prestamo"  Property="Id" Title="Id" Width="5%" />
                    
                    <RadzenDataGridColumn TItem="Prestamo" Property="Operario" Title="Operario" Width="20%" />
                    <RadzenDataGridColumn TItem="Prestamo" Property="Insumo" Title="Insumo" Width="20%" />


                    <RadzenDataGridColumn TItem="Prestamo" Property="Cantidad" Title="Cantidad" Width="10%" />
                    <RadzenDataGridColumn TItem="Prestamo" Property="FechaInicio" Title="Fecha inicio" Width="20%" />
                    <RadzenDataGridColumn TItem="Prestamo" Property="FechaFin" Title="Fecha fin" Width="20%" />                    

                    
                    <RadzenDataGridColumn TItem="Prestamo" Property="" Title="" Filterable="false" Width="10%">
                        <Template Context="data">
                            <button type="button" class="btn" title="Eliinar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash Color="Red" /> </button>
                        </Template>
                    </RadzenDataGridColumn>
                  

                </Columns>
            </RadzenDataGrid>

            

        </RadzenTabsItem>
        </Tabs>
        </RadzenTabs>


@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    Respuesta<List<Prestamo>> oPrestamo = new();
    List<Prestamo> oPrestamoFinish = new();
    List<Prestamo> oPrestamoPendiente = new();

    RadzenDataGrid<Prestamo>? grid;

    Respuesta<List<Personal>> oPersonal = new();

    List<Personal> personale = new();
    List<InsumoDTO> insumos = new();



    bool allowFiltering = false;
    object? Filter;

    int? IdInsumo;
    protected override async Task OnInitializedAsync()
    {
        oPrestamo = await http.GetFromJsonAsync<Respuesta<List<Prestamo>>>("/api/prestamo");



        oPrestamoFinish = oPrestamo.List.Where(x => x.FechaFin <= DateTime.Now || x.Estado == "Finalizado").ToList();
        oPrestamoPendiente = oPrestamo.List.Where(x => x.FechaFin >= DateTime.Now && x.Estado != "Finalizado").ToList();
         

        var personal = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/personal");
        var Insumos = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");


        foreach(var presta in oPrestamo.List)
        {

            personale =  personal.List.Where(x => x.Id == presta.Operario).ToList();
            insumos = Insumos.List.Where(x => x.Id == presta.Insumo).ToList();
        }
        
        StateHasChanged();
    }



    async Task gotoprestamo()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddPrestamo>("Administrar Prestamos", options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

            await grid.Reload();
            await OnInitializedAsync();
            StateHasChanged();
        }
        else
        {
            await OnInitializedAsync();
            StateHasChanged();
        }
    }


    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    public async Task Finish(int id)
    {
        var presta = oPrestamoPendiente.Where(x => x.Id == id).FirstOrDefault();

        presta.Estado = "Finalizado";

       
        await http.PutAsJsonAsync<Prestamo>("/api/prestamo", presta);

        await OnInitializedAsync();
        await grid.Reload();
        
    }

    public async Task FinishAlert(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se finalizara el presupuesto",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Finalizar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            Finish(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este prestamo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task delete(int id)
    {
        

        await http.DeleteAsync($"/api/prestamo/{id}");
        await OnInitializedAsync();
        await grid.Reload();
        StateHasChanged();
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/deposito");
    }
 
}
