

<center>
    @if (oRtaInsumos != null && oRtaInsumos.Count() > 0)
    {

        <RadzenSteps @ref="steps">
            <Steps>
                <RadzenStepsItem Text="Seleccionar el operario">
                    <center>

                        <RadzenDropDownDataGrid TValue="Personal" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                Data=@(oRtaPersonal) Style="width: 100%" AllowColumnResize="true" @bind-Value="persona" @ref="gridDropPersonal"
                                                TextProperty="Nombres" AllowFilteringByAllStringColumns="true">

                                                
                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="33%" />
                                <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="33%" />
                                <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="33%" />
                                       
                            
                            </Columns>
                        </RadzenDropDownDataGrid>

                        @if (persona != null)
                        {
                            <button class="btn btn-outline-success " disabled=@disabler @onclick="cargarOperario">Seleccionar</button>
                        }

                        
                        @if (lista0perarios.Count() > 0)
                        {
                            <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="10" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="grid0perarios" AllowFiltering="true"
                            Data="@lista0perarios" TItem="PersonaEvento" ColumnWidth="100px" Style="width: 100%">
                                <Columns>
                                    <RadzenRow>


                                        <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Dia" Filterable="false" Width="35%">
                                        <Template Context="data">
                                            <RadzenDatePicker @bind-Value="data.Fecha" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:25vh;content: 'query_builder';" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Desde" Filterable="false" Width="23%">
                                        <Template Context="data">
                                            <RadzenDatePicker @bind-Value="data.FechaDesde" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:15vh;" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Hasta" Filterable="false" Width="22%">
                                        <Template Context="data">
                                            <RadzenDatePicker @bind-Value="data.FechaHasta" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:15vh;" />
                                        </Template>
                                    </RadzenDataGridColumn>

                                    </RadzenRow>
                                    
                                <RadzenRow>
                                    <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="" Filterable="false" Width="10%">
                                        <Template Context="data">
                                                <RadzenButton Disabled="@(data.EndButton)" class="btn btn-outline-info btn-sm" Click="@(() => estallar(data))"><FeatherCheck>Gren</FeatherCheck></RadzenButton>
                                        </Template>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="" Filterable="false" Width="10%">
                                        <Template Context="data">
                                            <button class="btn btn-danger btn-sm" @onclick="() => alertaDeleteOperario(data)"><FeatherTrash>Red</FeatherTrash></button>
                                        </Template>
                                    </RadzenDataGridColumn>

                                </RadzenRow>
                                </Columns>


                                
                                </RadzenDataGrid>

                        }
                    </center>
                 </RadzenStepsItem>
               
                <RadzenStepsItem Text="Seleccionar insumo a utilizar" Selected=SeleccionarInsumo>
                    <center>
                        <RadzenDropDownDataGrid TValue="InsumoDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                Data=@(oRtaInsumos) Style="width: 100%" AllowColumnResize="true" @bind-Value="insumo" @ref="gridDropInsumos"
                                                TextProperty="Descripcion" AllowFilteringByAllStringColumns="true">

                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Descripcion" Title="Descripción" Width="100px" />
                                <RadzenDropDownDataGridColumn Property="Codigo" Title="Código" Width="100px" />
                                <RadzenDropDownDataGridColumn Property="" Title="Stock" Width="100px">
                                    <Template Context="data">
                                        @if (data.Tipo == "Lote unico")
                                        {
                                            @data.StockReal
                                        }
                                        else
                                        {
                                            @data.StockReal
                                        }
                                    </Template>
                                </RadzenDropDownDataGridColumn>
                            </Columns>
                        </RadzenDropDownDataGrid>

                    </center>
                </RadzenStepsItem>

                <RadzenStepsItem Disabled="@(insumo.Descripcion == null)" Text="Elegir lote a utilizar">
                    <center>
                        @if (insumo.Tipo == "Lote unico")
                        {
                            lote = listaLotes(insumo).First();

                            <br />
                            <p @onclick="async () => await steps.NextStep()">El insumo es de lote único, pase al siguiente paso</p>
                        }
                        else
                        {
                            <RadzenTabs RenderMode="TabRenderMode.Client">
                                <Tabs>


                                    <RadzenTabsItem Text="Nuevos">

                                        <RadzenDropDownDataGrid TValue="Lote" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                                Data=@(listaLotesNuevos(insumo))
                                                                Style="width: 100%" AllowColumnResize="true" @bind-Value="lote"
                                                                TextProperty="Numero" AllowFilteringByAllStringColumns="true">
                                            <Columns>


                                                <RadzenDropDownDataGridColumn Property="Id" Title="Numero de lote" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Tipo" Title="Tipo" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Cantidad" Title="Stock" Width="100px" />
                                            </Columns>
                                        </RadzenDropDownDataGrid>
                                    </RadzenTabsItem>


                                    <RadzenTabsItem Text="Recorte">
                                        <RadzenDropDownDataGrid TValue="Lote" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                                Data=@(listaLotesRecorte(insumo))
                                                                Style="width: 100%" AllowColumnResize="true" @bind-Value="lote"
                                                                TextProperty="Numero" AllowFilteringByAllStringColumns="true">
                                            <Columns>
                                                <RadzenDropDownDataGridColumn Property="Id" Title="Numero de lote" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Tipo" Title="Tipo" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Alto" Title="Alto" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Ancho" Title="Ancho" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Cantidad" Title="Stock" Width="100px" />
                                            </Columns>
                                        </RadzenDropDownDataGrid>
                                    </RadzenTabsItem>


                                </Tabs>
                            </RadzenTabs>
                        }
                    </center>
                </RadzenStepsItem>

                <RadzenStepsItem Disabled="@(lote.Tipo==null)" Text="Elegir cantidad a utilizar">
                    <center>
                        <div class="col-lg-3">
                            <div class="input-group">
                                <input @bind=@cantidad class="form-control" style="width:40%;"></input>
                                <span class="input-group-btn">

                                    <button class="btn btn-outline" title="Enviar" disabled=@disable @onclick="cargarInsumo"><FeatherSend Color="black" /></button>
                                </span>
                            </div>
                        </div>
                    </center>
                </RadzenStepsItem>
               
                
            </Steps>
        </RadzenSteps>

        @if (insumosUsados.Count() != 0)
        {
            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="4"
                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="grid" Style="width: 50%" AllowFiltering="true"
                            Data="@insumosUsados" TItem="InsumosUsados" ColumnWidth="100px">
                <Columns>
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="Descripcion" Filterable="false" Title="Insumo" Width="50px" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="cantidad" Filterable="false" Title="Cantidad" Width="50px" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="lote" Filterable="false" Title="Lote usado" Width="50px" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="" Title="" Filterable="false" Width="50px">
                        <Template Context="data">
                            <button class="btn" title="Eliminar" @onclick="() => alertaDeleteInsumo(data)"><FeatherTrash2 Color="red" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    }
    else
    {
        <RadzenText>No hay insumos disponibles</RadzenText>
    }
</center>


@code {
    bool disable;
    bool disabler;



    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    Prestamo prestamo = new();


    List<PersonaEvento> lista0perarios = new();



    List<InsumoDTO> oRtaInsumos;
    List<Personal> oRtaPersonal;


    List<InsumosUsados> insumosUsados = new();
    List<Lote> listaTodosLotes = new();
    RadzenSteps? steps;
    RadzenDataGrid<InsumosUsados>? grid;

    RadzenDataGrid<PersonaEvento>? grid0perarios;
    RadzenDropDownDataGrid<InsumoDTO>? gridDropInsumos;
    RadzenDropDownDataGrid<Personal>? gridDropPersonal;

    Personal persona;

    Respuesta<List<EventosProduccion>> personalEventos = new();

    InsumoDTO insumo = new();
    Lote lote = new();
    InsumosUsados InsumosUsadosParaGuardar = new();
    int cantidad;
    bool SeleccionarInsumo = false;

    public void resetInsLote()
    {
        lote = new();
        cantidad = 0;
        insumo = new();
    }
    protected override async Task OnInitializedAsync()
    {
        disable = false;
        var rtaa = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");
        listaTodosLotes = rtaa.List;



        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;

        var response3 = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/personal");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();




    }
    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
    }


    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (listaTodosLotes != null)
        {
            foreach (var lote in lotes)
            {
                if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;

            }
        }
        return total;
    }

    List<Lote> listaLotes(InsumoDTO insumo)
    {
        List<Lote> a = new();
        a = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id).ToList();
        return a;
    }

    List<Lote> listaLotesNuevos(InsumoDTO insumo)
    {
        //List<Lote> a = new();
        List<Lote> oListaLotesNuevos = new();

        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (lotes != null)
        {
            foreach (var i in lotes)
            {
                if (i.Tipo == "Lote nuevo")
                {
                    oListaLotesNuevos.Add(i);
                }
            }
        }
        return oListaLotesNuevos;
    }

    List<Lote> listaLotesRecorte(InsumoDTO insumo)
    {

        List<Lote> oListaLotesRecorte = new();
        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (lotes != null)
        {
            lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id).ToList();
            foreach (var i in lotes)
            {
                if (i.Tipo == "Lote de recorte")
                {
                    oListaLotesRecorte.Add(i);
                }
            }
        }
        return oListaLotesRecorte;
    }

    public async Task alertaOk()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Se descontó correctamente el stock.",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = false,
                ConfirmButtonText = "Entendido"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task cargarInsumo()
    {

        prestamo.Cantidad = cantidad;
        prestamo.Insumo = insumo.Id;

        Console.WriteLine(prestamo.Cantidad);
        Console.WriteLine(prestamo.Insumo);
        Console.WriteLine(prestamo.FechaFin);

        await http.PostAsJsonAsync<Prestamo>("/api/prestamo", prestamo);


        if (cantidad > 0 && !(lote.Cantidad < cantidad))
        {              




            alertaOk();
            insumo = new();
            lote = new();
            cantidad = 0;
            await steps.PrevStep();
            await steps.PrevStep();
            await steps.PrevStep();


            if (calcularCantidad(insumo) < insumo.StockMin)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Detail = $"El insumo {insumo.Descripcion} quedo con menor stock que el minimo",
                        Duration = 4000
                    });
            }
        } 

        else if (cantidad == 0)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Detail = "Cargar una cantidad",
                    Duration = 4000
                });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Detail = "No se dispone de esa cantidad",
                    Duration = 4000
                });
        }

        disable = false;
    }
    public async Task alertaDeleteInsumo(InsumosUsados insCant)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se borrara este insumo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteInsumo(insCant);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task Get()
    {
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;
        StateHasChanged();
        //grid.Reload();
        gridDropInsumos.Reload();
        StateHasChanged();
    }

    public async void deleteInsumo(InsumosUsados insCant)
    {
        insumosUsados.Remove(insCant);

        InsumoDTO ins = insCant.insumo;
        if (lote.Tipo != "Lote unico")
        {

            var loteDelteado = listaTodosLotes.Where(x => x.Id == insCant.lote).FirstOrDefault();

            loteDelteado.Cantidad += insCant.cantidad;
            insumo.StockReal += insCant.cantidad;


        }
        else
        {
            ins.StockReal += insCant.cantidad;


        }




        resetInsLote();
        SeleccionarInsumo = true;
        await Get();
    }

    public async Task estallar(PersonaEvento operario)
    {


        prestamo.Operario = operario.Operario.Id;

        var temp = operario.FechaDesde.Value;
        operario.FechaDesde = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;

        var tempa = operario.FechaHasta.Value;
        prestamo.FechaFin = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + tempa.TimeOfDay;



        if(operario.FechaHasta <= DateTime.Now)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Revise la fecha",
                    Text = "La hora ya a transcurrido",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    
                });
        }
        else
        {
            
        await steps.NextStep();
        disabler = true;
        }
    }

    public async void alertaDeleteOperario(PersonaEvento operario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se desasignará esta tarea",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteOperario(operario);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public void deleteOperario(PersonaEvento operario)
    {
        disabler = false;
        try
        {
            var temp = operario.FechaDesde.Value;
            operario.FechaDesde = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
            temp = operario.FechaHasta.Value;
            operario.FechaHasta = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        }
        catch
        {

        }
        lista0perarios.Remove(operario);
        grid0perarios.Reload();
        persona = new Personal();

        if (operario.FechaDesde != null && personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Fecha == operario.FechaDesde).Count() > 0) http.DeleteAsync($"/api/eventosproduccion/{personalEventos.List.Where(x => x.Operario == operario.Operario.Id  && x.Fecha == operario.FechaDesde).First().Id}");
        if (operario.FechaHasta != null && personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Fecha == operario.FechaDesde).Count() > 0) http.DeleteAsync($"/api/eventosproduccion/{personalEventos.List.Where(x => x.Operario == operario.Operario.Id  && x.Fecha == operario.FechaHasta).First().Id}"); grid0perarios.Reload();
        StateHasChanged();
        
    }

    public void cargarOperario()
    {
        
        PersonaEvento personaEvento = new();
        personaEvento.Operario = persona;
        personaEvento.Fecha = DateTime.Now;
        lista0perarios.Add(personaEvento);
        if (grid0perarios != null) grid0perarios.Reload();
        StateHasChanged();
        disabler = true;

    }

    public class PersonaEvento
    {
        public Personal Operario { get; set; }
        public DateTime Fecha { get; set; }
        public DateTime? FechaDesde { get; set; }
        public DateTime? FechaHasta { get; set; }
        public bool EndButton;
    }
}
