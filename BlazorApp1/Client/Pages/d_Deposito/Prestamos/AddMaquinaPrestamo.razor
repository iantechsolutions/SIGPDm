<center>
    @if (oRtaMaquinas != null && oRtaMaquinas.Count() > 0)
    {
        <RadzenSteps @ref="steps">
            <Steps>
                <RadzenStepsItem Text="Seleccionar el operario">
                    <center>

                        <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                Data=@(oRtaPersonal) Style="width: 100%" AllowColumnResize="true" @bind-Value="persona" @ref="gridDropPersonal"
                                                TextProperty="Nombres" AllowFilteringByAllStringColumns="true">


                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="33%" />
                                <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="33%" />
                                <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="33%" />


                            </Columns>
                        </RadzenDropDownDataGrid>

                        @if (persona != null)
                        {
                            <button class="btn btn-outline-success " disabled=@(persona == null) @onclick="cargarOperario">Seleccionar</button>
                        }

                        @if (lista0perarios.Count() > 0)
                        {
                            <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="10" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="grid0perarios" AllowFiltering="true"
                                            Data="@lista0perarios" TItem="PrestamoDTO" ColumnWidth="100px" Style="width: 100%">
                                <Columns>
                                    <RadzenRow>


                                        <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="Dia" Filterable="false" Width="25%">
                                            <Template Context="data">
                                                <RadzenDatePicker @bind-Value="data.FechaInicio" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:80%;content: 'query_builder';" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="Desde" Filterable="false" Width="20%">
                                            <Template Context="data">
                                                <RadzenDatePicker @bind-Value="data.FechaInicio" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:80%;" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="Dia" Filterable="false" Width="25%">
                                            <Template Context="data">
                                                <RadzenDatePicker @bind-Value="data.FechaFin" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:80%;content: 'query_builder';" />
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="Hasta" Filterable="false" Width="20%">
                                            <Template Context="data">
                                                <RadzenDatePicker @bind-Value="data.FechaFin" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:80%;" />
                                            </Template>
                                        </RadzenDataGridColumn>

                                    </RadzenRow>

                                    <RadzenRow>
                                        <RadzenDataGridColumn TItem="PrestamoDTO" Property="" Title="" Filterable="false" Width="10%">
                                            <Template Context="data">
                                                <RadzenButton class="btn btn-outline-info btn-sm" Click="@(() => estallar(data))"><FeatherCheck>Gren</FeatherCheck></RadzenButton>
                                            </Template>
                                        </RadzenDataGridColumn>
                                    </RadzenRow>
                                </Columns>
                            </RadzenDataGrid>

                        }
                    </center>
                </RadzenStepsItem>

                <RadzenStepsItem Text="Seleccionar Maquina a utilizar" Disabled=@(!estallado)>
                    <center>
                        <RadzenDropDownDataGrid TValue="MaquinasHerramienta" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                Data=@(oRtaMaquinas) Style="width: 100%" AllowColumnResize="true" @bind-Value="Maquina" @ref="gridDropMaquinas"
                                                TextProperty="Descripcion" AllowFilteringByAllStringColumns="true">

                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Id" Filterable="false" Title="ID" Width="50px" TextAlign="TextAlign.Center" />
                                <RadzenDropDownDataGridColumn Property="Descripcion" Title="Descripción" Width="100px" />
                                <RadzenDropDownDataGridColumn Property="Marca" Title="Marca" Width="100px" />
                            </Columns>
                        </RadzenDropDownDataGrid>
                        <br/>
                        <span class="input-group-btn">
                                <button class="btn btn-outline" title="Enviar" @onclick="cargarMaquina"><FeatherSend Color="black" /></button>
                        </span>
                    </center>
                </RadzenStepsItem>
            </Steps>
        </RadzenSteps>
    }
    else
    {
        <RadzenText>No hay Maquinas disponibles</RadzenText>
    }
</center>

@code {


    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    bool estallado = false;

    List<PrestamoDTO> lista0perarios = new();

    List<MaquinasHerramienta> oRtaMaquinas = new();
    List<PersonalDTO> oRtaPersonal = new();
    List<PrestamoDTO> oRtaPrestamo = new();

    RadzenSteps? steps;


    RadzenDataGrid<PrestamoDTO>? grid0perarios;
    RadzenDropDownDataGrid<MaquinasHerramienta>? gridDropMaquinas;
    RadzenDropDownDataGrid<PersonalDTO>? gridDropPersonal;

    PersonalDTO persona = new();
    PrestamoDTO prestamo = new();
    MaquinasHerramienta Maquina = new();
    int? cantidad;

    protected override async Task OnInitializedAsync()
    {
        var response2 = await http.GetFromJsonAsync<Respuesta<List<MaquinasHerramienta>>>("/api/Maquinas");
        oRtaMaquinas = response2.List;

        var response3 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();

        var response4 = await http.GetFromJsonAsync<Respuesta<List<PrestamoDTO>>>("api/prestamo");
        oRtaPrestamo = response4.List;

    }


    public async Task alertaOk()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Se creo correctamente el prestamo.",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = false,
                ConfirmButtonText = "Entendido"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {



            await http.PostAsJsonAsync<PrestamoDTO>("/api/prestamo", prestamo);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task cargarMaquina()
    {
        prestamo.Cantidad = cantidad;
        prestamo.Maquina = Maquina.Id;

        // Cantidad de prestamos segun la IdMaquina

        if (oRtaPrestamo.Where(x => x.Maquina == Maquina.Id && x.FechaInicio >= DateTime.Now && x.FechaFin < DateTime.Now && x.FechaFinReal == null).Count() > 0)
        {
            await AlertaUsado("La maquina esta en un prestamo actualmente");
        }
        else
        {
            await alertaOk();
        }

    }

    public async Task AlertaUsado(string palabra)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Detail = palabra,
                Duration = 4000
            });
    }

    public async Task estallar(PrestamoDTO operario)
    {
        estallado = true;
        if (prestamo.FechaInicio >= prestamo.FechaFin)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Revise las horas",
                    Text = "Hora de inicio es mayor/igual a hora fin",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",

                });
        }
        else if (prestamo.FechaInicio < DateTime.Now)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Revise las horas",
                    Text = "La hora de inicio ya ha pasado",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",

                });
        }
        if (prestamo.FechaFin > DateTime.Now && prestamo.FechaInicio < prestamo.FechaFin && prestamo.FechaInicio > DateTime.Now)
        {
            await steps.NextStep();
        }

    }

    public async void alertaDeleteOperario(PrestamoDTO operario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se desasignará esta tarea",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteOperario(operario);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public void deleteOperario(PrestamoDTO operario)
    {

        lista0perarios.Remove(operario);
        grid0perarios.Reload();


        persona = new PersonalDTO();
        prestamo.Operario = null;


        StateHasChanged();

    }

    public void cargarOperario()
    {


        prestamo.Operario = persona.Id;
        lista0perarios.Add(prestamo);

        if (grid0perarios != null) grid0perarios.Reload();
        StateHasChanged();


    }


}
