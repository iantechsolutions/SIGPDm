@page "/estadistica/ventas"
@using System.Globalization

<div style="display: flex; justify-content: space-between; align-items: center;">
    <h3 style="font-size: 1.8rem; font-weight: bold;">Estadística de Ventas</h3>
</div>

<br />
<br />

<RadzenText style="font-size: 1.2rem; font-weight: 500;">Listado de compras últimos trimestre</RadzenText>

<div style="display: flex; gap: 10px;">
    <RadzenDatePicker @bind-Value="fechaDesde"
                      Placeholder="Fecha desde"
                      Style="font-size: 1rem; width: 200px;"
                      DateFormat="yyyy-MM-dd"
                      Change="OnFechaChanged" />
    <RadzenDatePicker @bind-Value="fechaHasta"
                      Placeholder="Fecha hasta"
                      Style="font-size: 1rem; width: 200px;"
                      DateFormat="yyyy-MM-dd"
                      Change="OnFechaChanged" />
    <button @onclick="AplicarFiltro"
            class="btn btn-primary"
            style="font-size: 1rem;"
            disabled="@(!FechaHastaValida())">
        Aplicar Filtro
    </button>
</div>

<br />

<h4 style="font-size: 1.4rem; font-weight: bold;">Conteo de órdenes por tipo:</h4>

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;">
    @foreach (var item in ordenesPorTipo)
    {
        <div style="border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #f9f9f9; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <h5 style="font-size: 1.4rem; font-weight: bold; margin: 0 0 10px;">@item.Key</h5>
            <p style="font-size: 1.2rem; margin: 0;">@item.Value órdenes</p>
        </div>
    }
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    List<Cotizacione> cotizaciones = new();
    List<Cotizacione> cotizacionesFiltradas = new();
    bool allowFiltering;
    DateTime? fechaDesde;
    DateTime? fechaHasta;
    Dictionary<string, int> ordenesPorTipo = new();

    protected override async Task OnInitializedAsync()
    {
        fechaDesde = new DateTime(2024, 1, 1);
        fechaHasta = new DateTime(2024, 12, 31);

        await Get();
    }

    async Task Get()
    {
        var rta2 = await http.GetFromJsonAsync<Respuesta<List<Cotizacione>>>("/api/cotizacion");
        cotizaciones = rta2.List.Where(x => x.Estado == "Aprobada").ToList();
        FiltrarYContar();
        StateHasChanged();
    }

    void FiltrarYContar()
    {
        cotizacionesFiltradas = cotizaciones
            .Where(x => x.Fechaentrega.HasValue &&
                        (!fechaDesde.HasValue || x.Fechaentrega.Value.Date >= fechaDesde.Value.Date) &&
                        (!fechaHasta.HasValue || x.Fechaentrega.Value.Date <= fechaHasta.Value.Date))
            .ToList();

        ordenesPorTipo = cotizacionesFiltradas
            .GroupBy(x => string.IsNullOrEmpty(x.Tipo) ? "Sin tipo" : x.Tipo)
            .ToDictionary(g => g.Key, g => g.Count());

        if (!ordenesPorTipo.ContainsKey("Sin tipo"))
        {
            ordenesPorTipo["Sin tipo"] = cotizacionesFiltradas
                .Count(x => string.IsNullOrEmpty(x.Tipo));
        }
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    private void OnFechaChanged()
    {
        if (fechaHasta.HasValue && fechaDesde.HasValue && fechaHasta.Value < fechaDesde.Value)
        {
            fechaHasta = fechaDesde.Value;
        }

        StateHasChanged();
    }

    private bool FechaHastaValida()
    {
        return !(fechaHasta.HasValue && fechaDesde.HasValue && fechaHasta.Value < fechaDesde.Value);
    }

    private void AplicarFiltro()
    {
        FiltrarYContar();
        StateHasChanged();
    }
}
