<h3>Información de Fallas</h3>

@if (falla != null)
{
    <div class="info-fallas-container">
        <div class="info-column">
            <p><strong>ID:</strong> @falla.id</p>
            <p><strong>Empleado:</strong> @falla.empleado</p>
            <p><strong>Observación:</strong> @falla.observacion</p>
            <p><strong>Corrección:</strong> @falla.correccion</p>
            <p><strong>Etapa:</strong> @falla.etapa</p>
            <p><strong>Fecha:</strong> @falla.fecha?.ToString("yyyy-MM-dd")</p>
            <p><strong>OT:</strong> @falla.OT</p>
            <p><strong>Código:</strong> @falla.codigo</p>
            <p><strong>Gravedad:</strong> @falla.gravedad</p>
        </div>

        <div class="images-column">
            <h4>Imágenes</h4>
            @if (!string.IsNullOrEmpty(falla.imagenes))
            {
                <div class="image-gallery">
                    @foreach (var imagen in DeserializarImagenes(falla.imagenes))
                    {
                        <img src="@($"{nav.BaseUri}/imagenesFallas/{imagen}")"
                             alt="Imagen de Falla"
                             class="thumbnail"
                             @onclick="() => MostrarImagenEnGrande(imagen)" />
                    }
                </div>
            }
            else
            {
                <p>No hay imágenes disponibles.</p>
            }
        </div>
    </div>
}

@if (imagenGrandeVisible)
{
    <div class="modal" @onclick="CerrarImagenGrande">
        <div class="modal-content">
            <span class="close" @onclick="CerrarImagenGrande">&times;</span>
            <img src="@imagenActual" alt="Imagen Ampliada" class="imagen-grande" />
        </div>
    </div>
}

@code {
    [Parameter] public int? id { get; set; }

    Fallas falla = new();
    private bool imagenGrandeVisible = false;
    private string imagenActual = "";

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var rta3 = await http.GetFromJsonAsync<Respuesta<Fallas>>($"/api/fallas/{id}");
        falla = rta3.List;
    }

    // Método para deserializar las imágenes desde un JSON
    private List<string> DeserializarImagenes(string jsonImagenes)
    {
        return JsonSerializer.Deserialize<List<string>>(jsonImagenes) ?? new List<string>();
    }

    // Métodos para mostrar y cerrar la imagen en grande
    private void MostrarImagenEnGrande(string imagen)
    {
        imagenActual = $"/imagenesFallas/{imagen}";
        imagenGrandeVisible = true;
    }

    private void CerrarImagenGrande()
    {
        imagenGrandeVisible = false;
        imagenActual = "";
    }
}
