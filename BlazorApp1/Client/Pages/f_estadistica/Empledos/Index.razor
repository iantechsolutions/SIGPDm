@page "/estadistica/empleados"

@using System.Globalization


<div style="display: flex; justify-content: space-between; align-items: center;">
    <h3>Estadistica de empleados</h3>
    <RadzenButton Variant="Variant.Text" class="rz-text-primary-color rz-background-color-primary-lighter" Text="Agregar falla/detalle" Click="@(() => Falla())" />
</div>

<br />
<br />
<div class="row">
    <div class="col-3">
        @if (oRtaPersonal != null && oRtaPersonal.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Encontrar por personal</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(oRtaPersonal) Style="width: 50%" AllowColumnResize="true" @bind-Value="persona"
                                    TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start" Change="@(args => cargarOperario(1))">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="40%">
                        <Template Context="data">
                            @if (data.Nombres != null)
                            {
                                <a>@data.Nombres @data.Apellido</a>
                            }
                        </Template>
                    </RadzenDropDownDataGridColumn>
                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="30%" />
                </Columns>
            </RadzenDropDownDataGrid>
        }
        else
        {
            <p>No hay personal para mostrar</p>
        }
    </div>


    <div class="col-3">
        @if (OrdenesSeleccionadas != null && OrdenesSeleccionadas.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Encontrar por orden de trabajo</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="Ordentrabajo" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(OrdenesSeleccionadas) Style="width: 50%" AllowColumnResize="true" @bind-Value="trabajo"
                                    TextProperty="Codigo" AllowFilteringByAllStringColumns="true" class="float-start" Change="@(args => cargarOperario(2))">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="Codigo" Title="Codigo" Width="40%" />
                    <RadzenDropDownDataGridColumn Property="Estado" Title="Estado" Width="40%" />
                </Columns>
            </RadzenDropDownDataGrid>
        }
        else
        {
            <p>No hay órdenes para mostrar</p>
        }
    </div>
    <div class="col-2">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Gravedad</RadzenText>
        <br />
        <RadzenDropDown class="form-control" TValue="string" Data=@Gravedad placeholder="" @bind-Value=@gravedad Style="width: 50%" Change="@(args => cargarOperario(2))" />
    </div>
    <div class="col-4" style="">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">SELECCIONE EL PERIODO</RadzenText>
        <br />
        <div class="row" >
            <div class="col-6">

                <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaDesde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-40%" Change="@(args => cargarOperario(2))" />
            </div>
            <div class="col-6">

                <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaHasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-40%" Change="@(args => cargarOperario(2))" />
            </div>
        </div>
    </div>
    
</div>
<br />


    <div>
    <button class="btn btn-outline-success " style="margin-left: 5px;" @onclick="() => cargarOperario(2)">Cargar datos</button>
        <button class="btn btn-outline-success " style="margin-left: 5px;" @onclick="() => EliminarFiltros()">Eliminar filtros</button>

    </div>
  

<br />
<br />
<div class="card" style="padding: 5px;">
    @if (Data != null)
    {
        @if (persona != null)
        {
            <RadzenText Style="font-weight: 600;font-size: 3vh;">@persona.Nombres @persona.Apellido</RadzenText>
        }
        else
        {
            <RadzenText Style="font-weight: 600;font-size: 3vh;">
                Datos Generales periodo @(FechaDesde?.ToString("MMMM") ?? "") - @(FechaHasta?.ToString("MMMM") ?? "")
            </RadzenText>
        }

        @if (ObrasTotales.Count() > 0 && FallasSeleccionadas.Count() > 0)
        {
            <RadzenText> Cantidad de obras participadas: @cantidadObras </RadzenText>
            <RadzenText> Errores totales: @cantidadErrores</RadzenText>
            <RadzenText> Porcentaje de errores: @porcentajeErrores %</RadzenText>
            <RadzenText> Todas las horas trabajadas en periodo: @horasTotales</RadzenText>
        }
        else
        {
            
            <RadzenText> Cantidad de obras participadas: @cantidadObras </RadzenText>
            <RadzenText> Errores totales: @cantidadErrores</RadzenText>
            <RadzenText> Porcentaje de errores: - </RadzenText>
            <RadzenText> Todas las horas trabajadas en periodo: @horasTotales</RadzenText>
        }
    }
    else
    {
        <br />
        <br />
        <RadzenText> Seleccione un empleado o muestre los datos generales </RadzenText>
        <br />
        <br />
    }
</div>



  



<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />
<br />
<RadzenText>Listado de fallas</RadzenText>

@if (FallasSeleccionadas != null)
    {

<RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                Data="@FallasSeleccionadas" TItem="Fallas" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Fallas" Property="fecha" Title="Fecha" Width="15%">
            <Template Context="data">
                @if (data.fecha.HasValue)
                {
                    <a>@data.fecha.Value.ToString("dd/MM/yyyy")</a>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Fallas" Property="personalNavigation.Nombres" Title="Nombres" Width="20%">
        <Template Context="data">
                @if (data.fecha.HasValue)
                {
                    <a>@data.personalNavigation.Nombres @data.personalNavigation.Apellido</a>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Fallas" Property="gravedad" Title="Gravedad" Width="10%" />
        <RadzenDataGridColumn TItem="Fallas" Property="codigo" Title="OT" Width="15%" />
        <RadzenDataGridColumn TItem="Fallas" Property="etapa" Title="Etapa" Width="10%" />
        <RadzenDataGridColumn TItem="Fallas" Property="observacion" Title="Observacion" Width="30%" />

       
    </Columns>
    </RadzenDataGrid>
}
else
{
    <p> No hay fallas para mostrar</p>

}

<br />
<br />
<h3>Dashboard de Errores por Etapa</h3>
<br />
<br />

<RadzenChart>
    <RadzenColumnSeries Data="@(EtapasCount.Select(ec => new { Etapa = ec.Key, Cantidad = ec.Value }))"
                        CategoryProperty="Etapa"
                        ValueProperty="Cantidad"
                        Title="Errores por Etapa"
                        StrokeWidth="4">
    </RadzenColumnSeries>
    <RadzenCategoryAxis Padding="20">
        <RadzenAxisTitle Text="Etapa" />
    </RadzenCategoryAxis>
    <RadzenValueAxis>
        <RadzenAxisTitle Text="Cantidad de Errores" />
    </RadzenValueAxis>
</RadzenChart>

<br />
<br />

<div class="container my-5">
    <div class="row">
        <div class="col">
            <RadzenText>Errores por obra</RadzenText>
            <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@Data" CategoryProperty="Date" Title="%" ValueProperty="Datos" RenderingOrder="1">
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" />
                <RadzenValueAxis Formatter="@Cantidad">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Cantidad de errores" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>

<br />
<br />
<br />
<br />

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    List<PersonalDTO> oRtaPersonal = new();
    PersonalDTO? persona = new();



    List<Ordentrabajo> oRtaTrabajo = new();
    List<Ordentrabajo> OrdenesSeleccionadas = new();

    Ordentrabajo? trabajo = new();

    List<Fallas>? fallas = new List<Fallas>();
    List<Fallas> FallasSeleccionadas = new List<Fallas>();


    List<EventosProduccion>? oRtaEvento = new();
    List<EventosProduccion>? ObrasTotales = new List<EventosProduccion>();





    List<DataItem> lista = new List<DataItem>();
    int? numeroMes;
    List<string> Etapas = new List<string> { "Oficina tecnica", "CC", "Punzonado", "Plegado", "CPL", "Soldadura", "Pulido", "CPU", "Pintura", "CP", "Armado", "CA", "Despacho" };

    Dictionary<string, int> EtapasCount = new Dictionary<string, int>();

    public static string ObtenerNombreMes(int numeroMes)
    {
        switch (numeroMes)
        {
            case 1:
                return "Ene";
            case 2:
                return "Feb";
            case 3:
                return "Mar";
            case 4:
                return "Abr";
            case 5:
                return "May";
            case 6:
                return "Jun";
            case 7:
                return "Jul";
            case 8:
                return "Ago";
            case 9:
                return "Sept";
            case 10:
                return "Oct";
            case 11:
                return "Nov";
            case 12:
                return "Dic";
            default:
                return "Número de mes inválido";
        }
    }
    bool allowFiltering = false;
    RadzenDataGrid<Fallas>? grid;

    List<string> Gravedad = new List<string>
    {
        "Ninguno","Leve","Moderado", "Grave"
    };
    string? GravedadSeleccionada;
    string? gravedad;


    int? TotalErrores;
    int? cantidadErrores;
    int? cantidadObras;
    string? porcentajeErrores;

    int? horasTotales= 0;
    int? horaComenzar = 0;

    int añoActual;
    DateTime? FechaDesde = DateTime.Now;
    DateTime? FechaHasta = DateTime.Now;
    int? lenghtGraphic;

    class DataItem
    {
        public string Date { get; set; }
        public double Datos { get; set; }
    }


    DataItem[] Data;


    string Cantidad(object value)
    {
        return ((double)value).ToString("", CultureInfo.CreateSpecificCulture("Cantidad"));
    }



    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {

        añoActual = DateTime.Now.Year;

        FechaDesde = new DateTime(añoActual, 1, 1);
        lenghtGraphic = int.Parse(FechaHasta.Value.Month.ToString());


        var rta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");
        oRtaTrabajo = rta.List;
        var rta2 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta2.List.Where(x=>x.Activo==true).ToList();
        var rta3 = await http.GetFromJsonAsync<Respuesta<List<Fallas>>>("/api/fallas");
        fallas = rta3.List.OrderByDescending(x => x.fecha).ToList();

        var rta4 = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>("api/eventosproduccion");
        oRtaEvento = rta4.List;

        ObrasTotales = oRtaEvento;
        FallasSeleccionadas = fallas;
        OrdenesSeleccionadas = oRtaTrabajo;



        cantidadObras = (ObrasTotales.Count() / 2);
        cantidadErrores = (FallasSeleccionadas.Count());
        porcentajeErrores = ((FallasSeleccionadas.Count() * 100 / (ObrasTotales.Count() / 2)).ToString());
        // if (FechaDesde != null)
        // {
        //     ObrasTotales = ObrasTotales.Where(x => x.Fecha >= FechaDesde && x.Fecha <= FechaHasta).ToList();

        //     foreach (var i in ObrasTotales)
        //     {
        //         if (i.Tipo == "Comenzar")
        //         {
        //             horaComenzar = i.Fecha.Value.Hour;
        //         }
        //         else
        //         {
        //             if (i.Fecha.Value.Hour > horaComenzar)
        //             {
        //                 horasTotales = horasTotales + i.Fecha.Value.Hour - horaComenzar;
        //             }
        //             horaComenzar = 0;
        //         }
        //     }
        // }



        // cargarOperario(2);



        StateHasChanged();

    }

    public void EliminarFiltros()
    {
        FallasSeleccionadas = fallas;
        OrdenesSeleccionadas = oRtaTrabajo;
        GravedadSeleccionada = "Ninguno";
        FechaDesde = new DateTime(añoActual, 1, 1);
        persona = new PersonalDTO();
        trabajo = new Ordentrabajo();

    }



    // public void cargarOperario(int filtro)
    // {
    //     lista.Clear();
    //     FallasSeleccionadas = fallas;
    //     GravedadSeleccionada = gravedad;
    //     OrdenesSeleccionadas = oRtaTrabajo;
    //     ObrasTotales = oRtaEvento;
    //     horasTotales = 0;



    //     if (persona != null)
    //     {
    //         FallasSeleccionadas = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();

    //         ObrasTotales = ObrasTotales.Where(x => x.Operario == persona.Id).ToList();

    //         OrdenesSeleccionadas = OrdenesSeleccionadas.Where(orden => FallasSeleccionadas.Any(falla => falla.OT == orden.Id)).ToList();

    //         if(FechaDesde != null)
    //         {


    //             ObrasTotales = ObrasTotales.Where(x => x.Fecha >= FechaDesde && x.Fecha <= FechaHasta).ToList();

    //             foreach(var i in ObrasTotales)
    //             {
    //                 if (i.Tipo == "Comenzar")
    //                 {
    //                     horaComenzar = i.Fecha.Value.Hour;


    //                 }
    //                 else
    //                 {
    //                     if(i.Fecha.Value.Hour > horaComenzar)
    //                     {
    //                         horasTotales = horasTotales + i.Fecha.Value.Hour - horaComenzar;
    //                     }


    //                     horaComenzar = 0;
    //                 }
    //             }
    //         }

    //     }
    //     if (filtro == 1)
    //     {
    //         trabajo = null;
    //         gravedad = null;
    //     }
    //     else 
    //     {
    //         if (GravedadSeleccionada != null)
    //         {
    //             if (GravedadSeleccionada == "Ninguno")
    //             {
    //                 EliminarFiltros();
    //             }
    //             else
    //             {
                    
    //             FallasSeleccionadas = FallasSeleccionadas.Where(x => x.gravedad == GravedadSeleccionada).ToList();
    //             }
    //         }
    //         if (trabajo != null)
    //         {

    //             FallasSeleccionadas = FallasSeleccionadas.Where(x => x.OT == trabajo.Id).ToList();

    //             ObrasTotales = ObrasTotales.Where(x => x.Ot == trabajo.Id).ToList();
    //         }


    //     }




    //     if(FechaDesde != null && FechaHasta != null)
    //     {
    //         FallasSeleccionadas = FallasSeleccionadas.Where(x => x.fecha >= FechaDesde && x.fecha <= FechaHasta).ToList();
    //     }


    //     var erroresEmpleados = FallasSeleccionadas;
    //     if(persona != null)
    //     {
    //         erroresEmpleados = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();


    //     }



    //     if ((FechaHasta - FechaDesde).Value.TotalDays <= 30)
    //     {

    //         for (int i = 1; i <= ((FechaHasta - FechaDesde).Value.Days); i++)
    //         {



    //             lista.Add(
    //                 new DataItem
    //                 {

    //                     Date = ((i.ToString() +"/"+ FechaDesde.Value.Month.ToString())),
    //                     Datos = erroresEmpleados.Where(x => x.fecha.Value.Day == i).Count()
    //                 }
    //             );
    //         }
    //         Data = lista.ToArray();
    //     }
    //     else
    //     {
    //         erroresEmpleados = erroresEmpleados.Where(x => x.fecha <= FechaHasta && x.fecha >= FechaDesde).ToList();




    //         for (int i = FechaDesde.Value.Month; i <= FechaHasta.Value.Month; i++)
    //         {

    //             string nombreMes = ObtenerNombreMes(i);
    //             lista.Add(
    //                 new DataItem
    //                     {
    //                         Date = nombreMes,
    //                         Datos = erroresEmpleados.Where(x => x.fecha.Value.Month == i).Count()
    //                     }
    //             ); 
    //         }
    //         Data = lista.ToArray();

    //     }


    //     foreach (var falla in fallas) // Suponiendo que fallas es una colección de tus datos de errores
    //     {
    //         var etapas = falla.etapa.Split(',').Select(e => e.Trim());

    //         foreach (var etapa in etapas)
    //         {
    //             if (EtapasCount.ContainsKey(etapa))
    //             {
    //                 EtapasCount[etapa]++;
    //             }
    //             else
    //             {
    //                 EtapasCount[etapa] = 1;
    //             }
    //         }
    //     }
    // }  

    public void cargarOperario(int filtro)
    {
        lista.Clear();
        FallasSeleccionadas = fallas;
        GravedadSeleccionada = gravedad;
        OrdenesSeleccionadas = oRtaTrabajo;
        ObrasTotales = oRtaEvento;
        horasTotales = 0;

        // Filtrar por persona si está seleccionada
        if (persona != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();
            ObrasTotales = ObrasTotales.Where(x => x.Operario == persona.Id).ToList();
            OrdenesSeleccionadas = OrdenesSeleccionadas.Where(orden => FallasSeleccionadas.Any(falla => falla.OT == orden.Id)).ToList();

            // Filtrar por rango de fechas
            if (FechaDesde != null)
            {
                ObrasTotales = ObrasTotales.Where(x => x.Fecha >= FechaDesde && x.Fecha <= FechaHasta).ToList();

                foreach (var i in ObrasTotales)
                {
                    if (i.Tipo == "Comenzar")
                    {
                        horaComenzar = i.Fecha.Value.Hour;
                    }
                    else
                    {
                        if (i.Fecha.Value.Hour > horaComenzar)
                        {
                            horasTotales = horasTotales + i.Fecha.Value.Hour - horaComenzar;
                        }
                        horaComenzar = 0;
                    }
                }
            }
        }

        // Eliminar filtros si se selecciona "ninguno"
        if (filtro == 1)
        {
            trabajo = null;
            gravedad = null;
        }
        else
        {
            // Filtrar por gravedad
            if (GravedadSeleccionada != null && GravedadSeleccionada != "Ninguno")
            {
                FallasSeleccionadas = FallasSeleccionadas.Where(x => x.gravedad == GravedadSeleccionada).ToList();
            }

            // Filtrar por trabajo
            if (trabajo != null)
            {
                FallasSeleccionadas = FallasSeleccionadas.Where(x => x.OT == trabajo.Id).ToList();
                ObrasTotales = ObrasTotales.Where(x => x.Ot == trabajo.Id).ToList();
            }
        }

        // Filtrar por rango de fechas
        if (FechaDesde != null && FechaHasta != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.fecha >= FechaDesde && x.fecha <= FechaHasta).ToList();
        }

        // Filtrar errores por empleado
        var erroresEmpleados = FallasSeleccionadas;
        if (persona != null)
        {
            erroresEmpleados = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();
        }

        // Cargar gráficos según el rango de fechas (días o meses)
        if ((FechaHasta - FechaDesde).Value.TotalDays <= 30)
        {
            // Agregar datos por día si el rango es de 30 días o menos
            for (int i = 1; i <= ((FechaHasta - FechaDesde).Value.Days); i++)
            {
                lista.Add(
                    new DataItem
                        {
                            Date = (i.ToString() + "/" + FechaDesde.Value.Month.ToString()),
                            Datos = erroresEmpleados.Where(x => x.fecha.Value.Day == i).Count()
                        }
                );
            }
            Data = lista.ToArray();
        }
        else
        {
            // Agregar datos por mes si el rango es mayor a 30 días
            erroresEmpleados = erroresEmpleados.Where(x => x.fecha <= FechaHasta && x.fecha >= FechaDesde).ToList();

            for (int i = FechaDesde.Value.Month; i <= FechaHasta.Value.Month; i++)
            {
                string nombreMes = ObtenerNombreMes(i);
                lista.Add(
                    new DataItem
                        {
                            Date = nombreMes,
                            Datos = erroresEmpleados.Where(x => x.fecha.Value.Month == i).Count()
                        }
                );
            }
            Data = lista.ToArray();
        }

        // Contar las etapas de las fallas para gráficos adicionales
        foreach (var falla in fallas)
        {
            var etapas = falla.etapa.Split(',').Select(e => e.Trim());

            foreach (var etapa in etapas)
            {
                if (EtapasCount.ContainsKey(etapa))
                {
                    EtapasCount[etapa]++;
                }
                else
                {
                    EtapasCount[etapa] = 1;
                }
            }
        }

        // Calcular cantidad total de errores
        TotalErrores = erroresEmpleados.Count;
        StateHasChanged();
    }





    public async Task Fecha()
    {
        if (FechaDesde > FechaHasta)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "La primer fecha es mayor a la segunda ",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"
                });

        }
        else{
            cargarOperario(2);
        }
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }



    public async Task Falla()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddFallas>("Indique la falla/detalle", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {

            await Get();
        }


    }
           // @*  int errores = erroresEmpleados.Where(x => x.fecha.Value.Month == DateTime.Now.Month).Count();
           //  DateTime dateFromDatabase = DateTime.Parse("2024-04-30"); *@
}