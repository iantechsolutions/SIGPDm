@page "/estadistica/empleados"

@using System.Globalization
@using System;
@using System.Drawing.Printing;
@using System.Windows;
@inject IJSRuntime _js



<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        body {
            font-size: 7px !important;
            margin: 0;
            padding: 0;
            margin-bottom: 5px;
        }

        .radzen-datagrid table {
            border: none;
        }

            .radzen-datagrid table tr td,
            .radzen-datagrid table tr th {
                border: none;
            }

        .print-small-text {
            font-size: 8px; 
        }
        .texto {
            font-size: 8px !important;
        }

        .sidebar {
            display: none !important;
        }

        .print {
            margin-top: 3px !important;
            overflow: hidden;
        }


        br {
            display: none !important;
        }

    }
</style>



<div class="row align-items-end no-print">
    <div class="col-4">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px"></RadzenText>
        <RadzenButton Variant="Variant.Text" class="rz-text-primary-color rz-background-color-primary-lighter" Text="Agregar falla/detalle" Click="@(() => Falla())" />
    </div>
    
    <div class="col-4">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px"></RadzenText>
        <button class="btn btn-outline-success w-100" @onclick="() => EliminarFiltros()">Eliminar filtros</button>
    </div> 
    
    <!-- Selección de periodo -->
    <div class="col-4">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">SELECCIONE EL PERIODO</RadzenText>
        <div class="row">
            <div class="col-6">
                <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaDesde" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-100" Change="@(args => cargarOperario())" />
            </div>
            <div class="col-6">
                <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaHasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-100" Change="@(args => cargarOperario())" />
            </div>
        </div>
    </div>
</div>

<br />

<div class="no-print" style="display: flex; justify-content: space-between; align-items: center; padding: 10px;">
    <RadzenText style="font-weight: bold; font-size: 4vh;">
        Datos Generales periodo @(FechaDesde?.ToString("MMMM") ?? "") - @(FechaHasta?.ToString("MMMM") ?? "")
    </RadzenText>
</div>

<br />

@if (oRtaEvento != null && FallasSeleccionadas != null)
{
    <div class="no-print" style="display: flex; justify-content: space-between; padding: 10px;">
        <!-- Tarjetas con sombras -->
        <div style="text-align: center; flex: 1; margin: 4px; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);" class="card">
            <RadzenText style="font-weight: bold; font-size: 2.5vh;">Cantidad de obras</RadzenText>
            <RadzenText style="font-size: 2vh;">@cantidadObrasGral</RadzenText>
        </div>

        <div style="text-align: center; flex: 1; margin: 4px; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);" class="card">
            <RadzenText style="font-weight: bold; font-size: 2.5vh;">Errores totales</RadzenText>
            <RadzenText style="font-size: 2vh;">@TotalErroresGral</RadzenText>
        </div>

        <div style="text-align: center; flex: 1; margin: 4px; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);" class="card">
            <RadzenText style="font-weight: bold; font-size: 2.5vh;">Porcentaje de obras terminadas</RadzenText>
            <RadzenText style="font-size: 2vh;">@obrasTerminadas %</RadzenText>
        </div>

        <div style="text-align: center; flex: 1; margin: 4px; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);" class="card">
            <RadzenText style="font-weight: bold; font-size: 2.5vh;">Horas trabajadas</RadzenText>
            <RadzenText style="font-size: 2vh;">@horasTrabajadas %</RadzenText>
        </div>
    </div>
}
else
{
    <br />
    <RadzenText style="font-size: 2.5vh;">Seleccione un empleado o muestre los datos generales</RadzenText>
    <br />
}

<br />

<!-- Estadísticas de fallas con sombras -->
<div class="flex-column card no-print" style="width: 100%; height: auto; box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2); ">
    <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12" Style="width: 100%;" AlignItems="AlignItems.Center">
        <RadzenCard Variant="Variant.Outlined" Style="width: 100%;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" Wrap="FlexWrap.Wrap">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Mostrar etiquetas de datos" Component="dataLabels" />
            </RadzenStack>
        </RadzenCard>

        <RadzenRow Style="display: flex; justify-content: space-between; flex-wrap: wrap; gap: 1rem; width: 100%;">
            @if (fallasPorGravedad != null)
            {

            <RadzenColumn xs="12" md="4">
                <RadzenText>Gravedad</RadzenText>
                <RadzenStack Style="width: 100%; max-width: 100%;">
                    <RadzenChart SeriesClick=@OnSeriesClick>
                        <RadzenPieSeries Data="@fallasPorGravedad" CategoryProperty="Gravedad" ValueProperty="CantidadFallas">
                            <RadzenSeriesDataLabels Visible="@showDataLabels" />
                        </RadzenPieSeries>
                    </RadzenChart>
                </RadzenStack>
            </RadzenColumn>
            }

            <!-- Empleados con más fallas -->
            <RadzenColumn xs="12">
                <RadzenText>Empleados con más fallas</RadzenText>
                <RadzenStack Style="width: 100%; max-width: 1000px;">
                    <RadzenCard Style="box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);">
                        <h3>Empleados con más fallas ⚠️</h3>
                        @if (empleadosConMasFallas != null)
                        {
                       
                        @foreach (var empleado in empleadosConMasFallas)
                        {
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; min-height: 30px;">
                                <RadzenText style="font-size: 1.5vh;">@empleado.Nombre</RadzenText>
                                <RadzenText style="font-size: 1.5vh;">@empleado.CantidadFallas</RadzenText>
                            </div>
                        }
                        }

                    </RadzenCard>
                </RadzenStack>
            </RadzenColumn>

            <RadzenColumn xs="12">
                <RadzenText>Empleados con menos fallas</RadzenText>
                <RadzenStack Style="width: 100%; max-width: 1000px;">
                    <RadzenCard Style="box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);">
                        <h3>Empleados con menos fallas ⭐ </h3>
                        @if(empleadosConMenosFallas != null){

                        @foreach (var empleado in empleadosConMenosFallas)
                        {
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; min-height: 30px;">
                                <RadzenText style="font-size: 1.5vh;">@empleado.Nombre</RadzenText>
                                <RadzenText style="font-size: 1.5vh;">@empleado.CantidadFallas</RadzenText>
                            </div>
                        }
                        }
                    </RadzenCard>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
</div>




<br />

<div class="row no-print">
    <!-- Primera columna: Errores por Etapa -->
    <div class="col-6">
        <RadzenText>Errores por etapa</RadzenText>
        @if (EtapasCount != null && EtapasCount.Count > 0)
        {
            
        <RadzenChart>
            <RadzenColumnSeries Data="@(EtapasCount.Select(ec => new { Etapa = ec.Key, Cantidad = ec.Value }))"
                                CategoryProperty="Etapa"
                                ValueProperty="Cantidad"
                                Title=""
                                StrokeWidth="4">
            </RadzenColumnSeries>
            <RadzenCategoryAxis Padding="20">
                <RadzenAxisTitle Text="Etapa" />
            </RadzenCategoryAxis>
            <RadzenValueAxis>
                <RadzenAxisTitle Text="Cantidad" />
            </RadzenValueAxis>
            </RadzenChart>
        }
        else
        {
            <RadzenText>No hay errores existentes</RadzenText>
        }
    </div>

    <!-- Segunda columna: Errores por Obra -->
    <div class="col-6">
        <RadzenText>Errores por obra</RadzenText>
        @if (Data != null && Data.Length > 0)
        {
        <RadzenChart>
            <RadzenLineSeries Smooth="true" Data="@Data" CategoryProperty="Date" Title="%" ValueProperty="Datos" RenderingOrder="1">
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" />
            <RadzenValueAxis Formatter="@Cantidad">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Cantidad de errores" />
            </RadzenValueAxis>
        </RadzenChart>
        }
        else
        {
        <RadzenText>No hay errores existentes</RadzenText>
        }
    </div>
</div>

<br />
<br />
@if (FallasSeleccionadas != null)
    {
    <div class="row no-print align-items-end">
        @if (oRtaPersonal != null && oRtaPersonal.Count > 0)
        {
            <!-- Columna 1: Encontrar por personal y dropdown -->
            <div class="col-4 d-flex flex-column">
                <RadzenText TextStyle="TextStyle.Overline" class="no-print  rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 12px">
                    Encontrar por personal
                </RadzenText>
                <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                        Data=@(oRtaPersonal) Style="width: 100%" AllowColumnResize="true" @bind-Value="persona"
                                        TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start"
                                        Change="@(args => SeleccionarPersona())">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                        <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="40%">
                            <Template Context="data">
                                @if (data.Nombres != null)
                                {
                                    <a>@data.Nombres @data.Apellido</a>
                                }
                            </Template>
                        </RadzenDropDownDataGridColumn>
                        <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="30%" />
                    </Columns>
                </RadzenDropDownDataGrid>
            </div>

            <!-- Columna 2: Fechas -->
            @if (persona != null)
            {
                <div class="col-4 d-flex flex-column">
                    <div class="row">
                        <div class="col-6">
                            <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaDesdePersona" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-100" Change="@(args => SeleccionarPersona())" />
                        </div>
                        <div class="col-6">
                            <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaHastaPersona" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-100" Change="@(args => SeleccionarPersona())" />
                        </div>
                    </div>
                </div>

                <!-- Columna 3: Botón de imprimir -->
                <div class="col-4 d-flex flex-column">
                    <div style="display:flex; flex-direction:row; justify-content:space-between;">
                        <button class="btn btn-outline-success no-print" style="float: right;" @onclick="Print">Imprimir reporte</button>
                    </div>
                </div>
            }
            else
            {
                <!-- Si no hay persona seleccionada, aún mostramos las columnas para alineación -->
                <div class="col-4"></div>
                <div class="col-4"></div>
            }
        }
        else
        {
            <p>No hay personal para mostrar</p>
        }
    </div>
    <br />
    <br />

    if(persona != null)
    {

        <div class="m-2">
            <div Style="padding: 0.5rem; width: 100%;">
                <RadzenText class="print-small-text" style="font-weight: bold; font-size: 2vh;">
                    Reporte general periodo @(FechaDesdePersona?.ToString("MMMM") ?? "") - @(FechaHastaPersona?.ToString("MMMM") ?? "")
                </RadzenText>
                <RadzenRow Style="gap: 0.5rem;">
                    

                    <RadzenColumn md="4">
                        <div class="d-flex flex-column">
                            <RadzenText TextStyle="TextStyle.Overline" Class="mt-1 mb-0">Empleado</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b> @persona.Nombres @persona.Apellido, @persona.Puesto</b></RadzenText>
                        </div>
                    </RadzenColumn>

                    <RadzenColumn md="4">
                        <div class="d-flex flex-column">
                            <RadzenText TextStyle="TextStyle.Overline" Class="mt-1 mb-0">Obras participadas</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b>@cantidadObrasGral</b></RadzenText>
                        </div>
                    </RadzenColumn>

                    <RadzenColumn md="4">
                        <div class="d-flex flex-column">
                            <RadzenText TextStyle="TextStyle.Overline" Class="mt-1 mb-0">Porcentaje de errores</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b>@porcentajeErroresGral %</b></RadzenText>
                        </div>
                    </RadzenColumn>
                </RadzenRow>

                <!-- Conteo de fallas -->
                <div Style="margin-top: 1rem; padding: 0.5rem;">
                    @if (fallas.Count() > 0)
                    {
                        <RadzenRow Style="gap: 0.5rem; margin-top: 0.5rem;">
                            <RadzenColumn md="3">
                                <div class="d-flex flex-column">
                                    <RadzenText TextStyle="TextStyle.Overline" Class="mb-0">Leves</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b>@fallasLeves</b></RadzenText>
                                </div>
                            </RadzenColumn>
                            <RadzenColumn md="3">
                                <div class="d-flex flex-column">
                                    <RadzenText TextStyle="TextStyle.Overline" Class="mb-0">Moderadas</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b>@fallasModeradas</b></RadzenText>
                                </div>
                            </RadzenColumn>

                            <RadzenColumn md="3">
                                <div class="d-flex flex-column">
                                    <RadzenText TextStyle="TextStyle.Overline" Class="mb-0">Graves</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b>@fallasGraves</b></RadzenText>
                                </div>
                            </RadzenColumn>
                            <RadzenColumn md="3">
                                <div class="d-flex flex-column">
                                    <RadzenText TextStyle="TextStyle.Overline" Class="mb-0">Total</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body1" Class="text-lg"><b>@totalFallas</b></RadzenText>
                                </div>
                            </RadzenColumn>
                        </RadzenRow>
                    }
                    else
                    {
                        <RadzenText>No hay fallas</RadzenText>
                    }
                </div>
            </div>
        </div>
    }

    if (FallasSeleccionadasEmpleado != null && persona != null){
        
    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                        AllowSorting="true" PageSize="60" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" Density="Density.Compact" ShowPagingSummary="true" @ref="grid"
                        Data="@FallasSeleccionadasEmpleado" TItem="Fallas" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or" Style="font-size: 12px!important;border: none !important;
            box-shadow: none !important;">
        <Columns>
            <RadzenDataGridColumn TItem="Fallas" Property="fecha" Title="Fecha" Width="15%">
                <Template Context="data">
                    @if (data.fecha.HasValue)
                    {
                        <a>@data.fecha.Value.ToString("dd/MM/yyyy")</a>
                    }
                </Template>
            </RadzenDataGridColumn>
                
            <RadzenDataGridColumn TItem="Fallas" Property="etapa" Title="Etapa" Width="15%" />
            <RadzenDataGridColumn TItem="Fallas" Property="gravedad" Title="Gravedad" Width="10%" />
            <RadzenDataGridColumn TItem="Fallas" Property="observacion" Title="Observacion" Width="30%">
                    <Template Context="data">
                        @if (data.observacion != null)
                        {
                            <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.observacion)</p>
                        }
                        else
                        {
                            <p>-</p>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Fallas" Property="correccion" Title="Correccion" Width="30%">
                    <Template Context="data">
                        @if (data.correccion != null)
                        {
                            <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.correccion)</p>
                        }
                        else
                        {
                            <p>-</p>
                        }
                    </Template>
                </RadzenDataGridColumn>

        </Columns>
        </RadzenDataGrid>

    }
    else
    {
        <h1>Seleccione empleado...</h1>
    }

    
    
}
else
{
    <p> No hay fallas para mostrar</p>

}
    
    
    
    
    
   @*  <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
     <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Fallas">

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@FallasSeleccionadas" TItem="Fallas" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Fallas" Property="fecha" Title="Fecha" Width="15%">
                            <Template Context="data">
                                @if (data.fecha.HasValue)
                                {
                                    <a>@data.fecha.Value.ToString("dd/MM/yyyy")</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Fallas" Property="personalNavigation.Nombres" Title="Nombres" Width="20%">
                            <Template Context="data">
                                @if (data.fecha.HasValue)
                                {
                                    <a>@data.personalNavigation.Nombres @data.personalNavigation.Apellido</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Fallas" Property="gravedad" Title="Gravedad" Width="10%" />
                        <RadzenDataGridColumn TItem="Fallas" Property="codigo" Title="OT" Width="15%" />
                        <RadzenDataGridColumn TItem="Fallas" Property="etapa" Title="Etapa" Width="10%" />
                        <RadzenDataGridColumn TItem="Fallas" Property="observacion" Title="Observacion" Width="30%" />


                    </Columns>
                </RadzenDataGrid>
    



</RadzenTabsItem>

            <RadzenTabsItem Text="Empleados">


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid2"
                                Data="@empleadosFallas" TItem="FallaEmpleado" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="FallaEmpleado" Property="EmpleadoId" Title="Id" Width="30%" />

                        <RadzenDataGridColumn TItem="FallaEmpleado" Property="Nombre" Title="Nombre" Width="30%" />

                        <RadzenDataGridColumn TItem="FallaEmpleado" Property="CantidadFallas" Title="Cantidad fallas" Width="30%" />
                        <RadzenDataGridColumn TItem="FallaEmpleado" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => Operario(null, data.EmpleadoId)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
       
                    </Columns>
                    </RadzenDataGrid>
                </RadzenTabsItem>

        </Tabs>
    </RadzenTabs> *@

<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    List<PersonalDTO>? oRtaPersonal = new();
    PersonalDTO? persona = new();



    // List<Ordentrabajo>? oRtaTrabajo = new();
    // List<Ordentrabajo>? OrdenesSeleccionadas = new();

    Ordentrabajo? trabajo = new();

    List<Fallas>? fallas = new List<Fallas>();
    List<Fallas>? FallasSeleccionadas = new List<Fallas>();
    List<Fallas>? FallasSeleccionadasEmpleado = new List<Fallas>();


    List<EventosProduccion>? oRtaEvento = new();
    List<EventosProduccion>? ObrasTotales = new List<EventosProduccion>();





    List<DataItem>? lista = new List<DataItem>();
    int? numeroMes;
    List<string> Etapas = new List<string> { "Oficina tecnica", "CC", "Punzonado", "Plegado", "CPL", "Soldadura", "Pulido", "CPU", "Pintura", "CP", "Armado", "CA", "Despacho" };

    Dictionary<string, int>? EtapasCount = new Dictionary<string, int>();





    bool showDataLabels = false;
    void OnSeriesClick(SeriesClickEventArgs args)
    {
        Console.WriteLine(args);
    }
    class FallaGravedad
    {
        public string? Gravedad { get; set; }
        public int? CantidadFallas { get; set; }
    }

    class FallaEmpleado
    {
        public int? EmpleadoId { get; set; }
        public int? CantidadFallas { get; set; }
        public string? Nombre { get; set; }
    }

    IEnumerable<FallaGravedad>? fallasPorGravedad;
    IEnumerable<FallaEmpleado>? empleadosConMasFallas;
    IEnumerable<FallaEmpleado>? empleadosConMenosFallas;
    IEnumerable<FallaEmpleado>? empleadosFallas;


    public static string ObtenerNombreMes(int numeroMes)
    {
        switch (numeroMes)
        {
            case 1:
                return "Ene";
            case 2:
                return "Feb";
            case 3:
                return "Mar";
            case 4:
                return "Abr";
            case 5:
                return "May";
            case 6:
                return "Jun";
            case 7:
                return "Jul";
            case 8:
                return "Ago";
            case 9:
                return "Sept";
            case 10:
                return "Oct";
            case 11:
                return "Nov";
            case 12:
                return "Dic";
            default:
                return "Número de mes inválido";
        }
    }
    bool allowFiltering = false;

    RadzenDataGrid<Fallas>? grid;
    RadzenDataGrid<FallaEmpleado>? grid2;




    int? TotalErroresGral;
    int? cantidadObrasGral;
    string? porcentajeErroresGral;

    int? TotalErrores;
    int? cantidadErrores;
    int? cantidadObras;
    string? porcentajeErrores;
    decimal? obrasTerminadas;
    int? horasTrabajadas;

    int? horasTotales= 0;
    int? horaComenzar = 0;

    int añoActual;
    DateTime? FechaDesde = DateTime.Now;
    DateTime? FechaHasta = DateTime.Now;


    DateTime? FechaDesdePersona = DateTime.Now;
    DateTime? FechaHastaPersona = DateTime.Now;


    int? lenghtGraphic;

    class DataItem
    {
        public string? Date { get; set; }
        public double? Datos { get; set; }
    }


    DataItem[]? Data;

    string Cantidad(object value)
    {
        return ((double)value).ToString("", CultureInfo.CreateSpecificCulture("Cantidad"));
    }




    int totalFallas = 0;
    int fallasLeves = 0;
    int fallasModeradas = 0;
    int fallasGraves = 0;






    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {

        añoActual = DateTime.Now.Year;
        var currentMouth = DateTime.Now.Month;
        FechaDesde = new DateTime(añoActual, 1, 1);
        FechaDesdePersona = new DateTime(añoActual, 9, 1);
        FechaHasta = DateTime.Now;

        lenghtGraphic = int.Parse(FechaHasta.Value.Month.ToString());

        persona = null;

        var rta2 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta2.List.Where(x => x.Activo == true).ToList();
        var rta3 = await http.GetFromJsonAsync<Respuesta<List<Fallas>>>("/api/fallas");
        fallas = rta3.List.OrderByDescending(x => x.fecha).ToList();
        fallas = fallas.Where(x => x.fecha >= FechaDesde && x.fecha <= FechaHasta).ToList();

        var rta4 = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>("api/eventosproduccion");
        oRtaEvento = rta4.List.Where(x=>x.Fecha >= FechaDesde).ToList();

        ObrasTotales = oRtaEvento;
        FallasSeleccionadas = fallas;

        cantidadObrasGral = (ObrasTotales.Count() / 2);
        TotalErroresGral = (FallasSeleccionadas.Count());
        porcentajeErroresGral = ((FallasSeleccionadas.Count() * 100 / (ObrasTotales.Count() / 2)).ToString());
        obrasTerminadas = ObrasTotales.Where(x => x.Etapa == "Despacho").Count() / 100 * cantidadObrasGral;

        fallasPorGravedad = FallasSeleccionadas
                    .GroupBy(f => f.gravedad)
                    .Select(g => new FallaGravedad
                        {
                            Gravedad = g.Key,
                            CantidadFallas = g.Count()
                        });



        var fallasPorEmpleado = FallasSeleccionadas
            .GroupBy(f => f.empleado)
            .Select(g => new FallaEmpleado
                {
                    EmpleadoId = g.Key,
                    CantidadFallas = g.Count(),
                    Nombre = (rta2.List.FirstOrDefault(x => x.Id == g.Key)?.Nombres + " " +  rta2.List.FirstOrDefault(x => x.Id == g.Key)?.Apellido) ?? "desconocido"
                })
            .OrderByDescending(e => e.CantidadFallas);

        empleadosFallas = fallasPorEmpleado;
        empleadosConMasFallas = fallasPorEmpleado.Take(5);
        empleadosConMenosFallas = fallasPorEmpleado.OrderBy(e => e.CantidadFallas).Take(5);

        if (FechaDesde != null)
        {
            ObrasTotales = ObrasTotales.Where(x => x.Fecha >= FechaDesde && x.Fecha <= FechaHasta).ToList();

            foreach (var i in ObrasTotales)
            {
                if (i.Tipo == "Comenzar")
                {
                    horaComenzar = i.Fecha.Value.Hour;
                }
                else
                {
                    if (i.Fecha.Value.Hour > horaComenzar)
                    {
                        horasTrabajadas = horasTrabajadas + i.Fecha.Value.Hour - horaComenzar;
                    }
                    horaComenzar = 0;
                }
            }
        }


        var erroresEmpleados = FallasSeleccionadas;


        if ((FechaHasta - FechaDesde).Value.TotalDays <= 30)
        {
            for (int i = 1; i <= ((FechaHasta - FechaDesde).Value.Days); i++)
            {
                lista.Add(
                    new DataItem
                        {
                            Date = (i.ToString() + "/" + FechaDesde.Value.Month.ToString()),
                            Datos = erroresEmpleados.Where(x => x.fecha.Value.Day == i).Count()
                        }
                );
            }
            Data = lista.ToArray();
        }
        else
        {
            erroresEmpleados = erroresEmpleados.Where(x => x.fecha <= FechaHasta && x.fecha >= FechaDesde).ToList();

            for (int i = FechaDesde.Value.Month; i <= FechaHasta.Value.Month; i++)
            {
                string nombreMes = ObtenerNombreMes(i);
                lista.Add(
                    new DataItem
                        {
                            Date = nombreMes,
                            Datos = erroresEmpleados.Where(x => x.fecha.Value.Month == i).Count()
                        }
                );
            }
            Data = lista.ToArray();
        }


        foreach (var falla in FallasSeleccionadas)
        {

            if(falla.etapa != null){

                var etapas = falla.etapa.Split(',').Select(e => e.Trim());

                foreach (var etapa in etapas)
                {
                    if (EtapasCount.ContainsKey(etapa))
                    {
                        EtapasCount[etapa]++;
                    }
                    else
                    {
                        EtapasCount[etapa] = 1;
                    }
                }
            }
        }

        TotalErrores = erroresEmpleados.Count;
        StateHasChanged();

    }




    public async Task SeleccionarPersona()
    {
        if (persona != null)
        {
            // Filtra las fallas basadas en la persona seleccionada
            FallasSeleccionadasEmpleado = fallas.Where(x => x.empleado == persona.Id && x.fecha >= FechaDesdePersona).ToList();
            var obTot = oRtaEvento.Where(x => x.Operario == persona.Id && x.Fecha >= FechaDesde).ToList();

            if(FechaDesdePersona != null && FechaHastaPersona != null)
            {
                FallasSeleccionadasEmpleado = FallasSeleccionadasEmpleado.Where(x=>x.fecha >= FechaDesdePersona && x.fecha <= FechaHastaPersona).ToList();
                obTot = obTot.Where(x => x.Fecha >= FechaDesdePersona && x.Fecha <= FechaHastaPersona).ToList();

            }

            // Calcula las métricas
            cantidadObrasGral = (obTot.Count() / 2);
            if (obTot.Count() != 0)
            {
                porcentajeErroresGral = ((FallasSeleccionadasEmpleado.Count() * 100 / (obTot.Count() / 2)).ToString());
            }

            // Actualiza los contadores
            totalFallas = FallasSeleccionadasEmpleado.Count();
            fallasLeves = FallasSeleccionadasEmpleado.Count(f => f.gravedad == "Leve");
            fallasModeradas = FallasSeleccionadasEmpleado.Count(f => f.gravedad == "Moderado");
            fallasGraves = FallasSeleccionadasEmpleado.Count(f => f.gravedad == "Grave");

            // Forzar el refresco de la interfaz de usuario
            StateHasChanged();
        }
    }



    public async void EliminarFiltros()
    {
        FallasSeleccionadas = fallas;
        // OrdenesSeleccionadas = oRtaTrabajo;
        // GravedadSeleccionada = "Ninguno";

        FechaDesde = new DateTime(añoActual, 1, 1);
        FechaHasta = DateTime.Now;
        lista.Clear();


       

        cargarOperario();

    }


    // public async Task Operario(PersonalDTO? e, int? id)
    // {

    //     int? newId = id;

    //     if (id == 0)
    //     {
    //         newId = e.Id;   
    //     }

    //     if (e != null || e.Id != 0)
    //     {


    //         Console.WriteLine("Persona", newId);
    //         var parameters = new ModalParameters();
    //         parameters.Add(nameof(InfoEmpleado.id), newId);
    //         var options = new ModalOptions()
    //         {
    //             Size = ModalSize.Medium

    //         };
    //         var formModal = Modal.Show<InfoEmpleado>("Informacion del empleado", parameters, options);
    //         var result = await formModal.Result;
    //         if (result.Cancelled)
    //         {
    //             Console.WriteLine("Modal was cancelled");
    //             e = null;
    //             persona = null;

    //         }
    //         else
    //         {
    //             e = null;
    //             persona = null;


    //         }            
    //     }
    // }




    public void cargarOperario()
    {
        lista.Clear();
        FallasSeleccionadas = fallas;
        ObrasTotales = oRtaEvento;
        horasTotales = 0;
        EtapasCount.Clear();

        if (FechaDesde != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.fecha >= FechaDesde && x.fecha <= FechaHasta).ToList();
            ObrasTotales = ObrasTotales.Where(x => x.Fecha >= FechaDesde && x.Fecha <= FechaHasta).ToList();
        }

        var erroresEmpleados = FallasSeleccionadas;

        cantidadObrasGral = (ObrasTotales.Count() / 2);
        TotalErroresGral = (FallasSeleccionadas.Count());
        if ((ObrasTotales.Count() / 2) > 0)
        {   
            porcentajeErroresGral = ((FallasSeleccionadas.Count() * 100 / (ObrasTotales.Count() / 2)).ToString());
        }
        obrasTerminadas = ObrasTotales.Where(x => x.Etapa == "Despacho").Count() / 100 * cantidadObrasGral;

       




        if (FechaDesde != null)
        {
            foreach (var i in ObrasTotales)
            {
                if (i.Tipo == "Comenzar")
                {
                    horaComenzar = i.Fecha.Value.Hour;
                }
                else
                {
                    if (i.Fecha.Value.Hour > horaComenzar)
                    {
                        horasTrabajadas += i.Fecha.Value.Hour - horaComenzar;
                    }
                    horaComenzar = 0;
                }
            }
        }



        fallasPorGravedad = FallasSeleccionadas
           .GroupBy(f => f.gravedad)
           .Select(g => new FallaGravedad
               {
                   Gravedad = g.Key,
                   CantidadFallas = g.Count()
               });

        var fallasPorEmpleado = FallasSeleccionadas
            .GroupBy(f => f.empleado)
            .Select(g => new FallaEmpleado
                {
                    EmpleadoId = g.Key,
                    CantidadFallas = g.Count(),
                    Nombre = (oRtaPersonal.FirstOrDefault(x => x.Id == g.Key)?.Nombres + " " + oRtaPersonal.FirstOrDefault(x => x.Id == g.Key)?.Apellido) ?? "desconocido"
                })
            .OrderByDescending(e => e.CantidadFallas);

        empleadosFallas = null;
        empleadosConMasFallas = null;
        empleadosConMenosFallas = null;

        empleadosFallas = fallasPorEmpleado;
        empleadosConMasFallas = fallasPorEmpleado.Take(5);
        empleadosConMenosFallas = fallasPorEmpleado.OrderBy(e => e.CantidadFallas).Take(5);
        
        
        
        
        
        
        
        
        
        
        
        
        
        double totalDiasSeleccionados = (FechaHasta - FechaDesde)?.TotalDays ?? 0;
        int diasEnMes = DateTime.DaysInMonth(FechaDesde.Value.Year, FechaDesde.Value.Month);
        int diaDelMes = FechaDesde.Value.Day;
        int diadelMeshASTA = FechaHasta.Value.Day;


        Console.WriteLine("Días seleccionados", totalDiasSeleccionados, diasEnMes, diaDelMes);



        if (totalDiasSeleccionados <= diasEnMes && FechaDesde.Value.Month == FechaHasta.Value.Month)
        {
            for (int i = diaDelMes; i <= diadelMeshASTA; i++)
            {
                DateTime diaActual = FechaDesde.Value.AddDays(i);
                Console.WriteLine("Llego", i);
                lista.Add(
                    new DataItem
                        {
                            Date = i.ToString(),
                            Datos = FallasSeleccionadas.Where(x => x.fecha.Value.Date == diaActual.Date).Count()
                        }
                );
            }
        }
        else
        {
            
        DateTime current = FechaDesde.Value;
        while (current <= FechaHasta.Value)
        {
            string nombreMes = ObtenerNombreMes(current.Month);
            int conteoFallas = erroresEmpleados.Where(x => x.fecha.Value.Year == current.Year && x.fecha.Value.Month == current.Month).Count();

            lista.Add(new DataItem
                {
                    Date = nombreMes,
                    Datos = conteoFallas
                });

            current = current.AddMonths(1); 
        }

        }
        Data = lista.ToArray();

        foreach (var falla in FallasSeleccionadas)
        {
            var etapas = falla.etapa.Split(',').Select(e => e.Trim());

            foreach (var etapa in etapas)
            {
                if (EtapasCount.ContainsKey(etapa))
                {
                    EtapasCount[etapa]++;
                }
                else
                {
                    EtapasCount[etapa] = 1;
                }
            }
        }







        TotalErrores = erroresEmpleados.Count;
        StateHasChanged();
    }





    public async Task Fecha()
    {
        if (FechaDesde > FechaHasta)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "La primer fecha es mayor a la segunda ",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"
                });

        }
        else{
            cargarOperario();
        }
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }



    public async Task Falla()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddFallas>("Indique la falla/detalle", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");

        }
        else
        {

        }


    }
 
    


    public async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}

