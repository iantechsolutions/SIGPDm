@page "/estadistica/empleados"

@using System.Globalization



<h3>Estadistica de empleados</h3>
<br />
<div class="card" style="padding: 5px;">
    @if (Data != null && persona != null)
    {
        <RadzenText Style="font-weight: 600;font-size: 3vh;"> @persona.Nombres @persona.Apellido </RadzenText>
        @if (ObrasTotales.Count() > 0 && @FallasSeleccionadas.Count() > 0)
        {

            <RadzenText> Cantidad de obras participadas: @(ObrasTotales.Count() / 2) </RadzenText>
        <RadzenText> Errores totales: @FallasSeleccionadas.Count()</RadzenText>
        <RadzenText> Porcentaje de errores: @((FallasSeleccionadas.Count() * 100 / (ObrasTotales.Count()/2)).ToString())% </RadzenText>
            <RadzenText> todas las horas trabajadas en periodo: @horasTotales</RadzenText>
        }
        else
        {
            <RadzenText> Cantidad de obras participadas: @(ObrasTotales.Count() / 2) </RadzenText>
            <RadzenText> Errores totales: @FallasSeleccionadas.Count()</RadzenText>
            <RadzenText> Porcentaje de errores: - </RadzenText>
            <RadzenText>Todas las horas trabajadas en periodo: @horasTotales</RadzenText>
        }


    }
    else
    {
        <br />
        <br />
        <RadzenText> Seleccione un empleado </RadzenText>
        <br />
        <br />
    }

</div>

<br />
<br />

            <h1 style="font-size: 14px;"> Seleccione el periodo</h1>
<br />
        <div class="row" style="width: 30%">
                <div class="col">

                     <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaDesde"  ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-40%" />
                </div>
                <div class="col">

                        <RadzenDatePicker TValue="DateTime?" @bind-Value="@FechaHasta" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-40%" />
                </div>
         </div>
<br />
        <div>

                        <RadzenButton  class="btn btn-outline-info btn-sm" Click="@(() => cargarOperario(2))">Cargar Fecha</RadzenButton>
        </div>
<br />
<br />



    <div class="container my-5">
        <div class="row">
            <div class="col">
                <RadzenText>Errores por obra</RadzenText>
                <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@Data" CategoryProperty="Date" Title="%" ValueProperty="Datos" RenderingOrder="1">
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" />
                    <RadzenValueAxis Formatter="@Cantidad">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Cantidad de errores" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>


<div class="row">
    <div class="col">
        @if (oRtaPersonal != null && oRtaPersonal.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Encontrar por personal</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(oRtaPersonal) Style="width: 50%" AllowColumnResize="true" @bind-Value="persona"
                                    TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start">
                <Columns>

                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="40%">
                     <Template Context="data">
                                    @if (data.Nombres != null)
                                    {
                                        <a>@data.Nombres @data.Apellido</a>
                                    }
                    </Template>
                    </RadzenDropDownDataGridColumn>
                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="30%" />

                </Columns>
            </RadzenDropDownDataGrid>
                    @if (persona != null)
                    {
                        <button class="btn btn-outline-success "  @onclick="() => cargarOperario(1)">Seleccionar</button>
                    }
               
        }
        else
        {
            <p> No hay personal para mostrar</p>
        }
        </div>

        <div class="col">
        <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Gravedad</RadzenText>
        <br />
        <RadzenDropDown class="form-control" TValue="string" Data=@Gravedad placeholder="" @bind-Value=@gravedad  Style="width: 50%"/>
        @if(gravedad != null)
        {   
        <button class="btn btn-outline-success " @onclick="() => cargarOperario(2)">Seleccionar</button>
        }
         </div>
    <div class="col">

        @if (oRtaTrabajo != null && oRtaTrabajo.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Encontrar por orden de trabajo</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="Ordentrabajo" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(OrdenesSeleccionadas) Style="width: 50%" AllowColumnResize="true" @bind-Value="trabajo"
                                    TextProperty="Codigo" AllowFilteringByAllStringColumns="true" class="float-start">
                <Columns>

                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="Codigo" Title="Codigo" Width="40%" />
                    <RadzenDropDownDataGridColumn Property="Estado" Title="Estado" Width="40%" />
                </Columns>
            </RadzenDropDownDataGrid>
            @if (trabajo != null && persona != null)
            {
                <button class="btn btn-outline-success " @onclick="() => cargarOperario(2)">Seleccionar</button>
            }

        }
        else
        {
            <p> No hay ordenes para mostrar</p>
        }
    </div>
</div>

<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />
<br />
<RadzenText>Listado de fallas</RadzenText>

<RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                Data="@FallasSeleccionadas" TItem="Fallas" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Fallas" Property="fecha" Title="fecha" Width="15%">
            <Template Context="data">
                @if (data.fecha.HasValue)
                {
                    <a>@data.fecha.Value.ToString("dd/MM/yyyy")</a>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Fallas" Property="personalNavigation.Nombres" Title="Nombres" Width="20%">
        <Template Context="data">
                @if (data.fecha.HasValue)
                {
                    <a>@data.personalNavigation.Nombres @data.personalNavigation.Apellido</a>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Fallas" Property="gravedad" Title="Gravedad" Width="10%" />
        <RadzenDataGridColumn TItem="Fallas" Property="codigo" Title="OT" Width="15%" />
        <RadzenDataGridColumn TItem="Fallas" Property="etapa" Title="Etapa" Width="10%" />
        <RadzenDataGridColumn TItem="Fallas" Property="observacion" Title="Observacion" Width="30%" />

       
    </Columns>
</RadzenDataGrid>
<br />
<br />
<br />
<br />

@code {
    List<PersonalDTO> oRtaPersonal;
    List<Ordentrabajo> oRtaTrabajo;


    List<Ordentrabajo> OrdenesSeleccionadas;

    List<EventosProduccion>? ObrasTotales;
    List<EventosProduccion>? oRtaEvento;

    List<Fallas>? fallas;
    List<Fallas> FallasSeleccionadas;


    List<DataItem> lista = new List<DataItem>();

    PersonalDTO? persona;
    Ordentrabajo? trabajo;


    int? numeroMes;

    public static string ObtenerNombreMes(int numeroMes)
    {
        switch (numeroMes)
        {
            case 1:
                return "Ene";
            case 2:
                return "Feb";
            case 3:
                return "Mar";
            case 4:
                return "Abr";
            case 5:
                return "May";
            case 6:
                return "Jun";
            case 7:
                return "Jul";
            case 8:
                return "Ago";
            case 9:
                return "Sept";
            case 10:
                return "Oct";
            case 11:
                return "Nov";
            case 12:
                return "Dic";
            default:
                return "Número de mes inválido";
        }
    }
    bool allowFiltering = false;
    RadzenDataGrid<Fallas>? grid;

    List<string> Gravedad = new List<string>
    {
        "Leve","Moderado", "Grave"
    };
    string? GravedadSeleccionada;
    string? gravedad;
    int? horasTotales= 0;
    int? horaComenzar = 0;

    int añoActual;
    DateTime? FechaDesde = DateTime.Now;
    DateTime? FechaHasta = DateTime.Now;
    int? lenghtGraphic;

    class DataItem
    {
        public string Date { get; set; }
        public double Datos { get; set; }
    }

    

    DataItem[] Data;


    string Cantidad(object value)
    {
        return ((double)value).ToString("", CultureInfo.CreateSpecificCulture("Cantidad"));
    }



    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {

        añoActual = DateTime.Now.Year;

        FechaDesde = new DateTime(añoActual, 1, 1);
        lenghtGraphic = int.Parse(FechaHasta.Value.Month.ToString());


        var rta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");
        oRtaTrabajo = rta.List;
        var rta2 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta2.List;
        var rta3 = await http.GetFromJsonAsync<Respuesta<List<Fallas>>>("/api/fallas");
        fallas = rta3.List;

        var rta4 = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>("api/eventosproduccion");
        oRtaEvento = rta4.List;

        ObrasTotales = oRtaEvento;
        FallasSeleccionadas = fallas;
        OrdenesSeleccionadas = oRtaTrabajo;

        cargarOperario(2);

        StateHasChanged();

    }

    public void cargarOperario(int numero)
    {
        lista.Clear();
        FallasSeleccionadas = fallas;
        GravedadSeleccionada = gravedad;
        OrdenesSeleccionadas = oRtaTrabajo;
        ObrasTotales = oRtaEvento;
        horasTotales = 0;



        if (persona != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();

            ObrasTotales = ObrasTotales.Where(x => x.Operario == persona.Id).ToList();

            OrdenesSeleccionadas = OrdenesSeleccionadas.Where(orden => FallasSeleccionadas.Any(falla => falla.OT == orden.Id)).ToList();

            if(FechaDesde != null)
            {
                Console.WriteLine(ObrasTotales.Count());

              
                ObrasTotales = ObrasTotales.Where(x => x.Fecha >= FechaDesde && x.Fecha <= FechaHasta).ToList();
                
            foreach(var i in ObrasTotales)
            {
                if (i.Tipo == "Comenzar")
                {
                    horaComenzar = i.Fecha.Value.Hour;


                }
                else
                {
                    if(i.Fecha.Value.Hour > horaComenzar)
                    {
                        horasTotales = horasTotales + i.Fecha.Value.Hour - horaComenzar;
                    }


                    horaComenzar = 0;
                }
            }
            }

        }
        if (numero == 1)
        {
            trabajo = null;
            gravedad = null;
        }
        else 
        {
            if (trabajo != null)
            {

                FallasSeleccionadas = FallasSeleccionadas.Where(x => x.OT == trabajo.Id).ToList();

                ObrasTotales = ObrasTotales.Where(x => x.Ot == trabajo.Id).ToList();
            }
            if (GravedadSeleccionada != null)
            {
                FallasSeleccionadas = FallasSeleccionadas.Where(x => x.gravedad == GravedadSeleccionada).ToList();
            }
        }




        if(FechaDesde !=null && FechaHasta != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.fecha >= FechaDesde && x.fecha <= FechaHasta).ToList();
        }


        var erroresEmpleados = FallasSeleccionadas;
        if(persona != null)
        {
            erroresEmpleados = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();


        }



        if ((FechaHasta - FechaDesde).Value.TotalDays <= 30)
        {

            for (int i = 1; i <= ((FechaHasta - FechaDesde).Value.Days); i++)
            {



                lista.Add(
                    new DataItem
                    {
                        
                        Date = ((i.ToString() +"/"+ FechaDesde.Value.Month.ToString())),
                        Datos = erroresEmpleados.Where(x => x.fecha.Value.Day == i).Count()
                    }
                );
            }
            Data = lista.ToArray();
        }
        else
        {
            erroresEmpleados = erroresEmpleados.Where(x => x.fecha <= FechaHasta && x.fecha >= FechaDesde).ToList();




            for (int i = FechaDesde.Value.Month; i <= FechaHasta.Value.Month; i++)
            {

                string nombreMes = ObtenerNombreMes(i);
                lista.Add(
                    new DataItem
                        {
                            Date = nombreMes,
                            Datos = erroresEmpleados.Where(x => x.fecha.Value.Month == i).Count()
                        }
                ); 
            }
            Data = lista.ToArray();

        }



    }  






    public async Task Fecha()
    {
        if (FechaDesde > FechaHasta)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "La primer fecha es mayor a la segunda ",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"
                });

        }
        else{

            
            cargarOperario(2);
        }
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
           // @*  int errores = erroresEmpleados.Where(x => x.fecha.Value.Month == DateTime.Now.Month).Count();
           //  DateTime dateFromDatabase = DateTime.Parse("2024-04-30"); *@
}