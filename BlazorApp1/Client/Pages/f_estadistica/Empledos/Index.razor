@page "/estadistica/empleados"

@using System.Globalization



<h3>Estadistica de empleados</h3>
<br />
<div class="card" style="padding: 5px;">
    @if (Data != null && persona != null)
    {
        <RadzenText Style="font-weight: 600;font-size: 3vh;"> @persona.Nombres @persona.Apellido </RadzenText>
        @if (ObrasTotales.Count() > 0 && @FallasSeleccionadas.Count() > 0)
        {
            
        <RadzenText> Obras terminadas: @(ObrasTotales.Count()/2) </RadzenText>
        <RadzenText> Errores totales: @FallasSeleccionadas.Count()</RadzenText>
        <RadzenText> Porcentaje de errores: @((FallasSeleccionadas.Count() * 100 / (ObrasTotales.Count()/2)).ToString())% </RadzenText>
            <RadzenText> Horas trabajadas: @horasTotales</RadzenText>
        }
        else
        {
            <RadzenText> Obras terminadas: @(ObrasTotales.Count() / 2) </RadzenText>
            <RadzenText> Errores totales: @FallasSeleccionadas.Count()</RadzenText>
            <RadzenText> Porcentaje de errores: - </RadzenText>
            <RadzenText> Horas trabajadas: @horasTotales</RadzenText>
        }


    }
    else
    {
        <RadzenText> Seleccione un empleado </RadzenText>
        <RadzenText> Cantidad de errores: </RadzenText>
        <RadzenText> Obras trabajadas:  </RadzenText>
        <RadzenText> Porcentaje de errores: </RadzenText>

    }

</div>


    <div class="container my-5">
        <div class="row">
            <div class="col">
                <RadzenText>Errores por obra</RadzenText>
                <RadzenChart>
                    <RadzenLineSeries Smooth="true" Data="@Data" CategoryProperty="Date" Title="%" ValueProperty="Datos" RenderingOrder="1">
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" />
                    <RadzenValueAxis Formatter="@Cantidad">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Cantidad de errores" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>


<div class="row">
    <div class="col">
        @if (oRtaPersonal != null && oRtaPersonal.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Encontrar por personal</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(oRtaPersonal) Style="width: 50%" AllowColumnResize="true" @bind-Value="persona"
                                    TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start">
                <Columns>

                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="40%">
                     <Template Context="data">
                                    @if (data.Nombres != null)
                                    {
                                        <a>@data.Nombres @data.Apellido</a>
                                    }
                    </Template>
                    </RadzenDropDownDataGridColumn>
                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="30%" />

                </Columns>
            </RadzenDropDownDataGrid>
                    @if (persona != null)
                    {
                        <button class="btn btn-outline-success "  @onclick="cargarOperario">Seleccionar</button>
                    }
               
        }
        else
        {
            <p> No hay personal para mostrar</p>
        }
        </div>

        <div class="col">

        @if (oRtaTrabajo != null && oRtaTrabajo.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Encontrar por orden de trabajo</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="Ordentrabajo" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(OrdenesSeleccionadas) Style="width: 50%" AllowColumnResize="true" @bind-Value="trabajo"
                                    TextProperty="Codigo" AllowFilteringByAllStringColumns="true" class="float-start">
                <Columns>

                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="Codigo" Title="Codigo" Width="40%" />
                    <RadzenDropDownDataGridColumn Property="Estado" Title="Estado" Width="40%" />
                </Columns>
            </RadzenDropDownDataGrid>
            @if (trabajo != null && persona != null)
            {
                <button class="btn btn-outline-success " @onclick="cargarOperario">Seleccionar</button>
            }

        }
        else
        {
            <p> No hay ordenes para mostrar</p>
        }
    </div>
</div>

<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />
<br />
<RadzenText>Listado de fallas</RadzenText>

<RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                Data="@FallasSeleccionadas" TItem="Fallas" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Fallas" Property="fecha" Title="fecha" Width="15%">
            <Template Context="data">
                @if (data.fecha.HasValue)
                {
                    <a>@data.fecha.Value.ToString("dd/MM/yyyy")</a>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Fallas" Property="personalNavigation.Nombres" Title="Nombres" Width="25%">
        <Template Context="data">
                @if (data.fecha.HasValue)
                {
                    <a>@data.personalNavigation.Nombres @data.personalNavigation.Apellido</a>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Fallas" Property="codigo" Title="OT" Width="15%" />
        <RadzenDataGridColumn TItem="Fallas" Property="etapa" Title="Etapa" Width="10%" />
        <RadzenDataGridColumn TItem="Fallas" Property="observacion" Title="Observacion" Width="40%" />

       
    </Columns>
</RadzenDataGrid>
<br />
<br />
<br />
<br />

@code {
    List<PersonalDTO> oRtaPersonal;
    List<Ordentrabajo> oRtaTrabajo;
    List<Ordentrabajo> OrdenesSeleccionadas;

    List<EventosProduccion>? ObrasTotales;
    List<EventosProduccion>? oRtaEvento;

    List<Fallas>? fallas;
    List<Fallas> FallasSeleccionadas;


    PersonalDTO? persona;
    Ordentrabajo? trabajo;

    bool allowFiltering = false;
    RadzenDataGrid<Fallas>? grid;

    int? horasTotales= 0;

    class DataItem
    {
        public string Date { get; set; }
        public double Datos { get; set; }
    }



    DataItem[] Data;


    string Cantidad(object value)
    {
        return ((double)value).ToString("", CultureInfo.CreateSpecificCulture("Cantidad"));
    }



    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {


        var rta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");
        oRtaTrabajo = rta.List;
        var rta2 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta2.List;
        var rta3 = await http.GetFromJsonAsync<Respuesta<List<Fallas>>>("/api/fallas");
        fallas = rta3.List;

        var rta4 = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>("api/eventosproduccion");
        oRtaEvento = rta4.List;

        ObrasTotales = oRtaEvento;
        FallasSeleccionadas = fallas;
        OrdenesSeleccionadas = oRtaTrabajo;
        StateHasChanged();

    }

    public void cargarOperario()
    {
        FallasSeleccionadas = fallas;
        OrdenesSeleccionadas = oRtaTrabajo;
        ObrasTotales = oRtaEvento;
        horasTotales = 0;
        if (persona != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.empleado == persona.Id).ToList();

            ObrasTotales = ObrasTotales.Where(x => x.Operario == persona.Id).ToList();

            OrdenesSeleccionadas = OrdenesSeleccionadas.Where(orden => FallasSeleccionadas.Any(falla => falla.OT == orden.Id)).ToList();

            foreach(var i in ObrasTotales)
            {
                if (i.Tipo == "Comenzar")
                {
                    // horasTotales = horasTotales + i.Fecha.Value.Hour;
                    Console.WriteLine(horasTotales);
                }
                else
                {
                    horasTotales = horasTotales + i.Fecha.Value.Hour;
                    Console.WriteLine(horasTotales);
                }
            }

        }
        if(trabajo != null)
        {
            FallasSeleccionadas = FallasSeleccionadas.Where(x => x.OT == trabajo.Id).ToList();
        }

        var erroresEmpleados = FallasSeleccionadas.Where(x => x.empleado == persona.Id);
        Console.WriteLine(erroresEmpleados.Count());

        Data = new DataItem[]
        {
            
                new DataItem
                {
                    Date = "jan",
                    Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 1).Count()
                },
             new DataItem
        {
            Date = "Feb",
             Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 2).Count()
        },
        new DataItem
        {
            Date = "Mar",
            Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 3).Count()
        },
        new DataItem
        {
            Date = "Apr",
            Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 4).Count()
        },
        new DataItem
        {
            Date = "May",
            Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 5).Count()
        },
        new DataItem
        {
            Date = "Jun",
             Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 6).Count()
        },
        new DataItem
        {
            Date = "Jul",
             Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 7).Count()
        },
        new DataItem
        {
            Date = "Aug",
            Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 8).Count()
        },
        new DataItem
        {
            Date = "Sept",
             Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 9).Count()
        },
        new DataItem
        {
            Date = "Oct",
             Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 10).Count()
        },
        new DataItem
        {
            Date = "Nov",
             Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 11).Count()
        },
        new DataItem
        {
            Date = "Dec",
            Datos = erroresEmpleados.Where(x=> x.fecha.Value.Month == 12).Count()
        }
        };

    }  


    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
           // @*  int errores = erroresEmpleados.Where(x => x.fecha.Value.Month == DateTime.Now.Month).Count();
           //  DateTime dateFromDatabase = DateTime.Parse("2024-04-30"); *@
}