@page "/estadistica/compras"
@using System.Reflection;
@using OfficeOpenXml.Table;
@using OfficeOpenXml.LoadFunctions.Params;
@using BlazorApp1.Client.Pages.d_Deposito.Insumos


<div style="display: flex; justify-content: space-between; align-items: center;">
    <h3 style="font-size: 1.8rem; font-weight: bold;">Estadística de Ventas</h3>
</div>

<br />
<br />

<RadzenText style="font-size: 1.2rem; font-weight: 500;">Listado de compras últimos trimestre</RadzenText>
@* 
<div style="display: flex; gap: 10px;">
    <RadzenDatePicker @bind-Value="fechaDesde"
                      Placeholder="Fecha desde"
                      Style="font-size: 1rem; width: 200px;"
                      DateFormat="yyyy-MM-dd"
                      Change="OnFechaChanged" />
    <RadzenDatePicker @bind-Value="fechaHasta"
                      Placeholder="Fecha hasta"
                      Style="font-size: 1rem; width: 200px;"
                      DateFormat="yyyy-MM-dd"
                      Change="OnFechaChanged" />
    <button @onclick="AplicarFiltro"
            class="btn btn-primary"
            style="font-size: 1rem;"
            disabled="@(!FechaHastaValida())">
        Aplicar Filtro
    </button>
</div> *@
<button @onclick='() => DescargarExcel("clientes")' class="btn btn-success">
    Descargar Clientes
</button>

<button @onclick='() => DescargarExcel("proveedores")' class="btn btn-success">
    Descargar Proveedores
</button>

<br />

<h4 style="font-size: 1.4rem; font-weight: bold;">Clientes y proveedores:</h4>

   
        <div style="border: 1px solid #ddd; border-radius: 8px; padding: 15px; background-color: #f9f9f9; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
            <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                            AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                            Data="@clientes" TItem="Cliente" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Cliente" Property="Id" Filterable="true" Title="ID" Width="40px" />
                    <RadzenDataGridColumn TItem="Cliente" Property="RazonSocial" Title="Razon social" Width="100px" />
                    <RadzenDataGridColumn TItem="Cliente" Property="NombreFantasia" Title="Nombre de fantasia" Width="100px" />
                    <RadzenDataGridColumn TItem="Cliente" Property="NombreContacto" Title="Nombre del contacto" Width="100px" />
                    <RadzenDataGridColumn TItem="Cliente" Property="Mail" Title="Mail" Width="80px" />

                   @*  <RadzenDataGridColumn TItem="Cliente" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Editar cliente" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Cliente" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Cliente" Property="" Title="" Filterable="false" Width="30px">
                        <Template Context="data">
                            <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                        </Template>
                    </RadzenDataGridColumn> *@

                </Columns>
            </RadzenDataGrid>
         @*    <button @onclick="() => DescargarExcel("clientes")
                    class="btn btn-success"
                    style="font-size: 1rem;">
                <FeatherArrowDown></FeatherArrowDown>
            </button> *@
        </div>







    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                    AllowPaging="true" ShowPagingSummary="true" @ref="grid2"
                    Data="@prove" TItem="ProveedoreDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="ProveedoreDTO" Property="Id" Title="ID" Width="10%" />
            <RadzenDataGridColumn TItem="ProveedoreDTO" Property="Cuit" Title="Cuit" Width="20%" />
            <RadzenDataGridColumn TItem="ProveedoreDTO" Property="NombreFantasia" Title="NombreFantasia" Width="20%">
                <Template Context="data">

                    @if (data.NombreFantasia != null)
                    {

                        <a>@data.NombreFantasia</a>
                    }
                    else
                    {
                        <a>-</a>

                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProveedoreDTO" Property="NombreContacto" Title="Nombre del Contácto" Width="20%" />


        </Columns>
    </RadzenDataGrid>

   

    

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    List<Cliente> clientes = new();

    List<ProveedoreDTO> prove = new();


    RadzenDataGrid<Cliente>? grid;
    RadzenDataGrid<ProveedoreDTO>? grid2;

    bool allowFiltering;
    DateTime? fechaDesde;
    DateTime? fechaHasta;


    protected override async Task OnInitializedAsync()
    {
        fechaDesde = new DateTime(2024, 1, 1);
        fechaHasta = new DateTime(2024, 12, 31);

        await Get();
    }

    async Task Get()
    {
        var rta2 = await http.GetFromJsonAsync<Respuesta<List<Cliente>>>("/api/cliente");
        clientes = rta2.List;
        var rta = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>("/api/proveedore");
        prove = rta.List;
        // FiltrarYContar();
        StateHasChanged();
    }

    // void FiltrarYContar()
    // {
    //     clientesFiltrados = clientes
    //         // .Where(x => x.Fechaentrega.HasValue &&
    //         //             (!fechaDesde.HasValue || x.Fechaentrega.Value.Date >= fechaDesde.Value.Date) &&
    //         //             (!fechaHasta.HasValue || x.Fechaentrega.Value.Date <= fechaHasta.Value.Date))
    //         .ToList();

    //     // proveFiltrados = prove
    //     //     .GroupBy(x => string.IsNullOrEmpty(x.Tipo) ? "Sin tipo" : x.Tipo)
    //     //     .ToDictionary(g => g.Key, g => g.Count());

    //     // if (!ordenesPorTipo.ContainsKey("Sin tipo"))
    //     // {
    //     //     ordenesPorTipo["Sin tipo"] = cotizacionesFiltradas
    //     //         .Count(x => string.IsNullOrEmpty(x.Tipo));
    //     // }
    // }






    private async Task DescargarExcel(string tipo)
    {
        Console.WriteLine("llega");

        if(tipo == "clientes")
        {
           var elements = clientes;
        

        if (elements == null || !elements.Any())
        {
            Console.WriteLine("No hay elementos para exportar.");
            return;
        }

        using (var excelPackage = new OfficeOpenXml.ExcelPackage())
        {
            var t = typeof(Cliente);
            var worksheet = excelPackage.Workbook.Worksheets.Add("Elements");

                worksheet.Cells["A1"].LoadFromCollection(clientes, true, TableStyles.None, LoadFromCollectionParams.DefaultBindingFlags,
            new MemberInfo[]
            {
              t.GetProperty("Id"),
                t.GetProperty("NombreEmpresa"),
                t.GetProperty("Cuit"),
                t.GetProperty("Direccion"),
                t.GetProperty("Mail"),
                t.GetProperty("Telefono"),
                t.GetProperty("Cp"),
                t.GetProperty("NombreContacto"),
                t.GetProperty("Observaciones"),
                t.GetProperty("RazonSocial"),
                t.GetProperty("NombreFantasia"),
                t.GetProperty("Corredor"),
                t.GetProperty("Expreso"),
                t.GetProperty("DomicilioEntrega"),
                t.GetProperty("Localidad")
            });

            worksheet.Cells.AutoFitColumns();

            var fileContents = excelPackage.GetAsByteArray();
            DateTime fechaHoy = DateTime.Now;
            var fileName = $"Reporte_{tipo}_{fechaHoy:dd_MM}.xlsx";
            var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            string url = $"data:{contentType};base64,{Convert.ToBase64String(fileContents)}";

            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, url);
        }


        }
        else
        {
            var elements = prove;




            if (elements == null || !elements.Any())
            {
                Console.WriteLine("No hay elementos para exportar.");
                return;
            }

            using (var excelPackage = new OfficeOpenXml.ExcelPackage())
            {
                var t = typeof(ProveedoreDTO);
                var worksheet = excelPackage.Workbook.Worksheets.Add("Elements");

                worksheet.Cells["A1"].LoadFromCollection(elements, true, TableStyles.None, LoadFromCollectionParams.DefaultBindingFlags,
                new MemberInfo[]
                {
            t.GetProperty("Id"),
                t.GetProperty("NombreEmpresa"),
                t.GetProperty("Cuit"),
                t.GetProperty("Direccion"),
                t.GetProperty("Mail"),
                t.GetProperty("Telefono"),
                t.GetProperty("Cp"),
                t.GetProperty("NombreContacto"),
                t.GetProperty("Observaciones"),
                t.GetProperty("RazonSocial"),
                t.GetProperty("Categorias"),
                t.GetProperty("Localidad"),
                t.GetProperty("NumeroContacto"),
                t.GetProperty("NombreFantasia"),
                t.GetProperty("TipoCuenta")
                });

                worksheet.Cells.AutoFitColumns();

                var fileContents = excelPackage.GetAsByteArray();
                DateTime fechaHoy = DateTime.Now;
                var fileName = $"Reporte_{tipo}_{fechaHoy:dd_MM}.xlsx";
                var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                string url = $"data:{contentType};base64,{Convert.ToBase64String(fileContents)}";

                await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, url);
            }







        }



    }













    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    private void OnFechaChanged()
    {
        if (fechaHasta.HasValue && fechaDesde.HasValue && fechaHasta.Value < fechaDesde.Value)
        {
            fechaHasta = fechaDesde.Value;
        }

        StateHasChanged();
    }

    private bool FechaHastaValida()
    {
        return !(fechaHasta.HasValue && fechaDesde.HasValue && fechaHasta.Value < fechaDesde.Value);
    }

    private void AplicarFiltro()
    {
        // FiltrarYContar();
        StateHasChanged();
    }
}
