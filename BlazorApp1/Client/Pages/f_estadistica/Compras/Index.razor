@page "/estadistica/generales"


@using System.Globalization



<h3>Estadistica generales</h3>
<br />
<div class="card" style="padding: 5px;">
    @if (compraSeleccionadas != null && OrdenesSeleccionadas != null)
    {
        <RadzenText Style="font-weight: 600;font-size: 3vh;">Movimientos del mes</RadzenText>
           
         <div class="row">
            <div class="col">
            <RadzenText>Cantidad de compras: @CantidadCompras </RadzenText>
                <RadzenText>Cantidad de egresos: $@PrecioTotal </RadzenText>
                <RadzenText>Cantidad de ingresos: $@CantidadCompras </RadzenText>
            
            </div>
            
            <div class="col">
                <RadzenText>Cantidad de ventas: @CantidadVentas </RadzenText>
                <RadzenText>Cantidad de ingresos: $@PrecioTotalVentas </RadzenText>
                <RadzenText>Cantidad de ingresos: $@CantidadCompras </RadzenText>
            
            </div>
        </div>
    }
    else
    {
        <RadzenText> Seleccione un empleado </RadzenText>
        <RadzenText> Cantidad de errores: </RadzenText>
        <RadzenText> Obras trabajadas:  </RadzenText>
        <RadzenText> Porcentaje de errores: </RadzenText>

    }

</div>


<div class="container my-5">
    <div class="row">
        <div class="col">
            <RadzenText>Errores por obra</RadzenText>
            <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@DataVentas" CategoryProperty="Date" Title="%" ValueProperty="Datos" RenderingOrder="1">
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="true" Data="@DataCompras" CategoryProperty="Date" Title="%" ValueProperty="Datos" RenderingOrder="1">
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20" />
                <RadzenValueAxis Formatter="@Cantidad">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Cantidad de compras" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>


<div class="row">
    <div class="col">
        @if (compraSeleccionadas != null && compraSeleccionadas.Count > 0)
        {
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Filtrar por orden de compra</RadzenText>
            <br />
            <RadzenDropDownDataGrid TValue="OrdencompraDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(compraSeleccionadas) Style="width: 50%" AllowColumnResize="true" @bind-Value="ordencompra"
                                    TextProperty="InsumoNavigation.Descripcion" AllowFilteringByAllStringColumns="true" class="float-start">
                <Columns>

                    <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="20%" />
                    <RadzenDropDownDataGridColumn Property="InsumoNavigation.Descripcion" Title="Insumo" Width="40%"/>
                    <RadzenDropDownDataGridColumn Property="Cantidad" Title="Cantidad" Width="30%" />

                </Columns>
            </RadzenDropDownDataGrid>
            @if (compraSeleccionadas != null)
            {
                <button class="btn btn-outline-success " @onclick="() => cargarOperario(1)">Seleccionar</button>
            }

        }
        else
        {
            <p> No hay compras para mostrar</p>
        }
    </div>
</div>

<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />
<br />
<RadzenText>Listado de compra</RadzenText>

<RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                Data="@compraSeleccionadas" TItem="OrdencompraDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Aprobada" Title="Fecha" Width="15%"/>
        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="InsumoNavigation.Descripcion" Title="Insumo" Width="25%"/>
        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Precio" Title="Precio" Width="15%" />
        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Cantidad" Title="Cantidad" Width="10%" />
        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="ProveedorNavigation.RazonSocial" Title="Proveedor" Width="40%" />


    </Columns>
</RadzenDataGrid>
<br />
<br />
<br />
<br />

@code {


    List<OrdencompraDTO> ordencompraDTOs = new();
    List<Cotizacione> oRtaCotizaciones;


    OrdencompraDTO ordencompra = new();
    Cotizacione cotizaciones = new();








    List<PersonalDTO> oRtaPersonal;
    List<Ordentrabajo> oRtaTrabajo;
    List<Ordentrabajo> OrdenesSeleccionadas;

    List<Fallas>? fallas;
    List<OrdencompraDTO> compraSeleccionadas;


    PersonalDTO? persona;
    Ordentrabajo? trabajo;

    bool allowFiltering = false;
    RadzenDataGrid<OrdencompraDTO>? grid;



    class DataItem
    {
        public string Date { get; set; }
        public double Datos { get; set; }
    }

    int gastos = 0;
    int CantidadCompras = 0;
    int PrecioTotal = 0;

    int CantidadVentas = 0;
    int PrecioTotalVentas = 0;

    DataItem[] DataVentas;
    DataItem[] DataCompras;


    string Cantidad(object value)
    {
        return ((double)value).ToString("", CultureInfo.CreateSpecificCulture("Cantidad"));
    }



    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {

        var rta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");
        oRtaTrabajo = rta.List.Where(x => x.Estado == "Finalizado" && x.Fechaentrega.Value.Month == DateTime.Now.Month).ToList();


        var rta1 = await http.GetFromJsonAsync<Respuesta<List<OrdencompraDTO>>>("/api/oc");
        ordencompraDTOs = rta1.List.Where(x=>x.Estado == "Aprobada").ToList();



            var rta2 = await http.GetFromJsonAsync<Respuesta<List<Cotizacione>>>("/api/cotizacion");
            oRtaCotizaciones = rta2.List;


        compraSeleccionadas = ordencompraDTOs;
        OrdenesSeleccionadas = oRtaTrabajo;
   



        var Año = DateTime.Now.Year;
        var Mes = DateTime.Now.Month;

        var diasEnMes = DateTime.DaysInMonth(Año, Mes);

        DataVentas = new DataItem[diasEnMes];
        DataCompras = new DataItem[diasEnMes];
        for (int dia = 1; dia <= diasEnMes; dia++)
        {
            DateTime fecha = new DateTime(Año, Mes, dia);

            int precioParcial = 0;
            int precioParcialVenta = 0;
            foreach (var compra in compraSeleccionadas.Where(x => x.Aprobada.Value.Day == dia))
            {
                CantidadCompras = CantidadCompras + 1;

                PrecioTotal = PrecioTotal + (int.Parse(compra.Precio ?? "0"));
                precioParcial = precioParcial + int.Parse(compra.Precio ?? "0");
            }
            foreach (var venta in oRtaCotizaciones.Where(x => x.Fechaentrega.Value.Day == dia))
            {
                CantidadVentas = CantidadVentas + 1;

                PrecioTotalVentas = PrecioTotalVentas + int.Parse(venta.Valorpeso ?? "0");
                precioParcialVenta = precioParcialVenta + int.Parse(venta.Valorpeso ?? "0");
            }

            DataVentas[dia - 1] = new DataItem
                {
                    Date = dia.ToString(),
                    Datos = precioParcialVenta,
                };

            DataCompras[dia - 1] = new DataItem
                {
                    Date = dia.ToString(),
                    Datos = precioParcial,
                };
           
            Console.WriteLine(PrecioTotal);
            try
            {   
                Console.WriteLine(DataVentas);
            }
            catch
            {
                
            }
        }
            
        

        StateHasChanged();

    }

    public void cargarOperario(int numero)
    {
        compraSeleccionadas = ordencompraDTOs;



        if (ordencompra != null)
        {
            compraSeleccionadas = compraSeleccionadas.Where(x => x.Id == ordencompra.Id).ToList();

        }
        StateHasChanged();
    }


    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    // @*  int errores = erroresEmpleados.Where(x => x.fecha.Value.Month == DateTime.Now.Month).Count();
    //  DateTime dateFromDatabase = DateTime.Parse("2024-04-30"); *@
}
