@page "/organigrama"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager nav
@inject IJSRuntime JSRuntime

<style>
    .img1 {
        height: 75%;
    }
</style>

<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />

<div class="d-flex justify-content-start align-items-center">
    <InputFile OnChange="@OnInputFileChange" />
    <button type="submit" class="btn btn-primary" @onclick="Upload">Subir Imagen</button>
    <button class="btn btn-danger" @onclick="DeleteOrganigrama">Eliminar Imagen</button>
</div>
<br />

<center>
    <img class="img1" src="@imageUrl" alt="Organigrama" />
</center>

@code {
    private string imageUrl = "/imagenes/organigrama.png"; // Imagen predeterminada
    private IBrowserFile? selectedFile;
    private string? fileDataUrl; // URL de datos de la imagen

    protected override async Task OnInitializedAsync()
    {
        // Recuperar la imagen desde localStorage si existe
        fileDataUrl = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "organigrama");
        if (!string.IsNullOrEmpty(fileDataUrl))
        {
            imageUrl = fileDataUrl;
        }
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        // Leer el archivo y convertirlo en una URL de datos
        using var stream = selectedFile.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var base64Image = Convert.ToBase64String(memoryStream.ToArray());
        fileDataUrl = $"data:{selectedFile.ContentType};base64,{base64Image}";

        imageUrl = fileDataUrl; // Actualizar la URL de la imagen
    }

    private async Task Upload()
    {
        if (fileDataUrl == null)
        {
            Console.WriteLine("No hay archivo seleccionado.");
            return;
        }

        // Guardar la URL de datos en localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "organigrama", fileDataUrl);
        Console.WriteLine("Imagen subida y guardada en localStorage.");
    }

    private async Task DeleteOrganigrama()
    {
        // Eliminar la imagen de localStorage y restaurar la predeterminada
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "organigrama");
        imageUrl = "/imagenes/organigrama.png";
        Console.WriteLine("Imagen eliminada y restaurada a la predeterminada.");
    }

    private void ComeBack()
    {
        nav.NavigateTo("/administracion");
    }
}
