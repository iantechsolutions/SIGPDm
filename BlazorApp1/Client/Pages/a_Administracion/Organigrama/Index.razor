@page "/organigrama"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager nav
@inject IJSRuntime JSRuntime
@using System.Text.Json

<style>
    .img1 {
        height: 75%;
    }
</style>

<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />

<h1>Seleccione una imagen y luego presione el boton "Subir imagen"</h1>
<br />
<br />

<div class="d-flex flex-column align-items-start">
    <InputFile OnChange="@OnInputFileChange" />
    <div class="mt-2">
        <button type="submit" class="btn btn-primary" @onclick="Upload" disabled="@(isImageUploaded)">Subir Imagen</button>
        <button class="btn btn-danger ms-2" @onclick="DeleteOrganigrama" disabled="@(isImageUploaded == false)">Eliminar Imagen</button>
    </div>
</div>
<br />

<br />

<center>
    <img class="img1" src="@(organigrama != null ? $"/imagenesRecepciones/{organigrama.Imagen}" : "")" alt="Organigrama" />
</center>

@code {
    private List<File>? files = new();
    private List<UploadResult>? uploadResults = new();
    private int maxAllowedFiles = 50;
    private bool? shouldRender;
    MultipartFormDataContent? content = new MultipartFormDataContent();
    List<string>? imagenes = new();
    private bool isImageUploaded = false;

    // Objeto Organigrama
    private Organigrama organigrama = new();

    protected override async Task OnInitializedAsync()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<List<Organigrama>>>("/api/organigrama");
        organigrama = rta.List.OrderByDescending(x=>x.id).FirstOrDefault();

        // Verificamos si la imagen ya existe
        await CheckIfImageExists();
    }

    private async Task CheckIfImageExists()
    {
        var client = ClientFactory.CreateClient();
        var response = await client.GetAsync($"{nav.BaseUri}imagenesRecepciones/{organigrama.Imagen}");

        isImageUploaded = response.IsSuccessStatusCode;

        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;

        // Solo permitirá subir una imagen si no existe una cargada
        if (isImageUploaded)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "La imagen ya existe. Elimínela antes de cargar una nueva.",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Aceptar",
                });
            return;
        }

        long maxFileSize = 1024 * 1500000;  // Define el tamaño máximo de archivo

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {

            // Guardamos el objeto Organigrama
            organigrama = new Organigrama
                {
                    Imagen = file.Name,
                };
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                files.Add(new() { Name = file.Name });

                content = new MultipartFormDataContent();
                content.Add(fileContent, "\"files\"", file.Name);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        shouldRender = true;
    }

    private async Task Upload()
    {
        if (isImageUploaded)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "La imagen 'organigrama.jpg' ya existe. Elimínela antes de cargar una nueva.",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Aceptar",
                });
            return;
        }

        var client = ClientFactory.CreateClient();
        var response = await client.PostAsync($"{nav.BaseUri}Filesave/imagenesRecepciones", content);

        if (response.IsSuccessStatusCode)
        {
            // Guardamos el objeto Organigrama
            // organigrama = new Organigrama
            //     {
            //         Imagen = "organigrama.jpg",
            //     };

            await http.PostAsJsonAsync("/api/organigrama", organigrama);
             await JSRuntime.InvokeVoidAsync("location.reload");
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Éxito",
                    Text = "Imagen subida y guardada.",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonText = "Aceptar",
                });

            isImageUploaded = true;
            await CheckIfImageExists();
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Hubo un problema al subir la imagen.",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Aceptar",
                });
        }
    }

    public async Task DeleteOrganigrama()
    {
        var client = ClientFactory.CreateClient();
        var response = await client.DeleteAsync($"{nav.BaseUri}Filesave/imagenesRecepciones/{organigrama.Imagen}");

       
            // Eliminamos el objeto Organigrama
            var deleteResponse = await http.DeleteAsync($"/api/organigrama/{organigrama.id}");

            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Imagen Eliminada",
                    Text = "Se eliminó correctamente el organigrama.",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonText = "Aceptar",
                });

            isImageUploaded = false;
            organigrama = null;  // Limpiar el objeto Organigrama
        await JSRuntime.InvokeVoidAsync("location.reload");

    }

    private class File
    {
        public string? Name { get; set; }
    }

    private void ComeBack()
    {
        nav.NavigateTo("/administracion");
    }
}
