@page "/personal"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Personal</h1>
<p>Descripción personal (*)</p>
<hr />
<br />
<button class="btn btn-outline-success" @onclick="()=>add(0)">Agregar personal</button>
<br />

@if (oRespuesta.List != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

    <br />
    <br />
    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5"
                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                Data="@oRespuesta.List" TItem="Personal" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Personal" Property="Legajo" Title="Legajo" Width="100px" />
            <RadzenDataGridColumn TItem="Personal" Property="Nombres" Title="Nombres" Width="100px" />
            <RadzenDataGridColumn TItem="Personal" Property="Apellido" Title="Apellido" Width="100px" />
            <RadzenDataGridColumn TItem="Personal" Property="Dni" Title="Dni" Width="80px" />
            <RadzenDataGridColumn TItem="Personal" Property="Puesto" Title="Puesto" Width="80px" />
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <button class="btn" title="Editar personal" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Personal>> oRespuesta = new();
    RadzenDataGrid<Personal>? grid;
    bool allowFiltering = false;
    int currentPage;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/Personal");
        oRespuesta = respuesta;
        StateHasChanged();
    }
    async Task delete(int id)
    {
        await http.DeleteAsync($"/api/Personal/{id}");
        await Get();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }


    async Task ComeBack()
    {
        nav.NavigateTo("/administracion");
    }

    async Task add(int id)
    {
        
        var columnNom = grid.ColumnsCollection.Where(c => c.Property == "Nombres").FirstOrDefault();
        var columApe = grid.ColumnsCollection.Where(c => c.Property == "Apellido").FirstOrDefault();       
        var columPue = grid.ColumnsCollection.Where(c => c.Property == "Puesto").FirstOrDefault();
        
        object? filtroAnteriorNom = columnNom.GetFilterValue();
        object? filtroAnteriorApe = columApe.GetFilterValue();    
        object? filtroAnteriorPue = columPue.GetFilterValue();


        if (id != 0)
        {
            currentPage = grid.CurrentPage;
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddPersonal.id), id);
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large

                };
            var formModal = Modal.Show<AddPersonal>("Editar Personal", parameters, options);
            var result = await formModal.Result;
            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);

                
                columnNom.FilterValue = filtroAnteriorNom;
                columApe.FilterValue = filtroAnteriorApe;               
                columPue.FilterValue = filtroAnteriorPue;  
                
                columnNom.FilterOperator = FilterOperator.StartsWith;
                columApe.FilterOperator = FilterOperator.StartsWith;               
                columPue.FilterOperator = FilterOperator.StartsWith;
                grid.Reload();
            }

        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large
                };
            var formModal = Modal.Show<AddPersonal>("Agregar Personal", options);
            var result = await formModal.Result;


            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);


                columnNom.FilterValue = filtroAnteriorNom;
                columApe.FilterValue = filtroAnteriorApe;
                columPue.FilterValue = filtroAnteriorPue;

                columnNom.FilterOperator = FilterOperator.StartsWith;
                columApe.FilterOperator = FilterOperator.StartsWith;
                columPue.FilterOperator = FilterOperator.StartsWith;
                grid.Reload();
            }
        }
    }
    async Task gotoinfo(int id)
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true,
                Class = "m-1"
            };
        parameters.Add(nameof(AddPersonal.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await Get();
        }
    }
}