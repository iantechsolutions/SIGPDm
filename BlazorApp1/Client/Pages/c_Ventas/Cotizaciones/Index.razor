@page "/cotizaciones"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Cotizaciones</h1>
<p>En esta sección se podrán crear cotizaciones.</p>
<hr />
<br />

@if (oRespuesta.List != null)
{

    <button class="btn btn-outline-primary" @onclick="()=>add(0)">Agregar cotización</button>
    <br />
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Pendientes">

                <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                            AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                            Data="@oRespuestaPendientes" TItem="Cotizacione" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Codigo" Title="N° Cotizacion" Width="70px">
                            <Template Context="data">
                                <a>@($"C{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Titulo" Title="Titulo" Width="70px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Tipo" Title="Tipo" Width="30px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cantidad" Title="Cantidad" Width="40px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Editar cotizacion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver reporte" @onclick="() => gotoreporte(data.Id)"><FeatherFileText Color="black" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Aprobadas">
               
                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="false" PageSize="10"
                            AllowPaging="true" ShowPagingSummary="true" @ref="gridAprobadas"
                            Data="@oRespuestaAprobadas" TItem="Cotizacione" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Codigo" Title="N° Cotizacion" Width="70px">
                            <Template Context="data">
                                <a>@($"C{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Titulo" Title="Titulo" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Valorpeso" Title="Precio" Width="30px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cantidad" Title="Cantidad" Width="40px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Editar cotizacion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver reporte" @onclick="() => gotoreporte(data.Id)"><FeatherFileText Color="black" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Rechazadas">

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                            AllowSorting="false" PageSize="50" AllowPaging="true" ShowPagingSummary="true" @ref="gridRechazadas"
                            Data="@oRespuestaRechazadas" TItem="Cotizacione" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Codigo" Title="N° Cotizacion" Width="50px">
                            <Template Context="data">
                                <a>@($"C{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Titulo" Title="Titulo" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Valorpeso" Title="Precio" Width="30px" Filterable="false" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="Cantidad" Title="Cantidad" Width="50px" />
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Editar cotizacion" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Cotizacione" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver reporte" @onclick="() => gotoreporte(data.Id)"><FeatherFileText Color="black" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Cotizacione>> oRespuesta = new();
    List<Cotizacione>? oRespuestaPendientes;
    List<Cotizacione>? oRespuestaAprobadas;
    List<Cotizacione>? oRespuestaRechazadas;
    RadzenDataGrid<Cotizacione>? grid;
    RadzenDataGrid<Cotizacione>? gridAprobadas;
    RadzenDataGrid<Cotizacione>? gridRechazadas;
    int currentPage;
    int currentPageAprobadas;
    int currentPageRechazadas;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Cotizacione>>>("/api/Cotizacion");
        oRespuesta = respuesta;
        oRespuestaPendientes = oRespuesta.List.Where(x => x.Estado == "Cargado").ToList();
        oRespuestaAprobadas = oRespuesta.List.Where(x => x.Estado == "Aprobada").ToList();
        oRespuestaRechazadas = oRespuesta.List.Where(x => x.Estado == "Rechazada").ToList();
        StateHasChanged();
        
    }
    
    
    async Task ComeBack()
    {
        nav.NavigateTo("/ventas");
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async Task add(int id)
    {
        var columnId = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Titulo").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Cliente").FirstOrDefault();
        var columNom = grid.ColumnsCollection.Where(c => c.Property == "Cantidad").FirstOrDefault();
        object? filtroAnteriorId = columnId.GetFilterValue();
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        object? filtroAnteriorNom = columNom.GetFilterValue();
        
        currentPage = grid.CurrentPage;
        currentPageAprobadas = gridAprobadas.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;

        if (id != 0)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddCotizacion.id), id);
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large

                };
            var formModal = Modal.Show<AddCotizacion>("Editar Cotizacion", parameters, options);
            var result = await formModal.Result;
            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");

                await grid.GoToPage(currentPage);
                await gridAprobadas.GoToPage(currentPageAprobadas);
                await gridRechazadas.GoToPage(currentPageRechazadas);


            }
            else
            {
                await OnInitializedAsync();
                await grid.GoToPage(currentPage);

                await gridAprobadas.GoToPage(currentPageAprobadas);
                await gridRechazadas.GoToPage(currentPageRechazadas);
                columnId.FilterValue = filtroAnteriorId;
                columnDes.FilterValue = filtroAnteriorDes;
                columnCod.FilterValue = filtroAnteriorCod;
                columNom.FilterValue = filtroAnteriorNom;

                columnId.FilterOperator = FilterOperator.StartsWith;
                columnDes.FilterOperator = FilterOperator.StartsWith;
                columnCod.FilterOperator = FilterOperator.StartsWith;
                columNom.FilterOperator = FilterOperator.StartsWith;

                grid.Reload();
            }

        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large
                };
            var formModal = Modal.Show<AddCotizacion>("Agregar Cotizacion", options);
            var result = await formModal.Result;


            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await OnInitializedAsync();
                await grid.GoToPage(currentPage);


                columnDes.FilterValue = filtroAnteriorDes;
                columnCod.FilterValue = filtroAnteriorCod;
                columNom.FilterValue = filtroAnteriorNom;
                columnDes.FilterOperator = FilterOperator.StartsWith;
                columnCod.FilterOperator = FilterOperator.StartsWith;
                columNom.FilterOperator = FilterOperator.StartsWith;
                grid.Reload();
            }
        }
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;
        await http.DeleteAsync($"/api/Cotizacion/{id}");
        await OnInitializedAsync();
        StateHasChanged();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
            await grid.GoToPage(currentPageRechazadas - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
            await gridRechazadas.GoToPage(currentPageRechazadas);
        }
    }

    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        currentPageAprobadas = gridAprobadas.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridRechazadas.GoToPage(currentPageRechazadas);
        }
        else
        {
            await OnInitializedAsync();
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridRechazadas.GoToPage(currentPageRechazadas);
        }
    }
    public void gotoreporte(int id)
    {
        nav.NavigateTo($"/cot/{id}");       
    }

}