@using Microsoft.Extensions.Logging
@using System.Text.Json

<style>
.boton{
    padding:.375rem .75rem;
}
</style>

@if(oRtaCliente.List != null && oCotizacione != null){
    <div class="card">
        <div class="card-body">

            <EditForm Model="@oCotizacione" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-sm-6">
                        <label>Título</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Titulo" placeholder="Título"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Titulo)" style="color:red;" />
                    </div>
                    <div class="col-sm-6">
                        <label>Cliente</label>

                        <RadzenDropDown AllowClear="true" TValue="string" Style="width: 100%" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@(oRtaCliente.List) TextProperty="RazonSocial" ValueProperty="RazonSocial" @bind-Value="oCotizacione.Cliente" />
                        <ValidationMessage For="(()=> oCotizacione.Cliente)" style="color:red;" />
                    </div>
                </div>
                <br />
                <div class="row">

                    <div class="col-sm-6">
                        <label>N° cotización</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Codigo" placeholder="N° cotización"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Codigo)" style="color:red;" />
                    </div>

                    <div class="col-sm-6">
                        <label>Cantidad</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Cantidad" placeholder="Cantidad"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Cantidad)" style="color:red;" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-sm-6">
                        <div class="row">
                            <div class="col-sm-6">
                                <label>Tipo</label>
                                <RadzenDropDown class="form-control" TValue="string" Data=@tipo placeholder="" @bind-Value=@oCotizacione.Tipo />


                            </div>
                            <div class="col-sm-10">
                                <label>Ítems descripción</label>
                                <InputText class="form-control" @bind-Value="@descriptionValue" placeholder="Descripción"></InputText>
                                <br />
                            </div>
                            <div class="col-sm-2">
                                <br />
                                <button class="btn" type="button" @onclick="addDescription"><FeatherCheck Color="green" /></button>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <label>Obra</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Obra" placeholder="Obra"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Obra)" style="color:red;" />
                    </div>
                    <div class="col-sm-6">
                        <div class="col-sm-12">
                            @foreach (var item in Descripcion)
                            {
                                <div class="row">
                                    <li>
                                        @item
                                        <button class="btn" type="button" @onclick="() => deleteDescription(item)"><FeatherX Color="red"></FeatherX></button>
                                    </li>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <ValidationMessage For="(()=> oCotizacione.Descripcion)" style="color:red;" />
                    <br />

                    <div class="col-sm-6">
                    
                            <label>Precio (pesos)</label>
                            <InputText class="form-control" @bind-Value="@oCotizacione.Valorpeso" placeholder="Precio"></InputText>
                            <ValidationMessage For="(()=> oCotizacione.Valorpeso)" style="color:red;" />
                            <br />

                            <label>Referencia</label>
                            <InputTextArea class="form-control" @bind-Value="@oCotizacione.Referencia" placeholder="Referencia"></InputTextArea>
                            <ValidationMessage For="(()=> oCotizacione.Referencia)" style="color:red;" />
                            <br />

                            <label>Fecha de entrega</label>
                            <br />
                            <RadzenDatePicker TValue="DateTime?" @bind-Value="@oCotizacione.Fechaentrega" Min="DateTime.Today" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                            <br /><label>Fecha de pedido de fabrica</label>
                            <br />
        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oCotizacione.FechaPedidoFabrica" Min="DateTime.Today" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                            <br />
                            <label>Color</label>
                            <InputText class="form-control" @bind-Value="@oCotizacione.Color" placeholder="Color"></InputText>

                    </div>
                
                </div>
                <br />

            
                <div class="row">

                    <div class="col-sm-6">
                        <label>Agregar planos (max 50)</label>

                        <br />
                        <InputFile OnChange="@OnInputFileChange" multiple />
                    </div>
                    <br />

                    <div class="col-sm-12">

                    @foreach (var plano in planos.ToList())
                    {
                        <a href="planos/@plano" download target="_blank">@plano</a>

                        <button class="btn" type="button" @onclick="()=>alertaDelete(plano)"><FeatherX Color="red"></FeatherX></button>

                        <br />
                    }
                    </div>
                </div>
                <br />

                <button type="submit" class="btn btn-primary mr-2" disabled=@disable >Duplicar</button>
                <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}



@code {
    bool disable;

    Cotizacione? oCotizacione = new();
    Respuesta<Cotizacione>? oRta = new();
    Respuesta<List<Cliente>>? oRtaCliente = new();
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    List<string>? planos = new();
    List<string>? Descripcion = new();
    string? descriptionValue;

    List<string> tipo = new List<string>
    {
        "ACC","CT","GA","GC","GE","GI","GM","GP","RX"
    };


    //upload files
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 50;
    private bool shouldRender;
    MultipartFormDataContent content = new MultipartFormDataContent();

    string? codigo;

    protected override async Task OnInitializedAsync()
    {
        disable = false;

        oRtaCliente = await http.GetFromJsonAsync<Respuesta<List<Cliente>>>($"/api/Cliente");


        oRta = await http.GetFromJsonAsync<Respuesta<Cotizacione>>($"/api/Cotizacion/{id}");
        oCotizacione = oRta.List;
        oCotizacione.Fechaentrega = DateTime.Now;
        oCotizacione.FechaPedidoFabrica = DateTime.Now;
        oCotizacione.Id = 0;
        oCotizacione.Planos = null;
        oCotizacione.Cotizaciones = null;
        oCotizacione.Remito = null;
        

        var descripcionClean = oCotizacione.Descripcion?.Replace("`", "");
        if (!string.IsNullOrWhiteSpace(descripcionClean))
        {
            Descripcion = JsonSerializer.Deserialize<List<string>>(descripcionClean);
        }
            else
            {
                Descripcion = new List<string>(); 
            }

            
        

        codigo = oCotizacione.Codigo;
    }

    async Task Guardar()
    {
        if (string.IsNullOrEmpty(oCotizacione.Titulo))
        {
            await alertaError("un título");

        }
        else if (string.IsNullOrEmpty(oCotizacione.Cliente))
        {
            await alertaError("un cliente");
        }
        else if (string.IsNullOrEmpty(oCotizacione.Cantidad))
        {
            await alertaError("una cantidad");
        }
        else if (string.IsNullOrEmpty(oCotizacione.Valorpeso))
        {
            await alertaError("un precio");
        }
        else if (string.IsNullOrEmpty(oCotizacione.Codigo))
        {
            await alertaError("un número");
        }
        else
        {

            disable = true;
            oCotizacione.Descripcion = JsonSerializer.Serialize<List<string>>(Descripcion);
            var client = ClientFactory.CreateClient();
            var response = await client.PostAsync($"{nav.BaseUri}filesave", content);

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

                using var responseStream = await response.Content.ReadAsStreamAsync();

                var newUploadResults = await JsonSerializer.DeserializeAsync<IList<UploadResult>>(responseStream, options);

                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
            }

            oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);

                oCotizacione.Id = 0;
                oCotizacione.Estado = "Cargado";
                await http.PostAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
                await ModalInstance.CloseAsync(ModalResult.Ok());
            // }
            // else
            // {
            //     try
            //     {
            //         Ordentrabajo oOrdenTrabajo = new();
            //         Console.WriteLine(codigo);
            //         var oRta = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/Ot/{codigo}");
            //         oOrdenTrabajo = oRta.List;
            //         //Console.WriteLine($"la cantidad es: {oOrdenTrabajo.Cantidad}");
            //         oOrdenTrabajo.Cantidad = oCotizacione.Cantidad;
            //         oOrdenTrabajo.Color = oCotizacione.Color;
            //         oOrdenTrabajo.Titulo = oCotizacione.Titulo;
            //         oOrdenTrabajo.Obra = oCotizacione.Obra;
            //         oOrdenTrabajo.Codigo = oCotizacione.Codigo;
            //         oOrdenTrabajo.Descripcion = oCotizacione.Descripcion;
            //         oOrdenTrabajo.Referencia = oCotizacione.Referencia;
            //         oOrdenTrabajo.Fechaentrega = oCotizacione.Fechaentrega;
            //         oOrdenTrabajo.Fechaaplazada = oCotizacione.Fechaentrega;
            //         oOrdenTrabajo.Planos = oCotizacione.Planos;
            //         oOrdenTrabajo.Cliente = oCotizacione.Cliente;
            //         await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oOrdenTrabajo);
            //     }
            //     catch (Exception ex)
            //     {
            //         Console.WriteLine(ex.Message);
            //     }
            //     await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
            //     await ModalInstance.CloseAsync(ModalResult.Ok());

            // }
        }
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());

    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            planos.Add(file.Name);
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }


        shouldRender = true;
    }
    public async Task alertaDelete(string plano)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este plano",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deletePlano(plano);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task deletePlano(string plano)
    {
        planos = planos.Where(x => x != plano).ToList();
        oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
        try
        {
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }
        catch
        {
            Console.WriteLine("No posteado");
        }

    }
    private class File
    {
        public string? Name { get; set; }
    }
    public async Task addDescription()
    {
        Descripcion.Add(descriptionValue);
    }
    public async Task deleteDescription(string descriptionValue)
    {
        Descripcion.Remove(descriptionValue);
    }
}