@using Microsoft.Extensions.Logging
@using System.Text.Json

<style>
.boton{
    padding:.375rem .75rem;
}
</style>

@if(oRtaCliente.List != null && oCotizacione != null){
    <div class="card">
        <div class="card-body">

            <EditForm Model="@oCotizacione" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                 <RadzenSteps @ref="steps">
                    <Steps>
                        <RadzenStepsItem Text="Informacion principal">
                <div class="row">
                    <div class="col-sm-6">
                        <label>Título</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Titulo" placeholder="Título"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Titulo)" style="color:red;" />
                    </div>
                    <div class="col-sm-6">
                        <label>Cliente</label>

                        <RadzenDropDown AllowClear="true" TValue="string" Style="width: 100%" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@(oRtaCliente.List) TextProperty="RazonSocial" ValueProperty="RazonSocial" @bind-Value="oCotizacione.Cliente" />
                        <ValidationMessage For="(()=> oCotizacione.Cliente)" style="color:red;" />
                    </div>
                </div>
                <br />
                <div class="row">

                    <div class="col-sm-6">
                        <label>N° cotización</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Codigo" placeholder="N° cotización"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Codigo)" style="color:red;" />
                    </div>

                    <div class="col-sm-6">
                        <label>Cantidad</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Cantidad" placeholder="Cantidad"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Cantidad)" style="color:red;" />
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-sm-6">
                        <div class="row">
                            <div class="col-sm-6">
                                <label>Tipo</label>
                                <RadzenDropDown class="form-control" TValue="string" Data=@tipo placeholder="" @bind-Value=@oCotizacione.Tipo />


                            </div>
                            <div class="col-sm-10">
                                <label>Ítems descripción</label>
                                <InputText class="form-control" @bind-Value="@descriptionValue" placeholder="Descripción"></InputText>
                                <br />
                            </div>
                            <div class="col-sm-2">
                                <br />
                                <button class="btn" type="button" @onclick="addDescription"><FeatherCheck Color="green" /></button>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <label>Obra</label>
                        <InputText class="form-control" @bind-Value="@oCotizacione.Obra" placeholder="Obra"></InputText>
                        <ValidationMessage For="(()=> oCotizacione.Obra)" style="color:red;" />
                    </div>
                    <div class="col-sm-6">
                        <div class="col-sm-12">
                            @foreach (var item in Descripcion)
                            {
                                <div class="row">
                                    <li>
                                        @item
                                        <button class="btn" type="button" @onclick="() => deleteDescription(item)"><FeatherX Color="red"></FeatherX></button>
                                    </li>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <ValidationMessage For="(()=> oCotizacione.Descripcion)" style="color:red;" />
                    <br />

                    <div class="col-sm-6">
                    
                            <label>Precio (pesos)</label>
                            <InputText class="form-control" @bind-Value="@oCotizacione.Valorpeso" placeholder="Precio"></InputText>
                            <ValidationMessage For="(()=> oCotizacione.Valorpeso)" style="color:red;" />
                            <br />

                            <label>Referencia</label>
                            <InputTextArea class="form-control" @bind-Value="@oCotizacione.Referencia" placeholder="Referencia"></InputTextArea>
                            <ValidationMessage For="(()=> oCotizacione.Referencia)" style="color:red;" />
                            <br />
        <label>Lugar de entrega</label>
        <InputTextArea class="form-control" @bind-Value="@oCotizacione.Lugarentrega" placeholder="Lugar de entrega"></InputTextArea>
        <ValidationMessage For="(()=> oCotizacione.Lugarentrega)" style="color:red;" />
        <br />
                            <label>Fecha de entrega</label>
                            <br />
                            <RadzenDatePicker TValue="DateTime?" @bind-Value="@oCotizacione.Fechaentrega" Min="DateTime.Today" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                            <br /><label>Fecha de pedido de fabrica</label>
                            <br />
        <RadzenDatePicker TValue="DateTime?" @bind-Value="@oCotizacione.FechaPedidoFabrica" Min="DateTime.Today" ShowTime="false" ShowSeconds="false" DateFormat="dd/MM/yyyy" Class="w-75" />
                            <br />
                            <label>Color</label>
                            <InputText class="form-control" @bind-Value="@oCotizacione.Color" placeholder="Color"></InputText>

                    </div>
                
                </div>
                <br />

            
              

                   

    <div class="row">
        <div>
            <RadzenText TextStyle="TextStyle.Body1"><b>Planos </b> </RadzenText>
        </div>

                                @foreach (var plano in planos.ToList())
                                {
            <div style="display:flex; flex-direction: row;">
                <a style="margin-top:8px" href="planos/@plano" download target="_blank">@plano</a>

                <button class="btn" @onclick='()=>alertaDelete(plano, "plano")'><FeatherX Color="red"></FeatherX></button>

            </div>
            <br />
                                }
        <InputFile OnChange="@OnInputFileChangePla" multiple />
        <br />
        <br />
        <br />

    </div>




    <div class="row">
        <div>
            <RadzenText TextStyle="TextStyle.Body1"><b>Cotización </b> </RadzenText>
        </div>



                                @foreach (var cotizacion in cotizaciones.ToList())
                                {
            <div style="display:flex; flex-direction: row;">
                <a style="margin-top:8px" href="cotizaciones/@cotizacion" download target="_blank">@cotizacion</a>

                <button class="btn" @onclick='()=>alertaDelete(cotizacion, "cotizacion")'><FeatherX Color="red"></FeatherX></button>
            </div>
            <br />
                                }
        <InputFile OnChange="@OnInputFileChange" multiple />
        <br />
        <br />

        <br />
    </div>



    <div class="row">
        <div>
            <RadzenText TextStyle="TextStyle.Body1"><b>Remito </b> </RadzenText>
        </div>

                                @foreach (var remito in remitos.ToList())
                                {

            <div style="display:flex; flex-direction: row;">
                <a style="margin-top:8px" href="remitos/@remito" download target="_blank">@remito</a>

                <button class="btn" @onclick='()=>alertaDelete(remito, "remito")'><FeatherX Color="red"></FeatherX></button>

            </div>
            <br />
                                }
        <InputFile OnChange="@OnInputFileChangeRem" multiple />
        <br />
        <br />
        <br />


    </div>

   

                
                     </RadzenStepsItem>





    <RadzenStepsItem Text="ESPECIFICACIONES Y EQUIPAMIENTO">

        <div class="row">
            <div class="col-sm-6">
                <label>Chapa Estructura</label>
                <InputText class="form-control" @bind-Value="oTrabajo.ChapaEstructura" placeholder="Chapa Estructura"></InputText>
                <ValidationMessage For="(() => oTrabajo.ChapaEstructura)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Chapa Puertas</label>
                <InputText class="form-control" @bind-Value="oTrabajo.ChapaPuertas" placeholder="Chapa Puertas"></InputText>
                <ValidationMessage For="(() => oTrabajo.ChapaPuertas)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Chapa Bandejas</label>
                <InputText class="form-control" @bind-Value="oTrabajo.ChapaBandejas" placeholder="Chapa Bandejas"></InputText>
                <ValidationMessage For="(() => oTrabajo.ChapaBandejas)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Zócalo/Trineo</label>
                <InputText class="form-control" @bind-Value="oTrabajo.Zocalo_Trineo" placeholder="Zócalo/Trineo"></InputText>
                <ValidationMessage For="(() => oTrabajo.Zocalo_Trineo)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Portaplanos</label>
                <InputText class="form-control" @bind-Value="oTrabajo.Portaplanos" placeholder="Portaplanos"></InputText>
                <ValidationMessage For="(() => oTrabajo.Portaplanos)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Traba Antiviento</label>
                <InputText class="form-control" @bind-Value="oTrabajo.TrabaViento" placeholder="Traba Antiviento"></InputText>
                <ValidationMessage For="(() => oTrabajo.TrabaViento)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Contrafrentes</label>
                <InputText class="form-control" @bind-Value="oTrabajo.Contrafrentes" placeholder="Contrafrentes"></InputText>
                <ValidationMessage For="(() => oTrabajo.Contrafrentes)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Tipo de Cierre</label>
                <InputText class="form-control" @bind-Value="oTrabajo.TipoCierre" placeholder="Tipo de Cierre"></InputText>
                <ValidationMessage For="(() => oTrabajo.TipoCierre)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Sentido de Puertas</label>
                <InputText class="form-control" @bind-Value="oTrabajo.SentidoPuertas" placeholder="Sentido de Puertas"></InputText>
                <ValidationMessage For="(() => oTrabajo.SentidoPuertas)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Cáncamos</label>
                <InputText class="form-control" @bind-Value="oTrabajo.Cancamos" placeholder="Cáncamos"></InputText>
                <ValidationMessage For="(() => oTrabajo.Cancamos)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Doble Marco Interno</label>
                <InputText class="form-control" @bind-Value="oTrabajo.DobleMarcoInterno" placeholder="Doble Marco Interno"></InputText>
                <ValidationMessage For="(() => oTrabajo.DobleMarcoInterno)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Caballetes Térmicas</label>
                <InputText class="form-control" @bind-Value="oTrabajo.CaballetesTermicas" placeholder="Caballetes Térmicas"></InputText>
                <ValidationMessage For="(() => oTrabajo.CaballetesTermicas)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Caballetes Interruptores</label>
                <InputText class="form-control" @bind-Value="oTrabajo.CaballetesInterruptores" placeholder="Caballetes Interruptores"></InputText>
                <ValidationMessage For="(() => oTrabajo.CaballetesInterruptores)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Tapas de Piso</label>
                <InputText class="form-control" @bind-Value="oTrabajo.TapasPiso" placeholder="Tapas de Piso"></InputText>
                <ValidationMessage For="(() => oTrabajo.TapasPiso)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Perfiles C1 y C2</label>
                <InputText class="form-control" @bind-Value="oTrabajo.PerfilesC1yC2" placeholder="Perfiles C1 y C2"></InputText>
                <ValidationMessage For="(() => oTrabajo.PerfilesC1yC2)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Perfiles Omega</label>
                <InputText class="form-control" @bind-Value="oTrabajo.PerfilesOmega" placeholder="Perfiles Omega"></InputText>
                <ValidationMessage For="(() => oTrabajo.PerfilesOmega)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Sistemas de Aisladores</label>
                <InputText class="form-control" @bind-Value="oTrabajo.SistemasAisladores" placeholder="Sistemas de Aisladores"></InputText>
                <ValidationMessage For="(() => oTrabajo.SistemasAisladores)" style="color:red;" />
            </div>

            <div class="col-sm-6">
                <label>Rejillas de Ventilación</label>
                <InputText class="form-control" @bind-Value="oTrabajo.RejillasVentilacion" placeholder="Rejillas de Ventilación"></InputText>
                <ValidationMessage For="(() => oTrabajo.RejillasVentilacion)" style="color:red;" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-6">
                <label>Sobretecho</label>
                <InputText class="form-control" @bind-Value="oTrabajo.Sobretecho" placeholder="Sobretecho"></InputText>
                <ValidationMessage For="(() => oTrabajo.Sobretecho)" style="color:red;" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <label>Referencia</label>
                <InputText class="form-control" @bind-Value="oTrabajo.Referencia" placeholder="Referencia"></InputText>
                <ValidationMessage For="(() => oTrabajo.Referencia)" style="color:red;" />
            </div>
        </div>






    </RadzenStepsItem>
                                    </Steps>
                        </RadzenSteps>
    <br />


                <button type="submit" class="btn btn-primary mr-2" disabled=@disable >Duplicar</button>
                <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}



@code {
    bool disable;

    Cotizacione? oCotizacione = new();
    Respuesta<Cotizacione>? oRta = new();

    Ordentrabajo? oTrabajo = new();


    Respuesta<List<Cliente>>? oRtaCliente = new();
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    List<string>? planos = new();
    List<string>? cotizaciones = new();
    List<string>? remitos = new();
    List<string>? Descripcion = new();
    string? descriptionValue;


    private List<UploadResult>? uploadResultsPla = new();
    private List<UploadResult>? uploadResultsCot = new();
    private List<UploadResult>? uploadResultsRem = new();



    MultipartFormDataContent contentPla = new MultipartFormDataContent();
    MultipartFormDataContent contentCot = new MultipartFormDataContent();
    MultipartFormDataContent contentRem = new MultipartFormDataContent();

    List<string> tipo = new List<string>
    {
        "ACC","CT","GA","GC","GE","GI","GM","GP","RX"
    };


    //upload files
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 50;
    private bool shouldRender;
    MultipartFormDataContent content = new MultipartFormDataContent();
    RadzenSteps? steps;


    string? codigo;

    protected override async Task OnInitializedAsync()
    {
        disable = false;

        oRtaCliente = await http.GetFromJsonAsync<Respuesta<List<Cliente>>>($"/api/Cliente");


        oRta = await http.GetFromJsonAsync<Respuesta<Cotizacione>>($"/api/Cotizacion/{id}");
        oCotizacione = oRta.List;
        oCotizacione.Fechaentrega = DateTime.Now;
        oCotizacione.FechaPedidoFabrica = DateTime.Now;
        oCotizacione.Id = 0;
        oCotizacione.Planos = null;
        // oCotizacione.Cotizaciones = null;
        // oCotizacione.Remito = null;


        var rta = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{oCotizacione.Codigo}");
        oTrabajo = rta.List;

        // var planoClean = oCotizacione.Planos?.Replace("`", "");
        // if (!string.IsNullOrWhiteSpace(planoClean))
        // {
        //     planos = JsonSerializer.Deserialize<List<string>>(planoClean);
        // }
        // else
        // {
        //     planos = new List<string>();
        // }
        var cotizacionesClean = oCotizacione.Cotizaciones?.Replace("`", "");
        if (!string.IsNullOrWhiteSpace(cotizacionesClean))
        {
            cotizaciones = JsonSerializer.Deserialize<List<string>>(cotizacionesClean);
        }

        var remitosClean = oCotizacione.Remito?.Replace("`", "");
        if (!string.IsNullOrWhiteSpace(remitosClean))
        {
            remitos = JsonSerializer.Deserialize<List<string>>(remitosClean);
        }

        var planosClean = oCotizacione.Planos?.Replace("`", "");
        if (!string.IsNullOrWhiteSpace(planosClean))
        {
            planos = JsonSerializer.Deserialize<List<string>>(planosClean);
        }


        var descripcionClean = oCotizacione.Descripcion?.Replace("`", "");

        if (!string.IsNullOrWhiteSpace(descripcionClean))
        {
            Descripcion = JsonSerializer.Deserialize<List<string>>(descripcionClean);
        }
        else
        {
            Descripcion = new List<string>();
        }



        codigo = oCotizacione.Codigo;
    }

    async Task Guardar()
    {
        if (string.IsNullOrEmpty(oCotizacione.Titulo))
        {
            await alertaError("un título");

        }
        else if (string.IsNullOrEmpty(oCotizacione.Cliente))
        {
            await alertaError("un cliente");
        }
        else if (string.IsNullOrEmpty(oCotizacione.Cantidad))
        {
            await alertaError("una cantidad");
        }
        else if (string.IsNullOrEmpty(oCotizacione.Valorpeso))
        {
            await alertaError("un precio");
        }
        else if (string.IsNullOrEmpty(oCotizacione.Codigo))
        {
            await alertaError("un número");
        }
        else
        {
            if (oCotizacione.FechaPedidoFabrica == null)
            {
                oCotizacione.FechaPedidoFabrica = DateTime.Now;
            }

            disable = true;
            oCotizacione.Descripcion = JsonSerializer.Serialize<List<string>>(Descripcion);
            var client = ClientFactory.CreateClient();
            var response = await client.PostAsync($"{nav.BaseUri}filesave", content);

            if (response.IsSuccessStatusCode)
            {
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

                using var responseStream = await response.Content.ReadAsStreamAsync();

                var newUploadResults = await JsonSerializer.DeserializeAsync<IList<UploadResult>>(responseStream, options);

                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
            }

            oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);

            oCotizacione.Id = 0;
            oCotizacione.Estado = "Cargado";



            try
            {
                Console.WriteLine(codigo);

                //Console.WriteLine($"la cantidad es: {oTrabajo.Cantidad}");
                oTrabajo.Id = 0;
                oTrabajo.Cantidad = oCotizacione.Cantidad;
                oTrabajo.Color = oCotizacione.Color;
                oTrabajo.Titulo = oCotizacione.Titulo;
                oTrabajo.Obra = oCotizacione.Obra;
                oTrabajo.Codigo = oCotizacione.Codigo;
                oTrabajo.Descripcion = oCotizacione.Descripcion;
                oTrabajo.Referencia = oCotizacione.Referencia;
                oTrabajo.Fechaentrega = oCotizacione.Fechaentrega;
                oTrabajo.Fechaaplazada = oCotizacione.Fechaentrega;
                oTrabajo.Planos = oCotizacione.Planos;
                oTrabajo.Cliente = oCotizacione.Cliente;
                oTrabajo.Pedidofabrica = oCotizacione.FechaPedidoFabrica;
                oTrabajo.Lugarentrega = oCotizacione.Lugarentrega;
                oTrabajo.OC = oCotizacione.Codigo;

                 
                    await http.PostAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }



            await http.PostAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
            await ModalInstance.CloseAsync(ModalResult.Ok());
        }
            // }
            // else
            // {
            //     try
            //     {
            //         Ordentrabajo oOrdenTrabajo = new();
            //         Console.WriteLine(codigo);
            //         var oRta = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/Ot/{codigo}");
            //         oOrdenTrabajo = oRta.List;
            //         //Console.WriteLine($"la cantidad es: {oOrdenTrabajo.Cantidad}");
            //         oOrdenTrabajo.Cantidad = oCotizacione.Cantidad;
            //         oOrdenTrabajo.Color = oCotizacione.Color;
            //         oOrdenTrabajo.Titulo = oCotizacione.Titulo;
            //         oOrdenTrabajo.Obra = oCotizacione.Obra;
            //         oOrdenTrabajo.Codigo = oCotizacione.Codigo;
            //         oOrdenTrabajo.Descripcion = oCotizacione.Descripcion;
            //         oOrdenTrabajo.Referencia = oCotizacione.Referencia;
            //         oOrdenTrabajo.Fechaentrega = oCotizacione.Fechaentrega;
            //         oOrdenTrabajo.Fechaaplazada = oCotizacione.Fechaentrega;
            //         oOrdenTrabajo.Planos = oCotizacione.Planos;
            //         oOrdenTrabajo.Cliente = oCotizacione.Cliente;
            //         await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oOrdenTrabajo);
            //     }
            //     catch (Exception ex)
            //     {
            //         Console.WriteLine(ex.Message);
            //     }
            //     await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
            //     await ModalInstance.CloseAsync(ModalResult.Ok());

            // }
        
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());

    }

    // private async Task OnInputFileChange(InputFileChangeEventArgs e)
    // {
    //     shouldRender = false;
    //     long maxFileSize = 1024 * 1500000;

    //     var upload = false;

    //     foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
    //     {
    //         planos.Add(file.Name);
    //         if (uploadResults.SingleOrDefault(
    //             f => f.FileName == file.Name) is null)
    //         {
    //             try
    //             {

    //                 var fileContent =
    //                     new StreamContent(file.OpenReadStream(maxFileSize));



    //                 files.Add(new() { Name = file.Name });

    //                 content.Add(
    //                     content: fileContent,
    //                     name: "\"files\"",
    //                     fileName: file.Name);
    //                 upload = true;
    //             }
    //             catch (Exception ex)
    //             {

    //                 Console.WriteLine(ex.Message);

    //                 uploadResults.Add(
    //                     new()
    //                         {
    //                             FileName = file.Name,
    //                             ErrorCode = 6,
    //                             Uploaded = false
    //                         });
    //             }
    //         }
    //     }


    //     shouldRender = true;
    // }
    // public async Task alertaDelete(string plano)
    // {
    //     SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
    //         {
    //             Title = "¿Está seguro?",
    //             Text = "Se eliminará este plano",
    //             Icon = SweetAlertIcon.Warning,
    //             ShowCancelButton = true,
    //             ConfirmButtonText = "Eliminar",
    //             CancelButtonText = "Cancelar"
    //         });

    //     if (!string.IsNullOrEmpty(result.Value))
    //     {
    //         deletePlano(plano);

    //     }
    //     else if (result.Dismiss == DismissReason.Cancel)
    //     {

    //     }
    // }
    // public async Task deletePlano(string plano)
    // {
    //     planos = planos.Where(x => x != plano).ToList();
    //     oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
    //     try
    //     {
    //         await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
    //     }
    //     catch
    //     {
    //         Console.WriteLine("No posteado");
    //     }

    // }
    // private class File
    // {
    //     public string? Name { get; set; }
    // }
    public async Task addDescription()
    {
        Descripcion.Add(descriptionValue);
    }
    public async Task deleteDescription(string descriptionValue)
    {
        Descripcion.Remove(descriptionValue);
    }



    // public async Task deletePlano(string archivo, string tipo)
    // {

    //     if (tipo == "remito")
    //     {
    //         remitos = remitos.Where(x => x != archivo).ToList();
    //         oCotizacione.Remito = JsonSerializer.Serialize<List<string>>(remitos);
    //         await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
    //     }
    //     if (tipo == "cotizacion")
    //     {
    //         cotizaciones = cotizaciones.Where(x => x != archivo).ToList();
    //         oCotizacione.Cotizaciones = JsonSerializer.Serialize<List<string>>(cotizaciones);
    //         await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
    //     }
    //     else
    //     {
    //         planos = planos.Where(x => x != archivo).ToList();
    //         oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
    //         await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
    //     }




    // }














    public async Task alertaDelete(string archivo, string tipo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Se eliminará este {tipo}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deletePlano(archivo, tipo);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }




    // public async Task alertaDelete(string archivo, string tipo)
    // {
    //     SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
    //         {
    //             Title = "¿Está seguro?",
    //             Text = $"Se eliminará este {tipo}",
    //             Icon = SweetAlertIcon.Warning,
    //             ShowCancelButton = true,
    //             ConfirmButtonText = "Eliminar",
    //             CancelButtonText = "Cancelar"
    //         });

    //     if (!string.IsNullOrEmpty(result.Value))
    //     {
    //         await deletePlano(archivo, tipo);

    //     }
    //     else if (result.Dismiss == DismissReason.Cancel)
    //     {

    //     }
    // }


    public async Task deletePlano(string archivo, string tipo)
    {

        if (tipo == "remito")
        {
            remitos = remitos.Where(x => x != archivo).ToList();
            oCotizacione.Remito = JsonSerializer.Serialize<List<string>>(remitos);
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }
        if (tipo == "cotizacion")
        {
            cotizaciones = cotizaciones.Where(x => x != archivo).ToList();
            oCotizacione.Cotizaciones = JsonSerializer.Serialize<List<string>>(cotizaciones);
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }
        else
        {
            planos = planos.Where(x => x != archivo).ToList();
            oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }




    }
    private async Task OnInputFileChangeRem(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            remitos.Add(file.Name);
            if (uploadResultsRem.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    contentRem.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                    uploadResultsRem.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }
        shouldRender = true;
        await uploadPlano("remitos");
        oCotizacione.Remito = JsonSerializer.Serialize<List<string>>(remitos);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        files = new();
        contentRem = new();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            cotizaciones.Add(file.Name);
            // if (uploadResultsCot.SingleOrDefault(
            //     f => f.FileName == file.Name) is null)
            // {
            try
            {

                var fileContent =
                    new StreamContent(file.OpenReadStream(maxFileSize));



                files.Add(new() { Name = file.Name });

                contentCot.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);
                upload = true;
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);

                uploadResultsCot.Add(
                    new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
            }
            //}
        }
        shouldRender = true;
        await uploadPlano("cotizaciones");
        oCotizacione.Cotizaciones = JsonSerializer.Serialize<List<string>>(cotizaciones);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        files = new();
        contentCot = new();
    }



    private async Task OnInputFileChangePla(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            planos.Add(file.Name);
            if (uploadResultsPla.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    contentPla.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);
                    uploadResultsCot.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }
        shouldRender = true;
        await uploadPlano("");
        oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        files = new();
        contentPla = new();
    }





    private class File
    {
        public string? Name { get; set; }
    }

    public async Task uploadPlano(string? address)
    {
        var client = ClientFactory.CreateClient();
        HttpResponseMessage response;
        if (address == "remitos")
        {
            response = await client.PostAsync($"{nav.BaseUri}filesave/{address}", contentRem);

        }
        else if (address == "cotizaciones")
        {
            response = await client.PostAsync($"{nav.BaseUri}filesave/{address}", contentCot);

        }
        else
        {
            response = await client.PostAsync($"{nav.BaseUri}filesave/{address}", contentPla);

        }

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

            using var responseStream = await response.Content.ReadAsStreamAsync();

            var newUploadResults = await JsonSerializer.DeserializeAsync<IList<UploadResult>>(responseStream, options);


            if (newUploadResults is not null)
            {
                if (address == "planos")
                {

                    uploadResultsPla = uploadResultsPla.Concat(newUploadResults).ToList();
                }
                else if (address == "cotizaciones")
                {
                    uploadResultsCot = uploadResultsCot.Concat(newUploadResults).ToList();

                }
                else
                {
                    uploadResultsRem = uploadResultsRem.Concat(newUploadResults).ToList();

                }
            }
        }
    }



}