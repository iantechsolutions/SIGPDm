@using System.Text.Json
@if (oCotizacione != null)
{

    <RadzenCard Class="my-3 rz-background-color-primary-lighter rz-shadow-0 rz-border-radius-0" style="margin: 0 calc(-1 * var(--rz-card-padding)); padding: 2rem;">
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Titulo</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Titulo</b></RadzenText>
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Cliente</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Cliente</b></RadzenText>
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Descripción</RadzenText>
        @foreach (var item in Descripcion)
        {
            <RadzenText TextStyle="TextStyle.Body1"><b>@item</b></RadzenText>

        }
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Precio</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Valorpeso</b></RadzenText>
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Referencia</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Referencia</b></RadzenText>

        <div class="row">
            <div class="col-2">
                <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Planos  </RadzenText>
            </div>


            <div class="col-10" style="text-align:right;">
                <br>
                <InputFile OnChange="@OnInputFileChange" multiple />
            </div>

        </div>


        @foreach (var plano in planos.ToList())
        {
            <a href="planos/@plano" download target="_blank">@plano</a>

            <button class="btn" @onclick="()=>alertaDelete(plano)"><FeatherX Color="red"></FeatherX></button>

            <br />
        }
    </RadzenCard>
    <div class="text-end">
        <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color" Text="Cerrar" Click="cancel" />
        @if (oCotizacione.Estado == "Cargado")
        {
            <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Rechazar" Click="rechazar" />
            <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" Text="Aprobar cotización" Click="aprobar" />
        }
        @if (oCotizacione.Estado == "Rechazada" || oCotizacione.Estado == "Aprobada")
        {
            <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Mover a pendiente" Click="Cargado" />
        }
    </div>



}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    Cotizacione oCotizacione = new();
    Respuesta<Cotizacione> oRta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    List<string> planos = new();
    List<string> Descripcion = new();
    //upload files
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 10;
    private bool shouldRender;
    MultipartFormDataContent content = new MultipartFormDataContent();

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            oRta = await http.GetFromJsonAsync<Respuesta<Cotizacione>>($"/api/Cotizacion/{id}");
            oCotizacione = oRta.List;
            planos = JsonSerializer.Deserialize<List<string>>(oCotizacione.Planos);
            Descripcion = JsonSerializer.Deserialize<List<string>>(oCotizacione.Descripcion);
        }
    }
    async Task cancel()
    {

        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }

    async Task rechazar()
    {

        oCotizacione.Estado = "Rechazada";
        var respuesta = await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }
    async Task Cargado()
    {
        //borro, si existe, la OT.
        try
        {
            var respuesta = await http.DeleteAsync($"/api/OT/codigo/{oCotizacione.Codigo}");
            Console.WriteLine(respuesta.IsSuccessStatusCode);
        }
        catch
        {

        }
        //guardo estado
        {
            oCotizacione.Estado = "Cargado";
            var respuesta = await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
        }
    }

    async Task aprobar()
    {
        Ordentrabajo oTrabajo = new();

        oCotizacione.Estado = "Aprobada";
        oTrabajo.Cantidad = oCotizacione.Cantidad;
        oTrabajo.Descripcion = oCotizacione.Descripcion;
        oTrabajo.Referencia = oCotizacione.Referencia;
        oTrabajo.Fechaentrega = oCotizacione.Fechaentrega;
        oTrabajo.Fechaaplazada = oCotizacione.Fechaentrega;
        oTrabajo.Pedidofabrica = DateTime.Now;
        oTrabajo.Planos = oCotizacione.Planos;
        oTrabajo.Estado = "Oficina tecnica";
        oTrabajo.Cliente = oCotizacione.Cliente;
        oTrabajo.Codigo = oCotizacione.Codigo;
        oTrabajo.Color = oCotizacione.Color;
        oTrabajo.Titulo = oCotizacione.Titulo;
        oTrabajo.Obra = oCotizacione.Obra;
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        var rta = await http.PostAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        Console.WriteLine(rta.IsSuccessStatusCode);
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    public async Task alertaDelete(string plano)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este plano",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deletePlano(plano);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task deletePlano(string plano)
    {
        planos = planos.Where(x => x != plano).ToList();
        oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);

    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            planos.Add(file.Name);
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }
        shouldRender = true;
        await uploadPlano();
        oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
    }
    private class File
    {
        public string? Name { get; set; }
    }

    public async Task uploadPlano()
    {
        var client = ClientFactory.CreateClient();
        var response = await client.PostAsync($"{nav.BaseUri}filesave", content);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

            using var responseStream = await response.Content.ReadAsStreamAsync();

            var newUploadResults = await JsonSerializer.DeserializeAsync<IList<UploadResult>>(responseStream, options);

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }
    }
}
