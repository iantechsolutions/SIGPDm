@using System.Text.Json
@if (oCotizacione != null)
{

    <RadzenCard Class="my-3 rz-background-color-primary-lighter rz-shadow-0 rz-border-radius-0" style="margin: 0 calc(-1 * var(--rz-card-padding)); padding: 2rem;">
        <div class="row">
        <div class="col-sm-6">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-1 mb-0">Titulo</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Titulo</b></RadzenText>
        </div>
        <div class="col-sm-6">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Cliente</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Cliente</b></RadzenText>
        </div>
        <div class="col-sm-6">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Referencia</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Referencia</b></RadzenText>
        </div>
        <div class="col-sm-6">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Precio</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Valorpeso</b></RadzenText>
        </div>
        <div class="col-sm-6">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Descripción</RadzenText>
            @foreach (var item in Descripcion)
            {
                <RadzenText TextStyle="TextStyle.Body1"><b>@item</b></RadzenText>

            }
        </div>
        <div class="col-sm-6">
            <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Tipo</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oCotizacione.Tipo</b></RadzenText>
        </div>
        </div>
        <br/>
         <br/>
        <div class="row">
            <div>
                <RadzenText TextStyle="TextStyle.Body1"><b>Planos </b> </RadzenText>
            </div>
                
            @foreach (var plano in planos.ToList())
            {
                <div style="display:flex; flex-direction: row;">
                <a style="margin-top:8px" href="planos/@plano" download target="_blank">@plano</a>

                <button class="btn" @onclick='()=>alertaDelete(plano, "plano")'><FeatherX Color="red"></FeatherX></button>

                </div>
                <br />
            }
                <InputFile OnChange="@OnInputFileChangePla" multiple />
            <br />
            <br />
            <br />

        </div>
       
        

        
        <div class="row">
            <div >
                <RadzenText TextStyle="TextStyle.Body1"><b>Cotización </b> </RadzenText>
            </div>


            
            @foreach (var cotizacion in cotizaciones.ToList())
            {
                <div style="display:flex; flex-direction: row;">
                <a style="margin-top:8px" href="cotizaciones/@cotizacion" download target="_blank">@cotizacion</a>

                <button class="btn" @onclick='()=>alertaDelete(cotizacion, "cotizacion")'><FeatherX Color="red"></FeatherX></button>
                </div>
                <br />
            }
                <InputFile OnChange="@OnInputFileChange" multiple />
                <br/>
            <br />

                <br />
            </div>
      


        <div class="row">
            <div >
                <RadzenText TextStyle="TextStyle.Body1"><b>Remito </b> </RadzenText>
            </div>

            @foreach (var remito in remitos.ToList())
            {
              
                <div style="display:flex; flex-direction: row;">
                <a style="margin-top:8px" href="remitos/@remito" download target="_blank">@remito</a>

                <button class="btn"  @onclick='()=>alertaDelete(remito, "remito")'><FeatherX Color="red"></FeatherX></button>

                </div>
                <br />
            }
            <InputFile OnChange="@OnInputFileChangeRem" multiple />
            <br/>
            <br />
            <br />

            
        </div>


       
    </RadzenCard>
    <div class="text-end">
        <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color" Text="Cerrar" Click="cancel" />
        @if (oCotizacione.Estado == "Cargado")
        {
            <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Rechazar" Click="rechazar" />
            <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" Text="Aprobar cotización" Click="aprobar" />
        }
        @if (oCotizacione.Estado == "Rechazada" || oCotizacione.Estado == "Aprobada")
        {
            <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Mover a pendiente" Click="Cargado" />
            <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Style="float:left" Text="Duplicar" Click="Duplicar" />

        }
    </div>



}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    Cotizacione? oCotizacione = new();
    Ordentrabajo? oTrabajo = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    Respuesta<Cotizacione>? oRta = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    List<string>? cotizaciones = new();
    List<string>? remitos = new();
    List<string>? planos = new();


    List<string>? Descripcion = new();
    //upload files
    private List<File>? files = new();
    private List<UploadResult>? uploadResultsPla = new();
    private List<UploadResult>? uploadResultsCot = new();
    private List<UploadResult>? uploadResultsRem = new();

    private int maxAllowedFiles = 50;
    private bool shouldRender;
    MultipartFormDataContent contentPla = new MultipartFormDataContent();
    MultipartFormDataContent contentCot = new MultipartFormDataContent();
    MultipartFormDataContent contentRem = new MultipartFormDataContent();


    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            oRta = await http.GetFromJsonAsync<Respuesta<Cotizacione>>($"/api/Cotizacion/{id}");
            oCotizacione = oRta.List;

            var descripcionClean = oCotizacione.Descripcion?.Replace("`", "");
            if (!string.IsNullOrWhiteSpace(descripcionClean))
            {
                Descripcion = JsonSerializer.Deserialize<List<string>>(descripcionClean);
            }

            var rta = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{oCotizacione.Codigo}");
            oTrabajo = rta.List;


            var cotizacionesClean = oCotizacione.Cotizaciones?.Replace("`", "");
            if (!string.IsNullOrWhiteSpace(cotizacionesClean))
            {
                cotizaciones = JsonSerializer.Deserialize<List<string>>(cotizacionesClean);
            }

            var remitosClean = oCotizacione.Remito?.Replace("`", "");
            if (!string.IsNullOrWhiteSpace(remitosClean))
            {
                remitos = JsonSerializer.Deserialize<List<string>>(remitosClean);
            }

            var planosClean = oCotizacione.Planos?.Replace("`", "");
            if (!string.IsNullOrWhiteSpace(planosClean))
            {
                planos = JsonSerializer.Deserialize<List<string>>(planosClean);
            }



        }
    }
    async Task cancel()
    {

        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }

    async Task rechazar()
    {

        oCotizacione.Estado = "Rechazada";
        var respuesta = await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }
    async Task Cargado()
    {
        //borro, si existe, la OT.
        try
        {
            var respuesta = await http.DeleteAsync($"/api/OT/codigo/{oCotizacione.Codigo}");
            Console.WriteLine(respuesta.IsSuccessStatusCode);
        }
        catch
        {

        }
        //guardo estado
        {
            oCotizacione.Estado = "Cargado";
            var respuesta = await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
        }
    }

    async Task aprobar()
    {

        oCotizacione.Estado = "Aprobada";
        oTrabajo.Cantidad = oCotizacione.Cantidad;
        oTrabajo.Descripcion = oCotizacione.Descripcion;
        oTrabajo.Referencia = oCotizacione.Referencia;
        oTrabajo.Fechaentrega = oCotizacione.Fechaentrega;
        oTrabajo.Fechaaplazada = oCotizacione.Fechaentrega;
        oTrabajo.Pedidofabrica = DateTime.Now;
        oTrabajo.Planos = oCotizacione.Planos;
        oTrabajo.Cotizaciones = oCotizacione.Cotizaciones;
        oTrabajo.Remitos = oCotizacione.Remito;
        oTrabajo.Estado = "Oficina tecnica";
        oTrabajo.Cliente = oCotizacione.Cliente;
        oTrabajo.Codigo = oCotizacione.Codigo;
        oTrabajo.Color = oCotizacione.Color;
        oTrabajo.Titulo = oCotizacione.Titulo;
        oTrabajo.UltimaEtapa = DateTime.Now;
        oTrabajo.Obra = oCotizacione.Obra;
        oTrabajo.UltimaEtapa = DateTime.Now;
        oTrabajo.Fechas = "[{}]";
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        if(oTrabajo.Id != 0)
        {
            var rta = await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
            Console.WriteLine(rta.IsSuccessStatusCode);

        }
        else
        {
            var rta = await http.PostAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        Console.WriteLine(rta.IsSuccessStatusCode);
        }
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
    async Task Duplicar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"La cotizacion se duplicara",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Duplicar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
                
                    var parameters = new ModalParameters();
                    parameters.Add(nameof(DuplicarCotizacion.id), id);
                    var options = new ModalOptions()
                        {
                            Size = ModalSize.Large
                        };

            var formModal = Modal.Show<DuplicarCotizacion>("Duplicar orden de trabajo", parameters, options);
                    var result1 = await formModal.Result;

                    if (result1.Cancelled)
                    {
                        Console.WriteLine("Modal was cancelled");
                    }
                    else
                    {
                        await OnInitializedAsync();
                    }
               
        }

        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }

    async Task add(int id)
    {
        if (id != 0)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddCotizacion.id), id);
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large
                };

            // Abres el modal para editar la cotización
            var formModal = Modal.Show<AddCotizacion>("Editar Cotizacion", parameters, options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await OnInitializedAsync();
            }
        }
        else
        {
            var options = new ModalOptions()
                {
                    Size = ModalSize.Large
                };

            var formModal = Modal.Show<AddCotizacion>("Agregar Cotizacion", options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
            }
            else
            {
                await OnInitializedAsync();
            }
        }
    }
    public async Task alertaDelete(string archivo, string tipo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = $"Se eliminará este {tipo}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deletePlano(archivo, tipo);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }


    public async Task deletePlano(string archivo, string tipo)
    {

        if (tipo == "remito")
        {
            remitos = remitos.Where(x => x != archivo).ToList();
            oCotizacione.Remito = JsonSerializer.Serialize<List<string>>(remitos);
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }
        if (tipo == "cotizacion")
        {
            cotizaciones = cotizaciones.Where(x => x != archivo).ToList();
            oCotizacione.Cotizaciones = JsonSerializer.Serialize<List<string>>(cotizaciones);
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }
        else
        {
            planos = planos.Where(x => x != archivo).ToList();
            oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
            await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        }




    }
    private async Task OnInputFileChangeRem(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            remitos.Add(file.Name);
            if (uploadResultsRem.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    contentRem.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                    uploadResultsRem.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }
        shouldRender = true;
        await uploadPlano("remitos");
        oCotizacione.Remito = JsonSerializer.Serialize<List<string>>(remitos);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        files = new();
        contentRem = new();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            cotizaciones.Add(file.Name);
            // if (uploadResultsCot.SingleOrDefault(
            //     f => f.FileName == file.Name) is null)
            // {
            try
            {

                var fileContent =
                    new StreamContent(file.OpenReadStream(maxFileSize));



                files.Add(new() { Name = file.Name });

                contentCot.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);
                upload = true;
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);

                uploadResultsCot.Add(
                    new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
            }
            //}
        }
        shouldRender = true;
        await uploadPlano("cotizaciones");
        oCotizacione.Cotizaciones = JsonSerializer.Serialize<List<string>>(cotizaciones);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        files = new();
        contentCot = new();
    }



    private async Task OnInputFileChangePla(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 1500000;

        var upload = false;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            planos.Add(file.Name);
            if (uploadResultsPla.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    contentPla.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);
                    uploadResultsCot.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }
        shouldRender = true;
        await uploadPlano("");
        oCotizacione.Planos = JsonSerializer.Serialize<List<string>>(planos);
        await http.PutAsJsonAsync<Cotizacione>("/api/Cotizacion", oCotizacione);
        files = new();
        contentPla = new();
    }

    private class File
    {
        public string? Name { get; set; }
    }

    public async Task uploadPlano(string? address)
    {
        var client = ClientFactory.CreateClient();
        HttpResponseMessage response;
        if (address == "remitos")
        {
            response = await client.PostAsync($"{nav.BaseUri}filesave/{address}", contentRem);

        }
        else if (address == "cotizaciones")
        {
            response = await client.PostAsync($"{nav.BaseUri}filesave/{address}", contentCot);

        }
        else
        {
            response = await client.PostAsync($"{nav.BaseUri}filesave/{address}", contentPla);

        }

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

            using var responseStream = await response.Content.ReadAsStreamAsync();

            var newUploadResults = await JsonSerializer.DeserializeAsync<IList<UploadResult>>(responseStream, options);


            if (newUploadResults is not null)
            {
                if(address == "planos")
                {

                    uploadResultsPla = uploadResultsPla.Concat(newUploadResults).ToList();
                }
                else if(address == "cotizaciones")
                {
                    uploadResultsCot = uploadResultsCot.Concat(newUploadResults).ToList();

                }
                else
                {
                    uploadResultsRem = uploadResultsRem.Concat(newUploadResults).ToList();

                }
            }
        }
    }
}
