@using BlazorApp1.Shared.Models
@using Newtonsoft.Json;
    @if (oRespuestaTrabajos != null && oRespuestaEventos != null){
        @for (int i=0;i<oRespuestaTrabajos.Count();i=i+2){
            <div class="row">
                @foreach(var entrega in oRespuestaTrabajos.Skip(i).Take(2)){
                    <RadzenCard Class="m-3" style="object-fit: contain;">
                        <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Codigo de orden: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@($"OT{entrega.Codigo}")</RadzenText>
                        <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Cliente: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@entrega.Cliente</RadzenText>
                        <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Etapa actual: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@entrega.Estado</RadzenText>
@*                        <button class="btn" title="Aplazar" @onclick="() => aplazar(entrega)"><FeatherSkipForward Color="black" /></button>
*@                        <br/>
                    </RadzenCard>
                }
            </div>
        }
        @if(oRespuestaEventos.Count()>0){
        <RadzenCard Class="m-3" style="object-fit: contain;">
            <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Eventos adicionales: </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@oRespuestaEventos.First().Descripcion </RadzenText>
            <button class="btn" style="float:left" title="Eliminar" @onclick="() => alertaDelete(oRespuestaEventos.First().Id)"><FeatherTrash2 Color="red" /></button>
            <button class="btn" style="float: right;" title="Editar evento" @onclick="() => add(diaElegido)"><FeatherEdit Color="green" /></button>
            <br />
        </RadzenCard>
        }
        else
        {
            <button class="btn" style="float: right;" title="Agregar evento" @onclick="() => add(diaElegido)"><FeatherPlus Color="blue" /></button>
            <br />
        }   
    }
    <br/>


@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    IEnumerable<Ordentrabajo> oRespuestaTrabajos = new List<Ordentrabajo>();
    IEnumerable<FechasEvento> oRespuestaEventos = new List<FechasEvento>();
    [Parameter] public FechasEvento oFechaEvento { get; set; }
    public DateTime? diaElegido { get; set; }
    public IEnumerable<FechasEvento> fechaFiltrada = new List<FechasEvento>();
    protected override async Task OnInitializedAsync()
    {
        diaElegido = oFechaEvento.Fecha;
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<FechasEvento>>>($"/api/FechasEvento");
        oRespuestaEventos = respuesta.List.Where(x=>x.Fecha==diaElegido);
        var rta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/curso");
        oRespuestaTrabajos = rta.List.Where(x => x.Fechaentrega == diaElegido);
        StateHasChanged();
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }

    async Task add(DateTime? day)
    {
        var parameters = new ModalParameters();
        fechaFiltrada = oRespuestaEventos.Where(x => x.Fecha == diaElegido);

        if (fechaFiltrada.Count()>0){
            var tempo = fechaFiltrada.First();
            tempo.Fecha = oFechaEvento.Fecha;
            parameters.Add("model", tempo);
        }
        else
        {
            parameters.Add("model", oFechaEvento);
        }
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddCalendar>((day ?? DateTime.Now).ToString("dd/MM/yyyy"), parameters, options);
        var result = await formModal.Result;
        await ModalInstance.CloseAsync(ModalResult.Ok(result.Data.ToString()));
    }

    async Task aplazar(Ordentrabajo ot)
    {
        
    }

    public async Task UpdateEventos()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<FechasEvento>>>($"/api/FechasEvento");
        oRespuestaEventos = respuesta.List.Where(x => x.Fecha == diaElegido);
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará la informacion adicional",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async void delete(int id)
    {
        await http.DeleteAsync($"/api/FechasEvento/{id}");
        await ModalInstance.CloseAsync(ModalResult.Ok("Event was deleted"));
        UpdateEventos();
        StateHasChanged();
    }
}