@using BlazorApp1.Shared.Models
@using Newtonsoft.Json;
    @if (oRespuestaTrabajos != null && oRespuestaEventos != null){
        @for (int i=0;i<oRespuestaTrabajos.Count();i=i+2){
            <div class="row">
                @foreach(var entrega in oRespuestaTrabajos.Skip(i).Take(2)){
                    <RadzenCard Class="m-3" style="width:330px">
                        <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Codigo de orden: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@($"OT{entrega.Codigo}")</RadzenText>
                        <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Cliente: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@entrega.Cliente</RadzenText>
                        <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Etapa actual: </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@entrega.Estado</RadzenText>
                        <br/>
                        <div class="row">
                            <div class="col-2">
                            <RadzenText TextStyle="TextStyle.Body1" style="font-size: 10pt;margin-top: 9px">Aplazar &nbsp;</RadzenText>
                            </div>
                            <div class="col-3">
                            <RadzenNumeric @bind-Value="@diasAplazar"></RadzenNumeric>
                            </div>
                            <div class="col-2">
                                <RadzenText TextStyle="TextStyle.Body1" style="font-size: 10pt;margin-top: 9px;right:14px;position:relative"> Dia/s</RadzenText>
                            </div>
                            <div class="col-1">
                                <button class="btn" @onclick="() => aplazar(entrega,diasAplazar)"><FeatherSkipForward Size="19" Color="black" /></button>
                            </div>
                        </div>
@*                         <button class="btn" title="Aplazar 1 dia" @onclick="() => aplazar(entrega,1)"><FeatherPlay Color="black" /></button>
                        <button class="btn" title="Aplazar 7 dias" @onclick="() => aplazar(entrega,7)"><FeatherSkipForward Color="black" /></button> *@
                        <br/>
                    </RadzenCard>
                }
            </div>
        }
        @if(oRespuestaEventos.Count()>0){
            @for (int i = 0; i < oRespuestaEventos.Count(); i = i + 2)
            {
                <div class="row">
                    @foreach (var entrega in oRespuestaEventos.Skip(i).Take(2))
                    {
                    <RadzenCard Class="m-3" style="width:330px;">
                            <RadzenText TextStyle="TextStyle.H2" style="font-size: 14pt;font-weight:900" Class="d-flex mt-1 mb-0">Eventos adicionales: </RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" style="font-size: 12pt">@entrega.Descripcion </RadzenText>
                            <button class="btn" style="float:left" title="Eliminar" @onclick="() => alertaDelete(entrega.Id)"><FeatherTrash2 Color="red" /></button>
                            <button class="btn" style="float: right;" title="Editar evento" @onclick="() => edit(entrega.Id)"><FeatherEdit Color="green" /></button>
                            <br />
                        </RadzenCard>
                    }
                </div>
            }
        }
        else
        {
            
        }
    <button class="btn" style="float: right;" title="Agregar evento" @onclick="() => add(diaElegido)"><FeatherPlus Color="blue" /></button>
    <br />
    }
    <br/>


@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    IEnumerable<Ordentrabajo> oRespuestaTrabajos = new List<Ordentrabajo>();
    IEnumerable<FechasEvento> oRespuestaEventos = new List<FechasEvento>();
    [Parameter] public FechasEvento oFechaEvento { get; set; }
    public DateTime? diaElegido { get; set; }
    int diasAplazar = 1;
    public IEnumerable<FechasEvento> fechaFiltrada = new List<FechasEvento>();
    protected override async Task OnInitializedAsync()
    {
        diaElegido = oFechaEvento.Fecha;
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<FechasEvento>>>($"/api/FechasEvento");
        oRespuestaEventos = respuesta.List.Where(x=>x.Fecha==diaElegido);
        var rta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/curso");
        oRespuestaTrabajos = rta.List.Where(x => (x.Fechaaplazada.HasValue ? x.Fechaaplazada : x.Fechaentrega) == diaElegido);
        StateHasChanged();
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }

    async Task add(DateTime? day)
    {
        var parameters = new ModalParameters();

        parameters.Add("model", oFechaEvento);

        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddCalendar>((day ?? DateTime.Now).ToString("dd/MM/yyyy"), parameters, options);
        var result = await formModal.Result;
        await ModalInstance.CloseAsync(ModalResult.Ok(result.Data.ToString()));
    }

    async Task edit(int id)
    {
        var parameters = new ModalParameters();
        fechaFiltrada = oRespuestaEventos.Where(x => x.Id==id);

        if (fechaFiltrada.Count() > 0)
        {
            var tempo = fechaFiltrada.First();
            tempo.Fecha = oFechaEvento.Fecha;
            parameters.Add("model", tempo);
        }
        else
        {
            parameters.Add("model", oFechaEvento);
        }
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<AddCalendar>(fechaFiltrada.First().Fecha.Value.ToString("dd/MM/yyyy"), parameters, options);
        var result = await formModal.Result;
        await ModalInstance.CloseAsync(ModalResult.Ok(result.Data.ToString()));
    }

    async Task aplazar(Ordentrabajo ot, int tiempo)
    {
        SweetAlertResult result = await Swal.FireAsync( new SweetAlertOptions
        {
            Title = "¿Está seguro?",
            Text = $"La entrega se aplazara {tiempo} dia/s",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Confirmar",
            CancelButtonText = "Cancelar"
        });
        if (!string.IsNullOrEmpty(result.Value))
        {
            ot.Fechaaplazada = ot.Fechaaplazada.Value.AddDays(tiempo);
            http.PutAsJsonAsync<Ordentrabajo>($"/api/ot", ot);
        }
    }

    public async Task UpdateEventos()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<FechasEvento>>>($"/api/FechasEvento");
        oRespuestaEventos = respuesta.List.Where(x => x.Fecha == diaElegido);
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará la informacion adicional",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async void delete(int id)
    {
        await http.DeleteAsync($"/api/FechasEvento/{id}");
        await ModalInstance.CloseAsync(ModalResult.Ok("Event was deleted"));
        UpdateEventos();
        StateHasChanged();
    }
}