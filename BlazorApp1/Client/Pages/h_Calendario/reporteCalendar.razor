@page "/Reportecalendar"
@using System.Globalization;
@inject IJSRuntime _js

<style>
    @@media print {
        .no-print {
            display: none !important;
        }
        .semana{
            min-width: 19% !important;
        }
        .sidebar {
            display: none !important;
        }

        .rz-card {
            break-inside: avoid;
        }

/*         .semana {
            break-inside: avoid;
        } */

        .row {
            page-break-inside: auto;
            page-break-after: auto
        }
    }
</style>

<br class="no-print" />
<br class="no-print" />
<b class="font-size:15px no-print">Reporte de Calendario</b>
<br class="no-print" />
<br class="no-print" />
<RadzenDatePicker class="no-print" @bind-Value=@fechaInicio ShowTime="false" Disabled="generado" DateFormat="dd/MM/yyyy" />

<RadzenDatePicker class="no-print" @bind-Value=@fechaFinal ShowTime="false" Disabled="generado" DateFormat="dd/MM/yyyy" />

&nbsp
<RadzenButton class="btn btn-outline-info btn-sm no-print" Click="@(() => generar())">Generar Reporte</RadzenButton>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => Print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
<br class="no-print" />
<br class="no-print" />
<div class="reporte">
    @if (generado)
    {
        <div class="row">
            @for (DateTime fecha = fechaInicioCalendario; fecha <= fechaFinalCalendario; fecha = fecha.AddDays(1))
            {
                if (fecha.ToString("dddd", infoCultural) != "Domingo" && fecha.ToString("dddd", infoCultural) != "Sabado")
                {
                <div class="col semana">
                    <div style="text-align:center">
                    <b style="font-size:12px">&nbsp;@fecha.ToString("dddd d", infoCultural)</b>
                    </div>
                    <hr style="width: 100%;max-height:50%; border: none; border-bottom:1px solid darkgray;border-top: 1px solid darkgray;" />
                    @if (eventos.Where(x => (x.Fechaaplazada.HasValue ? x.Fechaaplazada.Value.Date : x.Fechaentrega.Value.Date) == fecha.Date).Count() > 0)
                    {
                        @foreach (Ordentrabajo ot in eventos.Where(x => (x.Fechaaplazada.HasValue ? x.Fechaaplazada.Value.Date : x.Fechaentrega.Value.Date) == fecha.Date))
                        {
                            <RadzenCard Style="@Maxcuadrado">
                                <p class="text" TextStyle="TextStyle.Body2" style="@maxLetra">&nbsp&nbsp@($"OT{ot.Codigo}")</p>
                                <p class="text" TextStyle="TextStyle.Body2" style="@maxLetra">&nbsp&nbsp@(ot.Cliente)</p>
                                <a><strong style="@maxLetra"> -Etapa: </strong><p class="text" style="@maxLetra" TextStyle="TextStyle.Body2">&nbsp&nbsp@(ot.Estado)</p></a>
                                <a><strong style="@maxLetra"> -Color: </strong><p class="text" style="@maxLetra" TextStyle="TextStyle.Body2">&nbsp&nbsp@(ot.Color)</p></a>
                                    
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <strong style="font-size:8px">&nbspNo hay eventos</strong>
                    }
                    </div>
                }
                else
                {
                <div class="col semana no-print finde">
                    <div style="text-align:center">
                    <b style="font-size:12px">&nbsp;@fecha.ToString("dddd d", infoCultural)</b>
                    </div>
                    <hr style="width: 100%;max-height:50%; border: none; border-bottom:1px solid darkgray;border-top: 1px solid darkgray;" />
                    @if (eventos.Where(x => (x.Fechaaplazada.HasValue ? x.Fechaaplazada.Value.Date : x.Fechaentrega.Value.Date) == fecha.Date).Count() > 0)
                    {
                        @foreach (Ordentrabajo ot in eventos.Where(x => (x.Fechaaplazada.HasValue ? x.Fechaaplazada.Value.Date : x.Fechaentrega.Value.Date) == fecha.Date))
                        {
                                <RadzenCard Style="@(Maxcuadrado + ";background-color:#db3234;")">
                                <p class="text" TextStyle="TextStyle.Body2" style="@maxLetra">&nbsp&nbsp@($"OT{ot.Codigo}")</p>
                                <p class="text" TextStyle="TextStyle.Body2" style="@maxLetra">&nbsp&nbsp@(ot.Cliente)</p>
                                <a><strong style="@maxLetra"> -Etapa: </strong><p class="text" style="@maxLetra" TextStyle="TextStyle.Body2">&nbsp&nbsp@(ot.Estado)</p></a>
                                <a><strong style="@maxLetra"> -Color: </strong><p class="text" style="@maxLetra" TextStyle="TextStyle.Body2">&nbsp&nbsp@(ot.Color)</p></a>

                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <strong style="font-size:8px">&nbspNo hay eventos</strong>
                    }
                    </div>
                }
            }
        </div>
    }
</div>
<br class="no-print"/>
<br class="no-print"/>
@code {
    DateTime fechaInicio = DateTime.Now.AddDays(-6);
    DateTime fechaFinal = DateTime.Now;
    DateTime fechaInicioCalendario = new();
    DateTime fechaFinalCalendario = new();
    bool generado = false;
    CultureInfo infoCultural = new CultureInfo("es-MX");
    string[] newNames = { "Domingo","Lunes", "Martes", "Mier.", "Jueves", "Viernes", "Sabado" };
    List<Ordentrabajo> eventos = new();
    int cuadrados = 0;
    int maximo = 0;
    string Maxcuadrado = "";
    string @maxLetra = "";
    async Task generar()
    {
        infoCultural.DateTimeFormat.DayNames = newNames;
        fechaInicioCalendario = fechaInicio;
        fechaFinalCalendario = fechaFinal;
        var inicio = fechaInicio.Ticks;
        var final = fechaFinal.Ticks;
        var r = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>($"/api/ot/{inicio}/{final}");
        eventos = r.List;
        @for (DateTime fecha = fechaInicioCalendario; fecha <= fechaFinalCalendario; fecha = fecha.AddDays(1))
        {
            @foreach (Ordentrabajo ot in eventos.Where(x => (x.Fechaaplazada.HasValue ? x.Fechaaplazada.Value.Date : x.Fechaentrega.Value.Date) == fecha.Date))
            {
                cuadrados += 1;
            }
            if (cuadrados > maximo)
            {
                maximo = cuadrados;
            }
            cuadrados = 0;
            }
            if(maximo!=0){
                Maxcuadrado = $"overflow:hidden;max-height:{(150 / maximo) - 0.8}% !important;font-size:{(175 / maximo)-0.8}% !important;padding-top:4px;padding-bottom:4px;padding-left:6px;padding-right:6px;margin-bottom:3px";
                maxLetra = $"font-size:{Math.Clamp(Math.Round((decimal)(60 / maximo)),8,13)}px !important";
            }
            else
            {
                Maxcuadrado = $"overflow:hidden;max-height:80% !important;font-size:80% !important;padding-top:4px;padding-bottom:4px;padding-left:6px;padding-right:6px;margin-bottom:3px";
                maxLetra = $"font-size:80% !important";
            }
        generado = true;
    }

    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");

}