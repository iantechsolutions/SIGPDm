@page "/reportecalendar"
@using System.Globalization;
@inject IJSRuntime _js

<style>
    /* Print media */
    @@media print {
        .no-print {
            display: none !important;
        }

        .sidebar {
            display: none !important;
        }

        .rz-card {
            break-inside: avoid;
        }

        .semana {
            break-inside: avoid;
        }
    }

    .semana {
        border: 1px solid #ddd;
        border-radius: 5px;
        position: relative; /* Add this to position pseudo elements */
    }


    /* General styles */
    .text {
        overflow-wrap: break-word;
        max-width: 255px;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -5px;
        margin-left: -5px;
    }

    .col {
        padding-right: 5px;
        padding-left: 5px;
        flex-basis: 0;
        flex-grow: 1;
        width: 13.5%;
        float: left;
    }

    .reporte {
        margin-top: 10px;
    }

    /* Button styles */
    .btn {
        display: inline-block;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out,
            box-shadow 0.15s ease-in-out;
    }

    .btn:focus,
    .btn:hover {
        text-decoration: none;
    }

    .btn-outline-info {
        color: #17a2b8;
        border-color: #17a2b8;
    }

    .btn-outline-info:hover {
        color: #fff;
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

    /* Feather Icons */
    .feather {
        width: 16px;
        height: 16px;
        vertical-align: text-bottom;
    }

    /* Other styles */
    .font-size-15px {
        font-size: 15px;
    }

    .no-outline {
        outline: none;
    }

    .float-right {
        float: right;
    }

    .height-100 {
        height: 100%;
    }

    .margin-bottom-10px {
        margin-bottom: 10px;
    }

    .row::after {
        content: "";
        clear: both;
        display: table;
    }

    .text-uppercase {
        text-transform: uppercase;
    }

    .padding-4px {
        padding: 4px;
    }

    /* Card styles */
    .rz-card {
        margin-left:2px;
        margin-right:2px;
        padding: 6px;
        background-color: #f4f4f4;
        border-color: #d4d4d4;
        border-radius: 0.25rem;
        box-shadow: 0 4px 5px rgb(0 0 0 / 8%), 0 1px 10px rgb(0 0 0 / 4%);
    }

    .rz-card.not-found {
        font-size: 8px;
        color: #777;
    }

    /* DatePicker styles */
    .rz-datepicker {
        display: inline-block;
        width: 236px;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
    }

</style>


<br class="no-print" />
<br />
<b class="font-size:15px">Reporte de Calendario</b>
<br class="no-print" />
<br class="no-print" />
<RadzenDatePicker class="no-print" @bind-Value=@fechaInicio ShowTime="false" Disabled="generado" DateFormat="dd/MM/yyyy" />

<RadzenDatePicker class="no-print" @bind-Value=@fechaFinal ShowTime="false" Disabled="generado" DateFormat="dd/MM/yyyy" />

&nbsp
<RadzenButton class="btn btn-outline-info btn-sm no-print" Click="@(() => generar())">Generar Reporte</RadzenButton>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => Print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
<br class="no-print" />
<br class="no-print" />
<div class="reporte">
    @if (generado)
    {
        <div class="row">
            @for (DateTime fecha = fechaInicioCalendario; fecha <= fechaFinalCalendario; fecha = fecha.AddDays(1))
            {
                <div class="col semana">
                    <b style="font-size:12px">&nbsp;@fecha.ToString("dddd dd", infoCultural)</b>
                    <hr style="width: 100%;max-height:50%; border: none; border-bottom:1px solid darkgray;border-top: 1px solid darkgray;" />
                    @if (eventos.Where(x => x.Fechaaplazada.Value.Date == fecha.Date).Count() > 0)
                    {
                        @foreach (Ordentrabajo ot in eventos.Where(x => x.Fechaaplazada.Value.Date == fecha.Date))
                        {
                            <RadzenCard Style="@Maxcuadrado">
                                <strong> -Codigo: </strong>
                                <p class="text" TextStyle="TextStyle.Body2">&nbsp&nbsp@($"OT{ot.Codigo}")</p>
                                <strong> -Cliente: </strong>
                                <p class="text" TextStyle="TextStyle.Body2">&nbsp&nbsp@(ot.Cliente)</p>
                                <strong> -Etapa: </strong>
                                <p class="text" TextStyle="TextStyle.Body2">&nbsp&nbsp@(ot.Estado)</p>
                            </RadzenCard>
                            <br />
                        }
                    }
                    else
                    {
                        <strong style="font-size:8px">&nbspNo hay eventos</strong>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    DateTime fechaInicio = DateTime.Now.AddDays(-6);
    DateTime fechaFinal = DateTime.Now;
    DateTime fechaInicioCalendario = new();
    DateTime fechaFinalCalendario = new();
    bool generado = false;
    CultureInfo infoCultural = new CultureInfo("es-MX");
    string[] newNames = { "Lunes", "Martes", "Mier.", "Jueves", "Viernes", "Sabado", "Domingo" };
    List<Ordentrabajo> eventos = new();
    int cuadrados = 0;
    int maximo = 0;
    string Maxcuadrado = "";
    async Task generar()
    {
        infoCultural.DateTimeFormat.DayNames = newNames;
        fechaInicioCalendario = fechaInicio;
        fechaFinalCalendario = fechaFinal;
        var inicio = fechaInicio.Ticks;
        var final = fechaFinal.Ticks;
        var r = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>($"/api/ot/{inicio}/{final}");
        eventos = r.List;
        @for (DateTime fecha = fechaInicioCalendario; fecha <= fechaFinalCalendario; fecha = fecha.AddDays(1))
        {
            @foreach (Ordentrabajo ot in eventos.Where(x => x.Fechaaplazada.Value.Date == fecha.Date))
            {
                cuadrados += 1;
            }
            if (cuadrados > maximo)
            {
                maximo = cuadrados;
            }
            cuadrados = 0;
        }
        Maxcuadrado = $"overflow:hidden;max-height:{(100 / maximo) - 0.8}% !important;font-size:{Math.Round((double)(250 / maximo))}% !important;padding-top:4px;padding-bottom:4px;padding-left:6px;padding-right:6px";
        generado = true;
    }

    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");

}