<div class="card">
    <div class="card-body">

        <EditForm Model="@model" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="row" style="width=100%;">
                <div class="col-sm-6">
                    <label>Descripcion</label>
                    <InputText class="form-control" @bind-Value="@model.Descripcion" placeholder="Descripcion"></InputText>
                    <ValidationMessage For="(()=> model.Descripcion)" style="color:red;" />
                </div>
            </div>
            <br />
            <button type="submit" class="btn btn-primary mr-2">Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>




@code {
    FechasEvento oFechasEvento = new();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public FechasEvento model { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }

    async Task Guardar()
    {
        if (model.Id == 0)
        {
            await http.PostAsJsonAsync<FechasEvento>("/api/FechasEvento", model);
            await ModalInstance.CloseAsync(ModalResult.Ok($"An Event was added"));
        }
        else
        {
            await http.PutAsJsonAsync<FechasEvento>("/api/FechasEvento", model);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}