@if (oTrabajo != null)
{
    <div class="card">
        <div class="card-body">

            <EditForm Model="@oTrabajo" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />

                <div class="row">
                    
                   
                    <div class="col-sm-6">
                        <label>Fecha de Entrega S/ Cotización</label>
                        <InputDate class="form-control" @bind-Value="@oTrabajo.FechaentregaCO" placeholder="Fecha entrega cotización" />
                        <ValidationMessage For="(() => oTrabajo.FechaentregaCO)" style="color:red;" />
                    </div>
                    <div class="col-sm-6">
                        <label>Fecha Planificada</label>
                        <InputDate class="form-control" @bind-Value="@oTrabajo.Fechaentrega" placeholder="Fecha de entrega" />
                        <ValidationMessage For="(() => oTrabajo.Fechaentrega)" style="color:red;" />
                    </div>
                </div>
                <br />

                <br />
                <div class="row">
                    <div class="col-sm-6">
                        <label>Fecha de Entrega Final</label>
                        <InputDate class="form-control" @bind-Value="@oTrabajo.Fechaaplazada" placeholder="Fechaaplazada" />
                        <ValidationMessage For="(() => oTrabajo.Fechaaplazada)" style="color:red;" />
                    </div>
                </div>
                <br />

                <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
                <button type="submit" class="btn btn-primary mr-2" disabled="@disable">Aceptar</button>

            </EditForm>
        </div>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    bool disable;

    Ordentrabajo? oTrabajo = new Ordentrabajo();
    Respuesta<Ordentrabajo>? oRtaTrabajo = new();

    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }
    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        disable = false;


        if (id != 0)
        {
            oRtaTrabajo = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
            oTrabajo = oRtaTrabajo.List;

        }
    }

    private async Task Guardar()
    {
        if (oTrabajo != null)
        {
            var response = await http.PutAsJsonAsync<Ordentrabajo>($"/api/ot", oTrabajo);
            if (response.IsSuccessStatusCode)
            {
                await ModalInstance.CloseAsync(ModalResult.Ok());
            }
            else
            {
                // Manejar el error
            }
        }
    }

    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());

    }
}
