@using OfficeOpenXml
@using System.IO
@inject IJSRuntime _js
@page "/ot/{id:int}"

<style>
    @@media print{
        .no-print {
            display: none!important;
        }
        .sidebar{
            display: none!important;
        }
        .print{
            margin-top: 5px!important;
        }
        br{
        display: none!important
        }
        .col-1 {
            display: none!important;
        }
/*         .grilla div{
            margin-top: 5px;
        }
 */ 
        * {
            -webkit-print-color-adjust: exact !important; /* Chrome, Safari 6 – 15.3, Edge */
            color-adjust: exact !important; /* Firefox 48 – 96 */
            print-color-adjust: exact !important; /* Firefox 97+, Safari 15.4+ */
        }
        .fix{
            width: 40%!important;
        }
/*         .cellgrilla{
            border-top
        } */
    }

    .cajas-texto {
        width: 300px;
    }
    .custom-input-file {
        position: relative;
        top:14px;
        overflow: hidden;
        display: inline-block;
        cursor: pointer;
        padding: 6px 20px; /* Adjusted padding */
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
    }

    .custom-input-file input[type="file"] {
        position: absolute;
        top: 0;
        right: 0;
        margin: 0;
        padding: 0;
        font-size: 20px;
        cursor: pointer;
        opacity: 0;
        filter: alpha(opacity=0); /* For IE8 and earlier */
    }
    .flex{
        display: flex;
        flex-direction: column;
    }

    
</style>

@if (oTrabajo.Cliente != null)
{

    <div class="no-print">
        <br />
        <button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
        <br />
        <br/>
        <div class="row">
            <div class="col-9">
                <h2>Información correspondiente a la orden @($"OT-{oTrabajo.Codigo}")</h2>
            </div>
            <div class="col-1">
                
                <button class="btn" @onclick="gotoreporte"><FeatherFileText Color="Black"></FeatherFileText></button>
            </div>

        </div>
        <button class="btn btn-outline-info" @onclick=gotoplanos>Ver información adicional</button> &nbsp;
        <button class="btn btn-outline-secondary" @onclick=gotocalidad>Ver certificado de calidad</button> &nbsp;
        <div class="custom-input-file">
            <span>Cargar excel</span>
            <InputFile OnChange="HandleLoadExcel" accept=".xls,.xlsx" maxAllowedFiles="1" />
        </div>

        <AuthorizeView Roles="Admin, USUARIOMAESTRO, OficinaTecnica">
       
        
            @if (oTrabajo.Estado == "Oficina tecnica")
            {
                <button class="btn btn-outline-success" @onclick=gotodespiece>Gestionar despiece</button> 
                 
            }
           

       </AuthorizeView>

        @if (oTrabajo.Estado == "Oficina tecnica")
        {
            <button class="btn btn-outline-success" @onclick=gotoadministrarinsumos>Administrar Insumos</button>
        }
        <button class="btn btn-outline-success no-print" style="float: right;" @onclick="Print"><FeatherPrinter Color="black"></FeatherPrinter></button>
        <br />
        <br />
        <hr />
    </div>


    <div class="row print">
        <div class="col-6">
            <img src="images/logo.png" style="height:150px;width:auto"/>
        </div>
        <div class="col-6">
            <br />
            <br />
            <RadzenText TextStyle="TextStyle.H5"><bold>ORDEN DE FABRICACIÓN</bold></RadzenText>
        <div style="float:right;">
                <button class="btn btn-outline-success no-print" style="position: relative; top: -20px" @onclick=alertaGuardar>Guardar</button>

        </div>
        </div>
    </div>
    <div class="row print">
        <div class="col-2">
            <h6>
                <em class="style1">CLIENTE:</em> 
            </h6>
        </div>
        <div class="col-3" style="background-color:gray">
            <span class="style1" >@oTrabajo.Cliente</span>
        </div>
        <div class="col-1"/>
        <div class="col-2">
            <h6><em class="style1">Pedido a fábrica:</em></h6>
        </div>
        <div class="col-3 fix" style="background-color:gray; width: 20%">
            <span class="style1" style="font-size:15px">@oTrabajo.Pedidofabrica.Value.ToString("dddd, d' de 'MMMM' de 'yyyy", new System.Globalization.CultureInfo("es-ES"))</span>
        </div>
    </div>
    <div class="row print">
        <div class="col-2">
            <h6><em class="style1">Orden n°:</em> </h6>
        </div>
        <div class="col-3" style="background-color:gray">
            <span class="style1" >@oTrabajo.Codigo</span>
        </div>
        <div class="col-1" />
        <div class="col-2">
            <h6><em class="style1">Fecha entrega:</em></h6>
        </div>
        <div class="col-3" style="background-color:gray">
            @if (oTrabajo.Fechaentrega.HasValue)
            {
            <span class="style1" >@oTrabajo.Fechaentrega.Value.ToString("dd/MM/yyyy")</span>
            }
            else{
                <span class="style1">Sin fecha de entrega registrada</span>
            }
        </div>
    </div>
    <div class="row print" style="text-align:center;background-color:gray;">
       <span class="style1">@oTrabajo.Titulo</span>
    </div>
    <div class="row WORKGROUP print
    ">
        <div class="col-6"/>
        <div class="col-3">
            <span class="style1">Remito de pintura: </span>
        </div>
        <div class="col-3">
            <textarea class="cajas-texto" style="border: 0;margin-top:5px" />
        </div>
    </div>
    <div class="row print">
        <div class="col-6">
            <h6><em class="style1">DESCRIPCION DE CADA GABINETE</em></h6>
        </div>
        <div class="col-3">
            <h6><em class="style1">Cantidad:</em></h6>
        </div>
        <div class="col-3">
            <h5>@oTrabajo.Cantidad</h5>
        </div>
    </div>
    <br />
    <div class="row style1 print" style="border:solid 2px black;">
        @if (descripcion != null)
        {
            @foreach (var dsc in descripcion)
            {
                <div class="col-12">
                    <span>@dsc</span>
                </div>
                <br />
            }

        }
        else
        {
            <div class="col-12">
                <span class="style1 text">No hay descripción.</span>
            </div>
        }

    </div>
    <br />
    <div class="row print">
        <div class="col-12">
            <h6><em class="style1">Lugar de entrega:</em> <span class="style1" style="background-color:gray;">@oTrabajo.Lugarentrega</span></h6>
        </div>
        

    </div>
    <br class="no-print"/>
    <div class="row print" style="text-align:center;background-color:gray;">
        <span class="style1">Especificaciones y Equipamiento</span>
    </div>
    <br/>

    <div class="flex">

    <div class="row print grilla" style="">
            <div class="col-4 style1">
                <a>-Chapa Estructura:</a>
            </div>
            <div class="col-8" style="border:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea class="col-6 cajas-texto py-0" @bind-Value="oTrabajo.ChapaEstructura" style="height:30px;border: 0;" placeholder=""/>
            </div>
            <div class="col-4 style1">
                <a>-Chapa Puertas:</a>
            </div>
            <div class="col-8"  style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.ChapaPuertas" class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Chapa Bandejas:</a>
            </div>
            <div class="col-8"  style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.ChapaBandejas" class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Zocalo/Trineo:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.Zocalo_Trineo" class="col-6 cajas-texto py-0" style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Portaplanos:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.Portaplanos"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Traba Antiviento:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.TrabaViento"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Contrafrentes:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.Contrafrentes"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Tipo de cierre:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.TipoCierre"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Sentido apertura de puertas:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.SentidoPuertas"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Color/Espesor de pintura:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.Color"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Cancamos:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.Cancamos"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Doble marco interno:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.DobleMarcoInterno"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Caballetes Termicas:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.CaballetesTermicas"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Caballetes Interruptores:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.CaballetesInterruptores"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Tapas de piso:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.TapasPiso"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Perfiles C1 y C2:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.PerfilesC1yC2"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Perfiles Omega:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.PerfilesOmega"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Sistemas de aisladores:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.SistemasAisladores"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Rejillas de ventilacion:</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.RejillasVentilacion"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>
            <div class="col-4 style1">
                <a>-Sobretecho  :</a>
            </div>
            <div class="col-8 cellgrilla" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
                <RadzenTextArea @bind-Value="@oTrabajo.Sobretecho"class="col-6 cajas-texto py-0"  style="height:30px;border: 0;" placeholder="" />
            </div>

        </div>
    </div>

    <div class="row" style="text-align:center;">
        <h5><em><span class="style1">Referencia</span></em></h5>
    </div>
    <div class="row">
        <div class="col-12">
            <span class="style1">@oTrabajo.Referencia</span>
        </div>
    </div>
    <br/>
    <br/>
    @if (oTrabajo.Estado == "Oficina tecnica")
    {
        @*         @if (insumosUsados.Count() == 0)
        {
            <button class="btn btn-outline-primary" @onclick="alertaNoHayInsumosSeleccionados">Enviar orden de trabajo</button>
        }
        else
        { *@
        <button class="btn btn-outline-primary" @onclick="alertaSend">Enviar orden de trabajo</button>
        @*         } *@
        <button class="btn btn-outline-secondary float-end" @onclick="alertaSkip">Saltear etapa</button>

    }

}
else
{
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    ElementReference fileInputRef;
    List<InsumoDTO> oRtaInsumos;
    List<PersonalDTO> oRtaPersonal;
    List<InsumosUsados> insumosUsados = new();
    RadzenSteps? steps;
    RadzenDataGrid<InsumosUsados>? grid;
    RadzenDataGrid<PersonalDTO>? gridOperarios;
    RadzenDropDownDataGrid<InsumoDTO>? gridDropInsumos;
    PersonalDTO persona;
    List<PersonalDTO> listaOperarios = new();
    Respuesta<List<EventosProduccion>> personalEventos = new();
    bool disabled = true;
    InsumoDTO insumo = new();
    Lote lote = new();
    InsumosUsados InsumosUsadosParaGuardar = new();
    int cantidad;
    List<string> descripcion = new();
    List<string> dataExcel = new();
    public void resetInsLote()
    {
        lote = new();
        cantidad = 0;
        insumo = new();
    }
    protected override async Task OnInitializedAsync()
    {

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;
        try{

            descripcion = JsonSerializer.Deserialize<List<string>>(oTrabajo.Descripcion);
        }
        catch (Exception e)
        {
            descripcion = new();
        }
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;

        var response3 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Punzonado");
        foreach (var persona in personalEventos.List)
        {
            var rta = await http.GetFromJsonAsync<Respuesta<PersonalDTO>>($"/api/personal/{persona.Operario}");
            listaOperarios.Add(rta.List);
        }
        if (oTrabajo.Insumosusados != null)
        {
            try{
                insumosUsados = JsonSerializer.Deserialize<List<InsumosUsados>>(oTrabajo.Insumosusados);
            }
            catch
            {
                insumosUsados = new();
            }
        }

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
    }

    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se enviará a control de carpeta",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task send()
    {
        oTrabajo.Estado = "CC";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        if (insumosUsados != null)
        {
            foreach (var insumo in insumosUsados)
            {
                PedidosPañol consumo = new();
                consumo.Fecha = DateTime.Now;
                consumo.Codigo = "Punzonado";
                consumo.Insumo = insumo.insumo.Id;
                consumo.Cantidad = insumo.cantidad;
                await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", consumo);
            }
        }
        else
        {

        }

        ComeBack();
    }


    public async Task alertaGuardar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardara la informacion sobreescrita",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaSkip()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se salteará esta etapa y se enviará a plegado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Saltear",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            skip();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task skip()
    {
        oTrabajo.Estado = "CC";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        List<TimesEtapa> listTimes = new();
        if (oTrabajo.Fechas != null) listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa time = new("Punzonado");
        var tiempoTotalEtapa = await http.GetFromJsonAsync<int>($"/api/EventosProduccion/getTiempoEtapa?ot={id}&etapa=");

        time.TimeTotalEtapa = tiempoTotalEtapa;
        listTimes.Add(time);
        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        ComeBack();

        ComeBack();
    }

    async Task alertaNoHayInsumosSeleccionados()
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¡No hay ningún insumo seleccionado!",
                Text = "Debe seleccionar el insumo a utilizar para poder continuar.",
                Icon = SweetAlertIcon.Error,
                //ShowCancelButton = true,
                //ConfirmButtonText = "Enviar",
                //CancelButtonText = "Cancelar"
            });



    }



    async Task gotoplanos()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Planos>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    async Task gotodespiece()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Medium
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Despiece>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    async Task Get()
    {
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;
        StateHasChanged();
        grid.Reload();
        gridDropInsumos.Reload();
        StateHasChanged();
    }

    async Task gotoadministrarinsumos()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AdministrarInsumos.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AdministrarInsumos>("Administrar Insumos", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await OnInitializedAsync();

        }
        else
        {
            await Get();
        }
    }

    public void gotoreporte()
    {
        nav.NavigateTo($"/reporteobra/{id}");
    }

    public void gotocalidad()
    {
        nav.NavigateTo($"/certificadocalidad/{id}");
    }

    public async Task Print()
        => await _js.InvokeVoidAsync("window.print");

    async Task HandleLoadExcel(InputFileChangeEventArgs e)
    {
        try{
            var file = e.GetMultipleFiles(1);
            try{
                using (MemoryStream ms = new MemoryStream())
                {
                    // copy data from file to memory stream
                    var t = file.First();
                    await t.OpenReadStream().CopyToAsync(ms);
                    // positions the cursor at the beginning of the memory stream
                    ms.Position = 0;

                    // create ExcelPackage from memory stream
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage(ms))
                    {
                        ExcelWorksheet ws = package.Workbook.Worksheets.FirstOrDefault();
                        for (int i = 38; i <= 57; i++)
                        {

                            dataExcel.Add(ws.Cells[$"E{i}"].Value?.ToString() ?? "");
                        }
                        Console.WriteLine("dataExcel loaded");
                    }
                }
                oTrabajo.ChapaEstructura = dataExcel.ElementAt(0);
                oTrabajo.ChapaPuertas = dataExcel.ElementAt(1);
                oTrabajo.ChapaBandejas = dataExcel.ElementAt(2);
                oTrabajo.Zocalo_Trineo = dataExcel.ElementAt(3);
                oTrabajo.Portaplanos = dataExcel.ElementAt(4);
                oTrabajo.TrabaViento = dataExcel.ElementAt(5);
                oTrabajo.Contrafrentes = dataExcel.ElementAt(6);
                oTrabajo.TipoCierre = dataExcel.ElementAt(7);
                oTrabajo.SentidoPuertas = dataExcel.ElementAt(8);
                oTrabajo.Color = dataExcel.ElementAt(9);
                oTrabajo.Cancamos = dataExcel.ElementAt(10);
                oTrabajo.DobleMarcoInterno = dataExcel.ElementAt(11);
                oTrabajo.CaballetesTermicas = dataExcel.ElementAt(12);
                oTrabajo.CaballetesInterruptores = dataExcel.ElementAt(13);
                oTrabajo.TapasPiso = dataExcel.ElementAt(14);
                oTrabajo.PerfilesC1yC2 = dataExcel.ElementAt(15);
                oTrabajo.PerfilesOmega = dataExcel.ElementAt(16);
                oTrabajo.SistemasAisladores = dataExcel.ElementAt(17);
                oTrabajo.RejillasVentilacion = dataExcel.ElementAt(18);
                oTrabajo.Sobretecho = dataExcel.ElementAt(19);
            }
            catch
            {

                dataExcel = new();
            }
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }    
}

