@page "/ot/{id:int}"



@if (oTrabajo.Cliente != null)
{

    <div>
        <br />
        <button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
        <br />
        <br/>
        <div class="row">
            <div class="col-9">
                <h2>Información correspondiente a la orden @($"OT-{oTrabajo.Codigo}")</h2>
            </div>
            <div class="col-1">
                
                <button class="btn" @onclick="gotoreporte"><FeatherFileText Color="Black"></FeatherFileText></button>
            </div>

        </div>
        <button class="btn btn-outline-info" @onclick=gotoplanos>Ver información adicional</button> &nbsp;
        <button class="btn btn-outline-secondary" @onclick=gotocalidad>Ver certificado de calidad</button> &nbsp;


        <AuthorizeView Roles="Admin, USUARIOMAESTRO, OficinaTecnica">
       
        
            @if (oTrabajo.Estado == "Oficina tecnica")
            {
                <button class="btn btn-outline-success" @onclick=gotodespiece>Gestionar despiece</button> 
                 
            }
           

       </AuthorizeView>

        @if (oTrabajo.Estado == "Oficina tecnica")
        {
            <button class="btn btn-outline-success" @onclick=gotoadministrarinsumos>Administrar Insumos</button>
        }
        <br />
        <br />
        <hr />
    </div>


    <div class="row">
        <div class="col-6">
            <img src="images/logo.png" style="height:150px;width:auto"/>
        </div>
        <div class="col-6">
            <br />
            <br />
            <RadzenText TextStyle="TextStyle.H5"><bold>ORDEN DE FABRICACIÓN</bold></RadzenText>
        </div>

    </div>
    <div class="row">
        <div class="col-2">
            <h6>
                <em class="style1">CLIENTE:</em> 
            </h6>
        </div>
        <div class="col-3" style="background-color:gray">
            <span class="style1" >@oTrabajo.Cliente</span>
        </div>
        <div class="col-1"/>
        <div class="col-2">
            <h6><em class="style1">Pedido a fábrica:</em></h6>
        </div>
        <div class="col-3" style="background-color:gray">
            <span class="style1" style="font-size:10px">@oTrabajo.Pedidofabrica.Value.ToString("dddd, d' de 'MMMM' de 'yyyy", new System.Globalization.CultureInfo("es-ES"))</span>
        </div>
    </div>
    <div class="row">
        <div class="col-2">
            <h6><em class="style1">Orden n°:</em> </h6>
        </div>
        <div class="col-3" style="background-color:gray">
            <span class="style1" >@oTrabajo.Codigo</span>
        </div>
        <div class="col-1" />
        <div class="col-2">
            <h6><em class="style1">Fecha entrega:</em></h6>
        </div>
        <div class="col-3" style="background-color:gray">
            <span class="style1" >@oTrabajo.Fechaentrega.Value.ToString("dd/MM/yyyy")</span>
        </div>
    </div>
    <div class="row" style="text-align:center;background-color:gray;">
       <span class="style1">@oTrabajo.Titulo</span>
    </div>
    <div class="row">
        <div class="col-6"/>
        <div class="col-3">
            <span class="style1">Remito de pintura: </span>
        </div>
        <div class="col-3">
            <textarea class="cajas-texto" style="border: 0;margin-top:5px" placeholder="Ingrese valor" />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h6><em class="style1">DESCRIPCION DE CADA GABINETE</em></h6>
        </div>
        <div class="col-3">
            <h6><em class="style1">Cantidad:</em></h6>
        </div>
        <div class="col-3">
            <h5>@oTrabajo.Cantidad</h5>
        </div>
    </div>
    <br />
    <div class="row style1" style="border:solid 2px black;">
        @if (descripcion != null)
        {
            @foreach (var dsc in descripcion)
            {
                <div class="col-12">
                    <span>@dsc</span>
                </div>
                <br />
            }

        }
        else
        {
            <div class="col-12">
                <span class="style1 text">No hay descripción.</span>
            </div>
        }

    </div>
    <br />
    <div class="row">
        <div class="col-12">
            <h6><em class="style1">Lugar de entrega:</em> <span class="style1" style="background-color:gray;">@oTrabajo.Lugarentrega</span></h6>
        </div>
    </div>
    <br />
    <div class="row" style="text-align:center;background-color:gray;">
        <span class="style1">Especificaciones y Equipamiento</span>
    </div>
    <br/>
    <div class="row" style="">
        <div class="col-4 style1">
            <a>-Chapa Estructura:</a>
        </div>
        <div class="col-8" style="border:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Chapa Puertas:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Chapa Bandejas:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Zocalo/Trineo:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Portaplanos:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Traba Antiviento:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Contrafrentes:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Tipo de cierre:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Sentido apertura de puertas:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Color/Espesor de pintura:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Cancamos:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Doble marco interno:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Caballetes Termicas:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Caballetes Interruptores:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Tapas de piso:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Perfiles C1 y C2:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Perfiles Omega:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Sistemas de aisladores:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Rejillas de ventilacion:</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 1px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>
        <div class="col-4 style1">
            <a>-Sobretecho  :</a>
        </div>
        <div class="col-8" style="border-left:solid 2px black;border-right:solid 2px black;border-bottom:solid 2px black">
            <textarea class="col-6 cajas-texto" style="border: 0;" placeholder="Ingrese el valor aqui" />
        </div>

    </div>
    <div class="row" style="text-align:center;">
        <h5><em><span class="style1">Referencia</span></em></h5>
    </div>
    <div class="row">
        <div class="col-12">
            <span class="style1">@oTrabajo.Referencia</span>
        </div>
    </div>
    <br/>
    <br/>
    @if (oTrabajo.Estado == "Oficina tecnica")
    {
@*         @if (insumosUsados.Count() == 0)
        {
            <button class="btn btn-outline-primary" @onclick="alertaNoHayInsumosSeleccionados">Enviar orden de trabajo</button>
        }
        else
        { *@
            <button class="btn btn-outline-primary" @onclick="alertaSend">Enviar orden de trabajo</button>
@*         } *@
        <button class="btn btn-outline-secondary float-end" @onclick="alertaSkip">Saltear etapa</button>

    }

}
else
{
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    List<InsumoDTO> oRtaInsumos;
    List<Personal> oRtaPersonal;
    List<InsumosUsados> insumosUsados = new();
    RadzenSteps? steps;
    RadzenDataGrid<InsumosUsados>? grid;
    RadzenDataGrid<Personal>? gridOperarios;
    RadzenDropDownDataGrid<InsumoDTO>? gridDropInsumos;
    Personal persona;
    List<Personal> listaOperarios = new();
    Respuesta<List<EventosProduccion>> personalEventos = new();
    bool disabled = true;
    InsumoDTO insumo = new();
    Lote lote = new();
    InsumosUsados InsumosUsadosParaGuardar = new();
    int cantidad;
    List<string> descripcion = new();
    public void resetInsLote()
    {
        lote = new();
        cantidad = 0;
        insumo = new();
    }
    protected override async Task OnInitializedAsync()
    {

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;
        descripcion = JsonSerializer.Deserialize<List<string>>(oTrabajo.Descripcion);
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;

        var response3 = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/personal");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Punzonado");
        foreach (var persona in personalEventos.List)
        {
            var rta = await http.GetFromJsonAsync<Respuesta<Personal>>($"/api/personal/{persona.Operario}");
            listaOperarios.Add(rta.List);
        }
        if (oTrabajo.Insumosusados != null)
        {
            insumosUsados = JsonSerializer.Deserialize<List<InsumosUsados>>(oTrabajo.Insumosusados);
        }

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
       // nav.NavigateTo($"/calidad/{id}");
    }

    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se enviará a control de carpeta",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task send()
    {
        oTrabajo.Estado = "CC";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        if (insumosUsados != null)
        {
            foreach (var insumo in insumosUsados)
            {
                PedidosPañol consumo = new();
                consumo.Fecha = DateTime.Now;
                consumo.Codigo = "Punzonado";
                consumo.Insumo = insumo.insumo.Id;
                consumo.Cantidad = insumo.cantidad;
                await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", consumo);
            }
        }
        else
        {

        }

        ComeBack();
    }

    async Task alertaNoHayInsumosSeleccionados()
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¡No hay ningún insumo seleccionado!",
                Text = "Debe seleccionar el insumo a utilizar para poder continuar.",
                Icon = SweetAlertIcon.Error,
                //ShowCancelButton = true,
                //ConfirmButtonText = "Enviar",
                //CancelButtonText = "Cancelar"
            });



    }

    public async Task alertaSkip()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se salteará esta etapa y se enviará a plegado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Saltear",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            skip();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task skip()
    {
        oTrabajo.Estado = "CC";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        List<TimesEtapa> listTimes = new();
        if (oTrabajo.Fechas != null) listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa time = new("Punzonado");
        var tiempoTotalEtapa = await http.GetFromJsonAsync<int>($"/api/EventosProduccion/getTiempoEtapa?ot={id}&etapa=");

        time.TimeTotalEtapa = tiempoTotalEtapa;
        listTimes.Add(time);
        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        ComeBack();




        ComeBack();
    }

    <!--int? calcularCantidad(Insumo insumo)
    {
    int? total = 0;
    if (insumo.Lotes != null)
    {
    var lotes = JsonSerializer.Deserialize<List<Lote>>(insumo.Lotes);
    foreach (var lote in lotes)
    {
    if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
    }
    }
    return total;
    }

    bool esDeLoteUnico(Insumo insumo)
    {
    if (insumo.Lotes == null) return false;
    var lotes = JsonSerializer.Deserialize<List<Lote>>(insumo.Lotes);
    foreach (var lote in lotes)
    {
    if (lote.Tipo == "Lote unico") return true;
    }
    return false;
    }

    List<Lote> listaLotes(Insumo insumo)
    {
    List<Lote> a = new();
    if (insumo.Lotes != null) a = JsonSerializer.Deserialize<List<Lote>>(insumo.Lotes);
    return a;
    }

    public async Task alertaOk()
    {
    SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
    {
    Title = "Se descontó correctamente el stock.",
    Icon = SweetAlertIcon.Success,
    ShowCancelButton = false,
    ConfirmButtonText = "Entendido"

    });

    if (!string.IsNullOrEmpty(result.Value))
    {
    }
    else if (result.Dismiss == DismissReason.Cancel)
    {

    }
    }

    public async Task cargarInsumo()
    {
    if (cantidad > 0 && !(lote.Cantidad < cantidad))
    {
    if (lote.Tipo != "Lote unico")
    {
    lote.Cantidad -= cantidad;
    await http.PutAsJsonAsync<Lote>($"/api/Lotes/{insumo.Id}", lote);
    }
    else
    {
    insumo.StockReal -= cantidad;
    await http.PutAsJsonAsync<Insumo>($"/api/insumo", insumo);
    }

    InsumosUsados nuevoUtilizado = new() { insumo = insumo, cantidad = cantidad, lote = lote.Numero, Descripcion = insumo.Descripcion };
    if (insumosUsados.Where(a => a.insumo.Id == insumo.Id && a.lote == lote.Numero).Count() == 0) insumosUsados.Add(nuevoUtilizado);
    else insumosUsados.Where(a => a.insumo.Id == insumo.Id && a.lote == lote.Numero).First().cantidad += cantidad;
    var response2 = await http.GetFromJsonAsync<Respuesta<List<Insumo>>>("/api/insumo");
    oRtaInsumos = response2.List;
    StateHasChanged();
    grid.Reload();
    gridDropInsumos.Reload();
    StateHasChanged();
    alertaOk();
    insumo = new();
    lote = new();
    cantidad = 0;
    await steps.PrevStep();
    await steps.PrevStep();
    //[{"Descripcion":"insumingui","insumo":{"Id":1,"StockMin":12313,"StockMax":12345,"StockReal":null,"Nombre":null,"Codigo":"123","Foto":"/imagenes/insumos/123.png","Descripcion":"insumingui","Recepcion":"Recibido","Lotes":"[{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:12,\u0022Cantidad\u0022:11653,\u0022FechaIngreso\u0022:\u00222023-03-07T10:02:55.359-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:434,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:01:18.226-03:00\u0022,\u0022Alto\u0022:23,\u0022Ancho\u0022:45,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:435,\u0022Cantidad\u0022:40,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:33.484-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:436,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:49.784-03:00\u0022,\u0022Alto\u0022:3,\u0022Ancho\u0022:5,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:437,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T20:19:26.648-03:00\u0022,\u0022Alto\u0022:12,\u0022Ancho\u0022:23,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:438,\u0022Cantidad\u0022:31,\u0022FechaIngreso\u0022:\u00222023-03-27T00:37:36.655-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null}]"},"cantidad":10,"lote":12},{"Descripcion":"insumingui","insumo":{"Id":1,"StockMin":12313,"StockMax":12345,"StockReal":null,"Nombre":null,"Codigo":"123","Foto":"/imagenes/insumos/123.png","Descripcion":"insumingui","Recepcion":"Recibido","Lotes":"[{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:12,\u0022Cantidad\u0022:11643,\u0022FechaIngreso\u0022:\u00222023-03-07T10:02:55.359-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:434,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:01:18.226-03:00\u0022,\u0022Alto\u0022:23,\u0022Ancho\u0022:45,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:435,\u0022Cantidad\u0022:40,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:33.484-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:436,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:49.784-03:00\u0022,\u0022Alto\u0022:3,\u0022Ancho\u0022:5,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:437,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T20:19:26.648-03:00\u0022,\u0022Alto\u0022:12,\u0022Ancho\u0022:23,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:438,\u0022Cantidad\u0022:31,\u0022FechaIngreso\u0022:\u00222023-03-27T00:37:36.655-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null}]"},"cantidad":10,"lote":12}]
    if (calcularCantidad(insumo) < insumo.StockMin)
    {
    NotificationService.Notify(new NotificationMessage
    {
    Severity = NotificationSeverity.Info,
    Detail = $"El insumo {insumo.Descripcion} quedo con menor stock que el minimo",
    Duration = 4000
    });
    }
    if (oTrabajo.Insumosusados != null)
    {

    oTrabajo.Insumosusados = JsonSerializer.Serialize<List<InsumosUsados>>(insumosUsados);
    }
    else
    {
    //insumosUsados.Add(nuevoUtilizado);
    oTrabajo.Insumosusados = JsonSerializer.Serialize<List<InsumosUsados>>(insumosUsados);

    }
    await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

    }
    else if (cantidad == 0)
    {
    NotificationService.Notify(new NotificationMessage
    {
    Severity = NotificationSeverity.Warning,
    Detail = "Cargar una cantidad",
    Duration = 4000
    });
    }
    else
    {
    NotificationService.Notify(new NotificationMessage
    {
    Severity = NotificationSeverity.Error,
    Detail = "No se dispone de esa cantidad",
    Duration = 4000
    });
    }



    await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

    }

    public async Task alertaDeleteInsumo(InsumosUsados insCant)
    {
    SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
    {
    Title = "¿Está seguro?",
    Text = "Se borrara este insumo",
    Icon = SweetAlertIcon.Warning,
    ShowCancelButton = true,
    ConfirmButtonText = "Aceptar",
    CancelButtonText = "Cancelar"
    });

    if (!string.IsNullOrEmpty(result.Value))
    {
    deleteInsumo(insCant);
    }
    else if (result.Dismiss == DismissReason.Cancel)
    {

    }
    }

    public async void deleteInsumo(InsumosUsados insCant)
    {
    insumosUsados.Remove(insCant);
    StateHasChanged();
    grid.Reload();
    StateHasChanged();
    Insumo ins = insCant.insumo;
    if (esDeLoteUnico(insumo))
    {
    ins.StockReal += insCant.cantidad;
    await http.PutAsJsonAsync<Insumo>("/api/insumo", ins);
    }
    else
    {
    var a = await http.GetFromJsonAsync<Respuesta<List<Lote>>>($"/api/lotes/{ins.Id}");
    Lote loteDelteado = a.List.Where(x => x.Numero == insCant.lote).First();
    loteDelteado.Cantidad += insCant.cantidad;
    await http.PutAsJsonAsync<Lote>($"/api/Lotes/{ins.Id}", loteDelteado);

    }

    if (oTrabajo.Insumosusados != null)
    {
    oTrabajo.Insumosusados = JsonSerializer.Serialize<List<InsumosUsados>>(insumosUsados);
    await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
    }
    }
    -->
    async Task gotoplanos()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Planos>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    async Task gotodespiece()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Medium
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Despiece>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
        }
    }

    async Task Get()
    {
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;
        StateHasChanged();
        grid.Reload();
        gridDropInsumos.Reload();
        StateHasChanged();
    }

    async Task gotoadministrarinsumos()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AdministrarInsumos.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AdministrarInsumos>("Administrar Insumos", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await OnInitializedAsync();

        }
        else
        {
            await Get();
        }
    }

    public void gotoreporte()
    {
        nav.NavigateTo($"/reporteobra/{id}");
    }

    public void gotocalidad()
    {
        nav.NavigateTo($"/certificadocalidad/{id}");
    }

    
   
     

}

