

<center>
    @if (oRtaInsumos != null && oRtaInsumos.Count() > 0)
    {

        <RadzenSteps @ref="steps">
            <Steps>
                <RadzenStepsItem Text="Seleccionar insumo a utilizar" Selected=SeleccionarInsumo>
                    <center>
                        <RadzenDropDownDataGrid TValue="InsumoDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                Data=@(oRtaInsumos) Style="width: 100%" AllowColumnResize="true" @bind-Value="insumo" @ref="gridDropInsumos"
                                                TextProperty="Descripcion" AllowFilteringByAllStringColumns="true">

                            <Columns>
                                <RadzenDropDownDataGridColumn Property="Descripcion" Title="Descripción" Width="100px" />
                                <RadzenDropDownDataGridColumn Property="Codigo" Title="Código" Width="100px" />
                                <RadzenDropDownDataGridColumn Property="" Title="Stock" Width="100px">
                                    <Template Context="data">
                                        @if (esDeLoteUnico(data))
                                        {
                                            @data.StockReal
                                        }
                                        else
                                        {
                                            @data.StockReal
                                        }
                                    </Template>
                                </RadzenDropDownDataGridColumn>
                            </Columns>
                        </RadzenDropDownDataGrid>

                    </center>
                </RadzenStepsItem>

                <RadzenStepsItem Disabled="@(insumo.Descripcion == null)" Text="Elegir lote a utilizar">
                    <center>
                        @if (esDeLoteUnico(insumo))
                        {
                            lote = listaLotes(insumo).First();

                            <br />
                            <p @onclick="async () => await steps.NextStep()">El insumo es de lote único, pase al siguiente paso</p>
                        }
                        else
                        {
                            <RadzenTabs RenderMode="TabRenderMode.Client">
                                <Tabs>


                                    <RadzenTabsItem Text="Nuevos">

                                        <RadzenDropDownDataGrid TValue="Lote" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                                Data=@(listaLotesNuevos(insumo))
                                                                Style="width: 100%" AllowColumnResize="true" @bind-Value="lote"
                                                                TextProperty="Numero" AllowFilteringByAllStringColumns="true">
                                            <Columns>


                                                <RadzenDropDownDataGridColumn Property="Numero" Title="Numero de lote" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Tipo" Title="Tipo" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Cantidad" Title="Stock" Width="100px" />
                                            </Columns>
                                        </RadzenDropDownDataGrid>
                                    </RadzenTabsItem>


                                    <RadzenTabsItem Text="Recorte">
                                        <RadzenDropDownDataGrid TValue="Lote" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                                                Data=@(listaLotesRecorte(insumo))
                                                                Style="width: 100%" AllowColumnResize="true" @bind-Value="lote"
                                                                TextProperty="Numero" AllowFilteringByAllStringColumns="true">
                                            <Columns>
                                                <RadzenDropDownDataGridColumn Property="Numero" Title="Numero de lote" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Tipo" Title="Tipo" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Alto" Title="Alto" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Ancho" Title="Ancho" Width="100px" />
                                                <RadzenDropDownDataGridColumn Property="Cantidad" Title="Stock" Width="100px" />
                                            </Columns>
                                        </RadzenDropDownDataGrid>
                                    </RadzenTabsItem>


                                </Tabs>
                            </RadzenTabs>
                        }
                    </center>
                </RadzenStepsItem>

                <RadzenStepsItem Disabled="@(lote.Tipo==null)" Text="Elegir cantidad a utilizar">
                    <center>
                        <div class="col-lg-3">
                            <div class="input-group">
                                <input @bind=@cantidad class="form-control" style="width:40%;"></input>
                                <span class="input-group-btn">

                                    <button class="btn btn-outline" title="Enviar" disabled=@disable @onclick="cargarInsumo"><FeatherSend Color="black" /></button>
                                </span>
                            </div>
                        </div>
                    </center>
                </RadzenStepsItem>

            </Steps>
        </RadzenSteps>

        @if (insumosUsados.Count() != 0)
        {
            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="4"
                            AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="grid" Style="width: 50%" AllowFiltering="true"
                            Data="@insumosUsados" TItem="InsumosUsados" ColumnWidth="100px">
                <Columns>
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="Descripcion" Filterable="false" Title="Insumo" Width="50px" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="cantidad" Filterable="false" Title="Cantidad" Width="50px" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="lote" Filterable="false" Title="Lote usado" Width="50px" TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="InsumosUsados" Property="" Title="" Filterable="false" Width="50px">
                        <Template Context="data">
                            <button class="btn" title="Eliminar" @onclick="() => alertaDeleteInsumo(data)"><FeatherTrash2 Color="red" /></button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
    }
    else
    {
        <RadzenText>No hay insumos disponibles</RadzenText>
    }
</center>


@code {
    bool disable;

    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    List<InsumoDTO> oRtaInsumos;
    List<Personal> oRtaPersonal;
    List<InsumosUsados> insumosUsados = new();
    List<Lote> listaTodosLotes = new();
    RadzenSteps? steps;
    RadzenDataGrid<InsumosUsados>? grid;
    RadzenDataGrid<Personal>? gridOperarios;
    RadzenDropDownDataGrid<InsumoDTO>? gridDropInsumos;
    Personal persona;
    List<Personal> listaOperarios = new();
    Respuesta<List<EventosProduccion>> personalEventos = new();

    InsumoDTO insumo = new();
    Lote lote = new();
    InsumosUsados InsumosUsadosParaGuardar = new();
    int cantidad;
    bool SeleccionarInsumo = false;

    public void resetInsLote()
    {
        lote = new();
        cantidad = 0;
        insumo = new();
    }
    protected override async Task OnInitializedAsync()
    {
        disable = false;
        var rtaa = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");
        listaTodosLotes = rtaa.List;
        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List.Where(x => x.Codigo.StartsWith("CH")).ToList();

        var response3 = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/personal");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Punzonado");
        foreach (var persona in personalEventos.List)
        {
            var rta = await http.GetFromJsonAsync<Respuesta<Personal>>($"/api/personal/{persona.Operario}");
            listaOperarios.Add(rta.List);
        }
        if (oTrabajo.Insumosusados != null)
        {
            insumosUsados = JsonSerializer.Deserialize<List<InsumosUsados>>(oTrabajo.Insumosusados);
        }

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
    }

    <!--public async Task alertaSend()
    {
    SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
    {
    Title = "¿Está seguro?",
    Text = "Se enviará a control de carpeta",
    Icon = SweetAlertIcon.Success,
    ShowCancelButton = true,
    ConfirmButtonText = "Enviar",
    CancelButtonText = "Cancelar"
    });

    if (!string.IsNullOrEmpty(result.Value))
    {
    await send();
    }
    else if (result.Dismiss == DismissReason.Cancel)
    {

    }
    }-->
    <!--async Task send()
    {
    oTrabajo.Estado = "CC";
    await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

    if (insumosUsados != null)
    {
    foreach (var insumo in insumosUsados)
    {
    PedidosPañol consumo = new();
    consumo.Fecha = DateTime.Now;
    consumo.Codigo = "Punzonado";
    consumo.Insumo = insumo.insumo.Id;
    consumo.Cantidad = insumo.cantidad;
    await http.PostAsJsonAsync<PedidosPañol>("/api/PedidosPañol", consumo);
    }
    }
    else
    {
    //agregar alerta que no se esesta eligiendo ningun insumo
    }



    ComeBack();
    }-->
    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (listaTodosLotes != null)
        {

            foreach (var lote in lotes)
            {
                if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
            }
        }
        return total;
    }

    bool esDeLoteUnico(InsumoDTO insumo)
    {
        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (lotes == null) return false;

        foreach (var lote1 in lotes)
        {
            if (lote1.Tipo == "Lote unico")
            {
                return true;
            }
        }

        return false;
    }

    List<Lote> listaLotes(InsumoDTO insumo)
    {
        List<Lote> a = new();
        a = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id).ToList();
        return a;
    }

    List<Lote> listaLotesNuevos(InsumoDTO insumo)
    {
        //List<Lote> a = new();
        List<Lote> oListaLotesNuevos = new();

        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (lotes != null)
        {
            foreach (var i in lotes)
            {
                if (i.Tipo == "Lote nuevo")
                {
                    oListaLotesNuevos.Add(i);
                }
            }
        }
        return oListaLotesNuevos;
    }

    List<Lote> listaLotesRecorte(InsumoDTO insumo)
    {

        List<Lote> oListaLotesRecorte = new();
        var lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id);

        if (lotes != null)
        {
            lotes = listaTodosLotes.Where(x => x.IdInsumo == insumo.Id).ToList();
            foreach (var i in lotes)
            {
                if (i.Tipo == "Lote de recorte")
                {
                    oListaLotesRecorte.Add(i);
                }
            }
        }
        return oListaLotesRecorte;
    }

    public async Task alertaOk()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Se descontó correctamente el stock.",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = false,
                ConfirmButtonText = "Entendido"

            });

        if (!string.IsNullOrEmpty(result.Value))
        {
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task cargarInsumo()
    {
        disable = true;
        if (cantidad > 0 && !(lote.Cantidad < cantidad))
        {
            if (lote.Tipo != "Lote unico")
            {

                lote.Cantidad -= cantidad;
                insumo.StockReal -= cantidad;                

                await http.PutAsJsonAsync<Lote>($"/api/Lotes", lote);
            }
            else
            {

                insumo.StockReal -= cantidad;
                await http.PutAsJsonAsync<InsumoDTO>($"/api/insumo", insumo);
            }
            

            InsumosUsados nuevoUtilizado = new() { insumo = insumo, cantidad = cantidad, lote = lote.Id, Descripcion = insumo.Descripcion };
            if (insumosUsados.Where(a => a.insumo.Id == insumo.Id && a.lote == lote.Id).Count() == 0) insumosUsados.Add(nuevoUtilizado);
            else insumosUsados.Where(a => a.insumo.Id == insumo.Id && a.lote == lote.Id).First().cantidad += cantidad;
            var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
            oRtaInsumos = response2.List.Where(x => x.Codigo.StartsWith("CH")).ToList();
            StateHasChanged();
            grid.Reload();
            gridDropInsumos.Reload();
            StateHasChanged();
            alertaOk();
            insumo = new();
            lote = new();
            cantidad = 0;
            await steps.PrevStep();
            await steps.PrevStep();
            //[{"Descripcion":"insumingui","insumo":{"Id":1,"StockMin":12313,"StockMax":12345,"StockReal":null,"Nombre":null,"Codigo":"123","Foto":"/imagenes/insumos/123.png","Descripcion":"insumingui","Recepcion":"Recibido","Lotes":"[{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:12,\u0022Cantidad\u0022:11653,\u0022FechaIngreso\u0022:\u00222023-03-07T10:02:55.359-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:434,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:01:18.226-03:00\u0022,\u0022Alto\u0022:23,\u0022Ancho\u0022:45,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:435,\u0022Cantidad\u0022:40,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:33.484-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:436,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:49.784-03:00\u0022,\u0022Alto\u0022:3,\u0022Ancho\u0022:5,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:437,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T20:19:26.648-03:00\u0022,\u0022Alto\u0022:12,\u0022Ancho\u0022:23,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:438,\u0022Cantidad\u0022:31,\u0022FechaIngreso\u0022:\u00222023-03-27T00:37:36.655-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null}]"},"cantidad":10,"lote":12},{"Descripcion":"insumingui","insumo":{"Id":1,"StockMin":12313,"StockMax":12345,"StockReal":null,"Nombre":null,"Codigo":"123","Foto":"/imagenes/insumos/123.png","Descripcion":"insumingui","Recepcion":"Recibido","Lotes":"[{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:12,\u0022Cantidad\u0022:11643,\u0022FechaIngreso\u0022:\u00222023-03-07T10:02:55.359-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:434,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:01:18.226-03:00\u0022,\u0022Alto\u0022:23,\u0022Ancho\u0022:45,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:435,\u0022Cantidad\u0022:40,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:33.484-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:436,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T19:43:49.784-03:00\u0022,\u0022Alto\u0022:3,\u0022Ancho\u0022:5,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote de recorte\u0022,\u0022Numero\u0022:437,\u0022Cantidad\u0022:null,\u0022FechaIngreso\u0022:\u00222023-03-26T20:19:26.648-03:00\u0022,\u0022Alto\u0022:12,\u0022Ancho\u0022:23,\u0022OC\u0022:null},{\u0022Tipo\u0022:\u0022Lote nuevo\u0022,\u0022Numero\u0022:438,\u0022Cantidad\u0022:31,\u0022FechaIngreso\u0022:\u00222023-03-27T00:37:36.655-03:00\u0022,\u0022Alto\u0022:null,\u0022Ancho\u0022:null,\u0022OC\u0022:null}]"},"cantidad":10,"lote":12}]
            if (calcularCantidad(insumo) < insumo.StockMin)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Detail = $"El insumo {insumo.Descripcion} quedo con menor stock que el minimo",
                        Duration = 4000
                    });
            }
            if (oTrabajo.Insumosusados != null)
            {

                oTrabajo.Insumosusados = JsonSerializer.Serialize<List<InsumosUsados>>(insumosUsados);
            }
            else
            {
                //insumosUsados.Add(nuevoUtilizado);
                oTrabajo.Insumosusados = JsonSerializer.Serialize<List<InsumosUsados>>(insumosUsados);

            }
            await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        }
        else if (cantidad == 0)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Detail = "Cargar una cantidad",
                    Duration = 4000
                });
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Detail = "No se dispone de esa cantidad",
                    Duration = 4000
                });
        }

        

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        disable = false;
    }
    public async Task alertaDeleteInsumo(InsumosUsados insCant)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se borrara este insumo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteInsumo(insCant);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task Get()
    {
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List.Where(x => x.Codigo.StartsWith("CH")).ToList();
        StateHasChanged();
        grid.Reload();
        gridDropInsumos.Reload();
        StateHasChanged();
    }

    public async void deleteInsumo(InsumosUsados insCant)
    {
        insumosUsados.Remove(insCant);

        InsumoDTO ins = insCant.insumo;
        if (lote.Tipo != "Lote unico")
        {

            var loteDelteado = listaTodosLotes.Where(x => x.Id == insCant.lote).FirstOrDefault();

            loteDelteado.Cantidad += insCant.cantidad;
            insumo.StockReal += insCant.cantidad;

            await http.PutAsJsonAsync<Lote>($"/api/Lotes", loteDelteado);
        }
        else
        {
            ins.StockReal += insCant.cantidad;
            await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", ins);

        }

        if (oTrabajo.Insumosusados != null)
        {
            oTrabajo.Insumosusados = JsonSerializer.Serialize<List<InsumosUsados>>(insumosUsados);
            await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        }


        resetInsLote();
        SeleccionarInsumo = true;
        await Get();
    }



    <!--async Task gotoplanos()
    {
    var parameters = new ModalParameters();
    var options = new ModalOptions()
    {
    HideHeader = true,
    };
    parameters.Add(nameof(Info.id), id);
    var formModal = Modal.Show<Planos>("", parameters, options);
    var result = await formModal.Result;

    if (result.Cancelled)
    {
    Console.WriteLine("Modal was cancelled");
    }
    else
    {
    await OnInitializedAsync();
    }
    }-->
    <!--async Task gotodespiece()
    {
    var parameters = new ModalParameters();
    var options = new ModalOptions()
    {
    HideHeader = true,
    };
    parameters.Add(nameof(Info.id), id);
    var formModal = Modal.Show<Despiece>("", parameters, options);
    var result = await formModal.Result;

    if (result.Cancelled)
    {
    Console.WriteLine("Modal was cancelled");
    }
    else
    {
    await OnInitializedAsync();
    }
    }-->
    <!--public void gotoreporte()
    {
    nav.NavigateTo($"/reporteobra/{id}");
    }
    public void gotocalidad()
    {
    nav.NavigateTo($"/certificadocalidad/{id}");
    }-->
}
