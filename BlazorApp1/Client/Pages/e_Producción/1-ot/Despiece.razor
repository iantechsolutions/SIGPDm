@using System.Text.Json

 Agregar despiece (max 10)
<br />
<InputFile OnChange="@OnInputFileChange" multiple />
<br />
<br />
@foreach (var plano in planos.ToList())
{
   
    <a href="despiece/@plano" download target="_blank">Plano: @plano</a>
    <button class="btn" @onclick="()=>alertaDelete(plano)"><FeatherX Color="red"></FeatherX></button>
    

    <br />
}
<br />
<br />
<button @onclick="alertaGuardar" class="btn btn-primary mr-2">Guardar</button>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 10;
    private bool shouldRender;
    MultipartFormDataContent content = new MultipartFormDataContent();
    List<string> planos = new();


    protected override async Task OnInitializedAsync()
    {

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;
        if (oTrabajo.Despiece != null)
        {
            var despiece = JsonSerializer.Deserialize<List<string>>(oTrabajo.Despiece);


            planos = despiece;
        }
    }

    public async Task alertaGuardar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se guardará el despiece",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            Guardar();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task Guardar()
    {


        oTrabajo.Despiece = JsonSerializer.Serialize<List<string>>(planos);
        var client = ClientFactory.CreateClient();
        var response =
            await client.PostAsync($"{nav.BaseUri}despiece",
            content);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                };

            using var responseStream =
                await response.Content.ReadAsStreamAsync();

            var newUploadResults = await JsonSerializer
                .DeserializeAsync<IList<UploadResult>>(responseStream, options);

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));

    }

    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {      

        shouldRender = false;
        Console.WriteLine(1);
        long maxFileSize = 1024 * 1500000;
        Console.WriteLine(2);
        var upload = false;
        Console.WriteLine(3);
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            planos.Add(file.Name);
            Console.WriteLine(4);
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                Console.WriteLine(5);
                try
                {

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));



                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);
                    upload = true;
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);

                    // uploadResults.Add(
                    //     new()
                    //         {
                    //             FileName = file.Name,
                    //             ErrorCode = 6,
                    //             Uploaded = false
                    //         });
                }
            }
        }


        shouldRender = true;
    }
    async Task alertaDelete(string? plano)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminara el despiece",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await deletePlano(plano);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }


    }
    public async Task deletePlano(string? despiece)
    {
        planos = planos.Where(x => x != despiece).ToList();
        oTrabajo.Despiece = JsonSerializer.Serialize<List<string>>(planos);
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

    }
    private class File
    {
        public string? Name { get; set; }
    }
}
