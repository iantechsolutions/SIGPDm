@using System.Text.Json

<EditForm Model="@notificacion" OnValidSubmit="CrearNotificacion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-sm-6">
            <label>Título</label>
            <InputText class="form-control" @bind-Value="notificacion.Titulo" placeholder="Título"></InputText>
            <ValidationMessage For="(() => notificacion.Titulo)" style="color:red;" />
        </div>
        <div class="col-sm-6">
            <label>Fecha de Entrega</label>
            <InputDate class="form-control" @bind-Value="notificacion.FechaEntrega" placeholder="Fecha de Entrega"></InputDate>
            <ValidationMessage For="(() => notificacion.FechaEntrega)" style="color:red;" />
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-6">
            <label>Seleccionar Rol</label>
            <select class="form-control" @onchange="(e) => AgregarRol(e)">
                <option value="">Seleccione un rol</option>
                @foreach (var rol in rolesDisponibles)
                {
                    <option value="@rol">@rol</option>
                }
            </select>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-12">
            <label>Roles Seleccionados</label>
            @if (rolesSeleccionados.Any())
            {
                <ul class="list-group">
                    @foreach (var rol in rolesSeleccionados)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @rol
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarRol(rol)">
                                <FeatherTrash2 Color="red"/>
                            </button>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No se han seleccionado roles.</p>
            }
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-12">
            <label>Descripción</label>
            <InputTextArea class="form-control" @bind-Value="notificacion.Descripcion" placeholder="Descripción"></InputTextArea>
            <ValidationMessage For="(() => notificacion.Descripcion)" style="color:white;" />
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-6">
            <button type="submit" class="btn btn-primary">Crear Notificación</button>
        </div>
        <div class="col-sm-6">
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
</EditForm>

@code {




    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }

    [Parameter] public string? Etapa { get; set; }

    List<string>? rolesDisponibles = new List<string> { "Oficina tecnica", "Punzonado", "Plegado", "Soldadura", "Pulido", "Pintura", "Armado", "Despacho" };
    public List<string> rolesSeleccionados = new List<string>();
    string? rolSeleccionado;
    Notificaciones? notificacion = new Notificaciones();

    protected override async Task OnInitializedAsync()
    {

        notificacion.FechaEntrega = DateTime.Now;
        rolesSeleccionados = Etapa?.Split(", ")
                              .Select(rol => rol.Trim())
                              .ToList() ?? new List<string>();
        Console.WriteLine(Etapa);



    }



    void AgregarRol(ChangeEventArgs e)
    {



        rolSeleccionado = e.Value?.ToString();
        Console.WriteLine(rolSeleccionado);
        Console.WriteLine(Etapa);

        if (!string.IsNullOrEmpty(rolSeleccionado) && !rolesSeleccionados.Contains(rolSeleccionado))
        {
            rolesSeleccionados.Add(rolSeleccionado);
        }
        Console.WriteLine(rolesSeleccionados);
        rolSeleccionado = string.Empty;



    }

    void EliminarRol(string rol)
    {
        rolesSeleccionados.Remove(rol);
    }

    async Task CrearNotificacion()
    {
        notificacion.RolesAfectados = JsonSerializer.Serialize(rolesSeleccionados);
        Console.WriteLine(Etapa);

        notificacion.UsuariosVisto = "";
        notificacion.UsuariosQueAfecta = JsonSerializer.Serialize(rolesSeleccionados);
        notificacion.FechaCreacion = DateTime.Now;
        await http.PostAsJsonAsync<Notificaciones>("/api/notificaciones", notificacion);
        await ModalInstance!.CloseAsync(ModalResult.Ok(notificacion));
    }

    public async Task Cancelar()
    {
        await ModalInstance!.CancelAsync();
    }
}


