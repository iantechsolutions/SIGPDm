<EditForm Model="@notificacion" OnValidSubmit="CrearNotificacion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-sm-6">
            <label>Título</label>
            <InputText class="form-control" @bind-Value="notificacion.Titulo" placeholder="Título"></InputText>
            <ValidationMessage For="(() => notificacion.Titulo)" style="color:red;" />
        </div>
        <div class="col-sm-6">
            <label>Fecha de Entrega</label>
            <InputDate class="form-control" @bind-Value="notificacion.FechaEntrega" placeholder="Fecha de Entrega"></InputDate>
            <ValidationMessage For="(() => notificacion.FechaEntrega)" style="color:red;" />
        </div>
    </div>

    <div class="row">
        <div class="col-sm-8">
            <label>Seleccionar Rol</label>
            <InputSelect class="form-control" @bind-Value="role" Multiple="true" @onchange="OnRoleChange">
                @foreach (var item in rolesDisponibles)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
            <ValidationMessage For="(() => role)" style="color:red;" />
        </div>

    </div>

    <div class="row mt-3">
        <div class="col-sm-12">
            <label>Roles Seleccionados</label>
            <ul>
                @foreach (var selected in selectedRole)
                {
                    <li>
                        @selected
                        <button class="btn" type="button" @onclick="() => deleteDescription(selected)">
                            <FeatherX Color="red"></FeatherX>
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="col-sm-12 mt-3">
        <label>Descripción</label>
        <InputTextArea class="form-control" @bind-Value="notificacion.Descripcion" placeholder="Descripción"></InputTextArea>
        <ValidationMessage For="(() => notificacion.Descripcion)" style="color:red;" />
    </div>

    <div class="row mt-3">
        <div class="col-sm-6">
            <button type="submit" class="btn btn-primary">Crear Notificación</button>
        </div>
        <div class="col-sm-6">
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }

    [Parameter] public string Etapa { get; set; }

    Notificaciones? notificacion = new Notificaciones();

    string? role;
    List<string> selectedRole = new List<string> { "Punzonado", "Plegado" };
    List<string> rolesDisponibles = new List<string>
    {
        "Oficina tecnica", "CC", "Punzonado", "Plegado", "CPL", "Soldadura",
        "Pulido", "CPU", "Pintura", "CP", "Armado", "CA", "Despacho"
    };

    protected override async Task OnInitializedAsync()
    {
        notificacion.FechaEntrega = DateTime.Now;
        Console.WriteLine(Etapa);
    }

    public async Task deleteDescription(string role)
    {
        selectedRole.Remove(role);
    }

    public async Task addDescription()
    {
        if (!string.IsNullOrEmpty(role) && !selectedRole.Contains(role))
        {
            selectedRole.Add(role);
            role = ""; // Limpiar el campo después de agregar
        }
    }

    public async Task CrearNotificacion()
    {
        notificacion.RolesAfectados = string.Join(", ", selectedRole);
        notificacion.UsuariosQueAfecta = string.Join(", ", selectedRole);
        notificacion.FechaCreacion = DateTime.Now;

        await http.PostAsJsonAsync<Notificaciones>("/api/notificaciones", notificacion);
        await ModalInstance!.CloseAsync(ModalResult.Ok(notificacion));
    }

    public async Task Cancelar()
    {
        await ModalInstance!.CancelAsync();
    }

    // Método que se ejecuta cuando se cambia la selección en el InputSelect
    public void OnRoleChange(ChangeEventArgs e)
    {
        var selectedValues = e.Value.ToString().Split(',');  // Obtenemos los valores seleccionados
        foreach (var selected in selectedValues)
        {
            if (!selectedRole.Contains(selected))
            {
                selectedRole.Add(selected);  // Agregamos el rol si no está en la lista
            }
        }
    }
}
