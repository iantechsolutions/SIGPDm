@* @page "/punzonado"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<div style="display:flex; flex-direction:row; justify-content:space-between">
    <div>
        <h1>Punzonado</h1>
        <p>En esta sección se podrá gestionar punzonado.</p>
    </div>
    <div>
        <AuthorizeView Roles="Admin, USUARIOMAESTRO, OficinaTecnica, Produccion">
            <button class="btn btn-outline-success" @onclick=AddNotis>Agregar mensajes</button>
        </AuthorizeView>

        <button class="btn btn-outline-success" @onclick=goToReporte>Imprimir reporte</button>

    <button class="btn btn-outline-success" @onclick=gotoAddRecorte>Agregar Recorte</button>
    </div>

</div>
<br />
<br />
<hr />


@if (oRespuesta.List != null)
{
    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>


            <RadzenTabsItem Text="Ordenes de trabajo">
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5"
                                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data="@oRespuesta.List" TItem="Ordentrabajo" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or" @ref="grid">
                    <Columns>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="90px">
                            <Template Context="data">
                                <a>@($"OT{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="110px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="90px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Obra" Title="Obra" Width="80px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Referencia" Title="Referencia" Width="100px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>


            </RadzenTabsItem>
            <RadzenTabsItem Text="Notificaciones">


                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="30"
                                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data="@notificaciones" TItem="Notificaciones" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or" @ref="grid2">
                    <Columns>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="90px">
                            <Template Context="data">
                                <a>@($"OT{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Notificaciones" Property="Titulo" Title="Titulo" Width="25%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="Descripcion" Title="Descripcion" Width="35%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="FechaCreacion" Title="Fecha creacion" Width="15%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="FechaEntrega" Title="Fecha entrega" Width="15%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => FinalizarNoti(data)"><FeatherCheck Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Notificaciones finalizadas">


                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="30"
                                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                Data="@notificacionesFinalizadas" TItem="Notificaciones" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or" @ref="grid3">
                    <Columns>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="90px">
                            <Template Context="data">
                                <a>@($"OT{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Notificaciones" Property="Titulo" Title="Titulo" Width="30%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="Descripcion" Title="Descripcion" Width="40%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="FechaCreacion" Title="Fecha creacion" Width="15%" />
                        <RadzenDataGridColumn TItem="Notificaciones" Property="FechaEntrega" Title="Fecha entrega" Width="15%" />
                        

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Ordentrabajo>>? oRespuesta = new();


    RadzenDataGrid<Ordentrabajo>? grid;
    RadzenDataGrid<Notificaciones>? grid2;


    List<Notificaciones>? notificaciones = new();
    List<Notificaciones>? notificacionesFinalizadas = new();
    RadzenDataGrid<Notificaciones>? grid3;

    protected override async Task OnInitializedAsync()
    {
        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/etapa/punzonado");



        var rta = await http.GetFromJsonAsync<Respuesta<List<Notificaciones>>>("/api/notificaciones");
        notificaciones = rta?.List?
            .Where(x => x.RolesAfectados != null && (!x.UsuariosVisto.Contains("Punzonado") && !x.UsuariosVisto.Contains("Plegado")) &&
                        (x.RolesAfectados.Contains("Punzonado") || x.RolesAfectados.Contains("Plegado")))
            .ToList() ?? new List<Notificaciones>();

        notificacionesFinalizadas = rta.List.Where(x => x.RolesAfectados != null && (x.UsuariosVisto.Contains("Punzonado") && x.UsuariosVisto.Contains("Plegado")) &&
                        (x.RolesAfectados.Contains("Punzonado") || x.RolesAfectados.Contains("Plegado")))
            .ToList() ?? new List<Notificaciones>();
    }


    async Task ComeBack()
    {
        nav.NavigateTo("/produccion");
    }


    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task delete(int id)
    {
        var ot = oRespuesta.List.Where(x => x.Id == id).FirstOrDefault();
        ot.Estado = "Cancelado";
        await http.PutAsJsonAsync<Ordentrabajo>($"/api/ot", ot);
        await OnInitializedAsync();
        StateHasChanged();
    }

    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/punzonado/{id}");
    }
    async Task gotoAddRecorte()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var formModal = Modal.Show<BlazorApp1.Client.Pages.e_Producción._1_ot.AddRecorte>("Agregar lote de recorte", options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");


            await OnInitializedAsync();
        }

    }
    async Task goToReporte()
    {
        string etapa = "punzonado";
        nav.NavigateTo($"/ImprimirReporte/{etapa}");
    }


    public async Task AddNotis()
    {
        string? Etapa = "Plegado, Punzonado";
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };
        var parameters = new ModalParameters();
        parameters.Add(nameof(AgregarNotificaciones.etapas), Etapa);
        var formModal = Modal.Show<AgregarNotificaciones>("Agregar mensaje a plegado y Punzonado", options);
        var result = await formModal.Result;

        if (!result.Cancelled)
        {
            await OnInitializedAsync();
            StateHasChanged(); // Actualiza la UI
        }
        else
        {
            Console.WriteLine("Modal was cancelled");
        }
    }


    public async Task FinalizarNoti(Notificaciones noti)
    {


        noti.UsuariosVisto = noti.UsuariosQueAfecta;
        

        await http.PutAsJsonAsync<Notificaciones>($"/api/notificaciones", noti);
        await OnInitializedAsync();
        StateHasChanged(); // Actualiza la UI
    }


} *@