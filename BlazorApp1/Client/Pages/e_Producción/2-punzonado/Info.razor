@page "/punzonado/{id:int}"

<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<a>Punzonado</a>
@if (oRtaPersonal != null)
{
    <h1>Información correspondiente a la orden @($"OT-{oTrabajo.Codigo}")</h1>

    @if (insumosUsados.Count() != 0)
    {
        <hr />
        <h2>Insumos disponibles</h2>
        <br />


        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="50" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="grid" Style="width: 100%" AllowFiltering="true"
                        Data="@insumosUsados" TItem="InsumosUsados" ColumnWidth="100px">
            <Columns>
                <RadzenDataGridColumn TItem="InsumosUsados" Property="Descripcion" Filterable="false" Title="Insumo" Width="50px" TextAlign="TextAlign.Left" />
                <RadzenDataGridColumn TItem="InsumosUsados" Property="cantidad" Filterable="false" Title="Cantidad" Width="50px" TextAlign="TextAlign.Left" />
                <RadzenDataGridColumn TItem="InsumosUsados" Property="lote" Filterable="false" Title="Lote usado" Width="50px" TextAlign="TextAlign.Left" />
                <RadzenDataGridColumn TItem="InsumosUsados" Property="" Title="" Filterable="false" Width="50px">
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }



    <hr />
    <h2>Administrar personal</h2>
    <br />
    <br />

    <RadzenDropDownDataGrid TValue="Personal" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                            Data=@(oRtaPersonal) Style="width: 50%" AllowColumnResize="true" @bind-Value="persona"
                            TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start">
        <Columns>
            <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="50px" />
            <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="100px" />
            <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
        </Columns>


    </RadzenDropDownDataGrid>
    @if (persona != null)
    {
        <button class="btn btn-outline-success float-md" @onclick="cargarOperario">Seleccionar</button>
    }
    <br />
    <br />
    @if (listaOperarios.Count() > 0)
    {
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="10" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="gridOperarios" AllowFiltering="true"
                        Data="@listaOperarios" TItem="PersonaEvento" ColumnWidth="100px" Style="width: 100%">
            <Columns>
                <RadzenDataGridColumn TItem="PersonaEvento" Filterable="false" Title="Nombre" Width="30px" TextAlign="TextAlign.Left">
                    <Template Context="data">
                        <RadzenText>@data.Operario.Nombres</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Filterable="false" Title="Apellido" Width="30px" TextAlign="TextAlign.Left">
                    <Template Context="data">
                        <RadzenText>@data.Operario.Apellido</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Día" Filterable="false" Width="11vh">
                    <Template Context="data">
                        <RadzenDatePicker @bind-Value="data.Fecha" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:25vh;content: 'query_builder';" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Desde" Filterable="false" Width="6.5vh">
                    <Template Context="data">
                        <RadzenDatePicker @bind-Value="data.FechaDesde" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:15vh;" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Hasta" Filterable="false" Width="6.5vh">
                    <Template Context="data">
                        <RadzenDatePicker @bind-Value="data.FechaHasta" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:15vh;" />
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="" Filterable="false" Width="50px">
                    <Template Context="data">
                        <RadzenButton Disabled="@(data.EndButton)" class="btn btn-outline-info btn-sm" Click="@(() => estallar(data))">Finalizar</RadzenButton>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="" Filterable="false" Width="50px">
                    <Template Context="data">
                        <button class="btn btn-danger btn-sm" @onclick="() => alertaDeleteOperario(data)">Eliminar</button>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
    <br />
    <RadzenButton class="btn btn-outline-primary" Disabled="disabled" Click="alertaSend">Finalizar punzonado</RadzenButton>
    <button class="btn btn-outline-secondary float-end" @onclick="alertaSkip">Saltear etapa</button>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [Parameter] public int id { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Ordentrabajo oTrabajo = new();
    List<InsumoDTO> oRtaInsumos;
    List<Personal> oRtaPersonal;
    List<InsumosUsados> insumosUsados = new();
    RadzenSteps? steps;
    RadzenDataGrid<InsumosUsados>? grid;
    RadzenDataGrid<PersonaEvento>? gridOperarios;
    RadzenDropDownDataGrid<InsumoDTO>? gridDropInsumos;
    Personal persona;
    List<PersonaEvento> listaOperarios = new();
    Respuesta<List<EventosProduccion>> personalEventos = new();
    bool disabled = true;
    InsumoDTO insumo = new();
    Lotes lote = new();
    int cantidad;

    //DateTime fechaInicio = DateTime.Now;
    //DateTime fechaFinal = DateTime.Now;
    public void resetInsLote()
    {
        lote = new();
        cantidad = 0;
        insumo = new();
    }

    public async Task<bool> estaFinalizado()
    {

        if (listaOperarios.All(x => x.EndButton == true)) return true;
        return false;

    }

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;

        var response3 = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/personal/true");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Punzonado");

        foreach (var persona in personalEventos.List)
        {

            if (persona.Tipo == "Comenzar")
            {
                var rta = await http.GetFromJsonAsync<Respuesta<Personal>>($"/api/personal/{persona.Operario}");
                PersonaEvento personaEvento = new();
                personaEvento.FechaDesde = persona.Fecha;
                personaEvento.Fecha = persona.Fecha.Value.Date;
                personaEvento.Operario = rta.List;
                listaOperarios.Add(personaEvento);
            }
            if (persona.Tipo == "Finalizado")
            {
                var operario = listaOperarios.Where(x => x.FechaHasta == null && x.Operario.Id == persona.Operario).First();
                operario.FechaHasta = persona.Fecha;
                operario.EndButton = true;

            }
        }
        if (oTrabajo.Insumosusados != null)
        {
            insumosUsados = JsonSerializer.Deserialize<List<InsumosUsados>>(oTrabajo.Insumosusados);
        }
    }

    public async Task alertaSkip()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se salteará esta etapa y se enviará a plegado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Saltear",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            skip();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task estallar(PersonaEvento operario)
    {
        var temp = operario.FechaDesde.Value;
        operario.FechaDesde = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        temp = operario.FechaHasta.Value;
        operario.FechaHasta = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        try
        {
            await http.PutAsJsonAsync<EventosProduccion>($"/api/eventosproduccion/{operario.Operario.Id}/Punzonado/{oTrabajo.Id}", new EventosProduccion());
        }
        catch
        {

        }
        operario.EndButton = true;
        EventosProduccion evento = new();
        evento.Etapa = "Punzonado";
        evento.Ot = id;
        evento.Operario = operario.Operario.Id;
        evento.Fecha = operario.FechaDesde;
        evento.Tipo = "Comenzar";
        await http.PostAsJsonAsync<EventosProduccion>("/api/eventosproduccion", evento);
        evento.Fecha = operario.FechaHasta;
        evento.Tipo = "Finalizado";
        await http.PostAsJsonAsync<EventosProduccion>("/api/eventosproduccion", evento);

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Punzonado");
        gridOperarios.Reload();
        StateHasChanged();
    }

    async Task skip()
    {
        oTrabajo.Estado = "Plegado";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }

    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se enviará a plegado",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task send()
    {

        oTrabajo.Estado = "Plegado";

        List<TimesEtapa> listTimes = new();
        if (oTrabajo.Fechas != null) listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa time = new("Punzonado");
        var tiempoTotalEtapa = await http.GetFromJsonAsync<int>($"/api/EventosProduccion/getTiempoEtapa?ot={id}&etapa=Punzonado");
        time.TimeTotalEtapa = tiempoTotalEtapa;
        listTimes.Add(time);
        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);

        nav.NavigateTo($"/plegado/{oTrabajo.Id}");
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/punzonado");
    }

    //todas las cosas de aca para abajo son indiferentes a la etapa (se copian y pegan en todo xd)

    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        if (insumo.Lotes != null)
        {
            var lotes = JsonSerializer.Deserialize<List<Lotes>>(insumo.Lotes);
            foreach (var lote in lotes)
            {
                if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
            }
        }
        return total;
    }

    bool esDeLoteUnico(InsumoDTO insumo)
    {
        if (insumo.Lotes == null) return false;
        var lotes = JsonSerializer.Deserialize<List<Lotes>>(insumo.Lotes);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote unico") return true;
        }
        return false;
    }

    List<Lotes> listaLotes(InsumoDTO insumo)
    {
        List<Lotes> a = new();
        if (insumo.Lotes != null) a = JsonSerializer.Deserialize<List<Lotes>>(insumo.Lotes);
        return a;
    }

    public bool getUltimoEstado(int id)
    {
        if (personalEventos.List.Where(x => x.Tipo == "Comenzar").Count() == personalEventos.List.Where(x => x.Tipo == "Finalizado").Count()) return true;

        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var a = disabled;
        disabled = !await estaFinalizado();
        if (a != disabled) StateHasChanged();
    }

    public void cargarOperario()
    {
        PersonaEvento personaEvento = new();
        personaEvento.Operario = persona;
        personaEvento.Fecha = DateTime.Now;
        listaOperarios.Add(personaEvento);
        if (gridOperarios != null) gridOperarios.Reload();
        StateHasChanged();

    }

    public void deleteOperario(PersonaEvento operario)
    {
        var temp = operario.FechaDesde.Value;
        operario.FechaDesde = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        temp = operario.FechaHasta.Value;
        operario.FechaHasta = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;

        listaOperarios.Remove(operario);
        persona = new Personal();

        if (operario.FechaDesde != null && personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaDesde).Count() > 0) http.DeleteAsync($"/api/eventosproduccion/{personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaDesde).First().Id}");
        if (operario.FechaHasta != null && personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaDesde).Count() > 0) http.DeleteAsync($"/api/eventosproduccion/{personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaHasta).First().Id}"); gridOperarios.Reload();
        StateHasChanged();
    }

    //public async Task alertaDeleteInsumo(InsumosUsados insCant)
    //{
    //    SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
    //        {
    //            Title = "¿Está seguro?",
    //            Text = "Se borrara este insumo",
    //            Icon = SweetAlertIcon.Warning,
    //            ShowCancelButton = true,
    //            ConfirmButtonText = "Aceptar",
    //            CancelButtonText = "Cancelar"
    //        });

    //    if (!string.IsNullOrEmpty(result.Value))
    //    {
    //        deleteInsumo(insCant);
    //    }
    //    else if (result.Dismiss == DismissReason.Cancel)
    //    {

    //    }
    //}

    public async Task alertaDeleteOperario(PersonaEvento operario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se desasignará esta tarea",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteOperario(operario);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task Get()
    {
        var response2 = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oRtaInsumos = response2.List;
        StateHasChanged();
        grid.Reload();
        gridDropInsumos.Reload();
        StateHasChanged();
    }

    async Task gotoadministrarinsumos()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AdministrarInsumos.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AdministrarInsumos>("Administrar Insumos", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await OnInitializedAsync();

        }
        else
        {
            await Get();
        }
    }

    public class PersonaEvento
    {
        public Personal Operario { get; set; }
        public DateTime Fecha { get; set; }
        public DateTime? FechaDesde { get; set; } 
        public DateTime? FechaHasta { get; set; } 
        public bool EndButton;
    }


}
