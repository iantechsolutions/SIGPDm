@page "/pintura/{id:int}"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Información correspondiente a la orden @($"OT-{oTrabajo.Codigo}")</h1>
<hr />
<label>Ingrese número de remito</label>
<div class="col-lg-3">
    <div class="input-group">
        <input @bind=@nroRemito class="form-control"></input>
        <span class="input-group-btn">
            <button class="btn btn-outline" title="Enviar" @onclick="enviar"><FeatherSend Color="black" /></button>
        </span>
    </div>
</div>
<hr />

<RadzenDropDownDataGrid TValue="Personal" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                        Data=@(oRtaPersonal) Style="width: 50%" AllowColumnResize="true" @bind-Value="persona"
                        TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start">
    <Columns>
        <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="50px" />
        <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="100px" />
        <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
    </Columns>
</RadzenDropDownDataGrid>

<button class="btn btn-outline-success float-md" @onclick="cargarOperario">Seleccionar</button>
<br />
<br />
@if (listaOperarios.Count() > 0)
{
    <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="10" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="gridOperarios" AllowFiltering="true" 
                Data="@listaOperarios" TItem="Personal" ColumnWidth="100px" Style="width: 100%">
        <Columns>
            <RadzenDataGridColumn TItem="Personal" Property="Nombres" Filterable="false" Title="Nombre" Width="30px" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Personal" Property="Apellido" Filterable="false" Title="Apellido" Width="30px" TextAlign="TextAlign.Left" />
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <RadzenDatePicker @bind-Value=@fechaInicio />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <RadzenDatePicker @bind-Value=@fechaFinal Min="@fechaInicio" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <RadzenButton Disabled="@(getUltimoEstado(data.Id)=="Comenzar" || getUltimoEstado(data.Id)=="Finalizado")" class="btn btn-outline-info btn-sm" Click="@(() => estallar(data))">Finalizar</RadzenButton>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Personal" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <button class="btn btn-danger btn-sm" @onclick="() => alertaDeleteOperario(data)">Eliminar</button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
<br />
<RadzenButton class="btn btn-outline-primary" Disabled="disabled" Click="alertaSend">Finalizar pintura</RadzenButton>
<button class="btn btn-outline-secondary float-end" @onclick="alertaSkip">Saltear etapa</button>
<br />


@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    List<Personal> oRtaPersonal;
    RadzenDataGrid<Personal>? gridOperarios;
    Personal persona;
    List<Personal> listaOperarios = new();
    Respuesta<List<EventosProduccion>> personalEventos = new();
    bool disabled = true;
    int nroRemito;
    DateTime fechaInicio = DateTime.Now;
    DateTime fechaFinal = DateTime.Now;


    protected override async Task OnInitializedAsync()
    {

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

        var response3 = await http.GetFromJsonAsync<Respuesta<List<Personal>>>("/api/personal");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();
        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Pintura");
        foreach (var persona in personalEventos.List)
        {
            var rta = await http.GetFromJsonAsync<Respuesta<Personal>>($"/api/personal/{persona.Operario}");
            listaOperarios.Add(rta.List);
        }
    }

    public async Task estallar(Personal operario)
    {
        EventosProduccion evento = new();
        evento.Etapa = "Pintura";
        evento.Ot = id;
        evento.Operario = operario.Id;
        evento.Fecha = fechaInicio;
        evento.Tipo = "Comenzar";
        await http.PostAsJsonAsync<EventosProduccion>("/api/eventosproduccion", evento);

        evento.Fecha = fechaFinal;
        evento.Tipo = "Finalizado";
        await http.PostAsJsonAsync<EventosProduccion>("/api/eventosproduccion", evento);

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa={evento.Etapa}");
        gridOperarios.Reload();
        StateHasChanged();
    }

    public async Task alertaSkip()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se salteará esta etapa y se enviará a armado",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Saltear",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            skip();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }


    async Task skip()
    {
        oTrabajo.Estado = "Armado";
        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        ComeBack();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/pintura");
    }

    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se enviará a control de pintura",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Enviar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task send()
    {
        oTrabajo.Estado = "CP";

        List<TimesEtapa> listTimes = new();
        if (oTrabajo.Fechas != null) listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa time = new("Pintura");
        var tiempoTotalEtapa = await http.GetFromJsonAsync<int>($"/api/EventosProduccion/getTiempoEtapa?ot={id}&etapa=Pintura");
        time.TimeTotalEtapa = tiempoTotalEtapa;
        listTimes.Add(time);
        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        nav.NavigateTo($"/calidad/{oTrabajo.Id}");

    }

    public string getUltimoEstado(int id)
    {
        foreach (var item in personalEventos.List)
        {
            if (item.Operario == id)
            {
                return item.Tipo;
            }
        }
        return "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var a = disabled;
        disabled = !await estaFinalizado();
        if (a != disabled) StateHasChanged();
    }

    public async Task<bool> estaFinalizado()
    {
        string etapa = "Pintura";
        if (listaOperarios.Count > 0)
        {
            foreach (var operario in listaOperarios)
            {
                var asd = await http.GetFromJsonAsync<bool>($"/api/eventosproduccion/estafinalizado?idOt={id}&idOperario={operario.Id}&etapa={etapa}");
                if (!asd) return false;
            }
            return true;
        }
        else
        {
            return false;
        }

    }

    public void cargarOperario()
    {
        if (!listaOperarios.Contains(persona))
        {
            listaOperarios.Add(persona);
            if (gridOperarios != null) gridOperarios.Reload();
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Info,
                    Detail = "El operario ya esta en la lista",
                    Duration = 4000
                });
        }
    }

    public void deleteOperario(Personal operario)
    {
        listaOperarios.Remove(operario);
        StateHasChanged();
        gridOperarios.Reload();
        StateHasChanged();
    }

    public async Task alertaDeleteOperario(Personal operario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se desasignará esta tarea",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteOperario(operario);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task enviar()
    {
        alertaOk();
    }

    public async Task alertaOk()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Se envió el remito.",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = false,
                ConfirmButtonText = "Entendido"

            });
    }
}
