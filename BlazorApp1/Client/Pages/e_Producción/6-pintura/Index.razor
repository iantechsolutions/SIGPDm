@page "/pintura"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Pintura</h1>
<p>En esta sección se podrá gestionar pintura.</p>
<hr />

@if (oRespuesta.List != null)
{
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                Data="@oRespuesta.List" TItem="Ordentrabajo" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="100px">
                <Template Context="data">
                    <a>@($"OT{data.Codigo}")</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="80px" />
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="80px" />
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Observaciones" Title="Observaciones" Width="150px" />
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Title="" Filterable="false" Width="50px">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Ordentrabajo>> oRespuesta = new();

    protected override async Task OnInitializedAsync()
    {
        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/etapa/pintura");
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/produccion");
    }


    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task delete(int id)
    {
        await http.DeleteAsync($"/api/ot/{id}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/pintura/{id}");
    }

}