@using System.Text.Json

<EditForm Model="@notificacion" OnValidSubmit="CrearNotificacion">
    <DataAnnotationsValidator />
    <ValidationSummary />

  

    <div class="row">
        <div class="col-sm-6">
            <label>Título</label>
            <InputText class="form-control" @bind-Value="notificacion.Titulo" placeholder="Título"></InputText>
            <ValidationMessage For="(() => notificacion.Titulo)" style="color:red;" />
        </div>
        <div class="col-sm-6">
            <label>Fecha de Entrega</label>
            <InputDate class="form-control" @bind-Value="notificacion.FechaEntrega" placeholder="Fecha de Entrega"></InputDate>
            <ValidationMessage For="(() => notificacion.FechaEntrega)" style="color:red;" />
        </div>
       
    </div>

    <div class="row">
        <div class="col-sm-12">
            <label>Descripción</label>
            <InputTextArea class="form-control" @bind-Value="notificacion.Descripcion" placeholder="Descripción"></InputTextArea>
            <ValidationMessage For="(() => notificacion.Descripcion)" style="color:red;" />
        </div>
    </div>

   

    <div class="row mt-3">
        <div class="col-sm-6">
            <button type="submit" class="btn btn-primary">Crear Notificación</button>
        </div>
        <div class="col-sm-6">
            <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [CascadingParameter] BlazoredModalInstance? ModalInstance { get; set; }

    [Parameter] public string Etapa { get; set; }

    Notificaciones? notificacion = new Notificaciones();



    string etapas = "Despacho, Armado";



    List<string> rolesDisponibles = new List<string>
    {
        "Oficina tecnica", "CC", "Punzonado", "Plegado", "CPL", "Soldadura",
        "Pulido", "CPU", "Pintura", "CP", "Armado", "CA", "Despacho"
    };


    protected override async Task OnInitializedAsync()
    {

        notificacion.FechaEntrega = DateTime.Now;
        Console.WriteLine(Etapa);

    }


    public async Task CrearNotificacion()
    {
        Console.WriteLine(etapas);

        notificacion.RolesAfectados = etapas;
        notificacion.UsuariosQueAfecta = etapas;
        notificacion.FechaCreacion = DateTime.Now;
        await http.PostAsJsonAsync<Notificaciones>("/api/notificaciones", notificacion);
        await ModalInstance!.CloseAsync(ModalResult.Ok(notificacion));
    }

    public async Task Cancelar()
    {
        await ModalInstance!.CancelAsync();
    }
}


@* <div class="col-sm-6">
    <label>Roles Afectados</label>
    <InputSelect class="form-control" @bind-Value="selectedRoles" Multiple="true">
        @foreach (var role in rolesDisponibles)
        {
            <option value="@role">@role</option>
        }
    </InputSelect>
    <ValidationMessage For="(() => notificacion.RolesAfectados)" style="color:red;" />
</div> *@
@* 
<div class="row">
      <div class="col-sm-6">
    <label>Roles Afectados</label>
    <InputText class="form-control" @bind-Value="notificacion.RolesAfectados" placeholder="Roles Afectados"></InputText>
    <ValidationMessage For="(() => notificacion.RolesAfectados)" style="color:red;" />
    </div> 

     <div class="col-sm-6">
    <label>Usuarios Que Afecta</label>
    <InputText class="form-control" @bind-Value="notificacion.UsuariosQueAfecta" placeholder="Usuarios Que Afecta"></InputText>
    <ValidationMessage For="(() => notificacion.UsuariosQueAfecta)" style="color:red;" />
    </div> 
</div> *@