<div class="card">
    <div class="card-body">
        @if (oRtaPersonal.List != null && oRtaPersonal.List.Count > 0)
        {
        <EditForm Model="@oRtaPersonal" OnValidSubmit="Guardar">
        <div class="col-sm-6">
            <label>Operario</label>
            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(oRtaPersonal.List) Style="width: 100%" AllowColumnResize="true" @bind-Value="operario"
                                    TextProperty="Id" AllowFilteringByAllStringColumns="true">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombre/s" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
                </Columns>
            </RadzenDropDownDataGrid>

            <br />
            <br />

                 <Columns>
                        <RadzenDatePicker @bind-Value="falla.fecha" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:25vh;content: 'query_builder';" />
                 </Columns>
            <br />
            <br />

                    <label class="col-sm">Observaciones</label>
                    <InputText @bind-Value="@falla.observacion" class="form-control" placeholder="Observaciones"></InputText>
                    <ValidationMessage For="(()=> falla.observacion)" style="color:red;" />

            <br />
            <br />
                    <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Guardar" type="submit" />
                    <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>


        </div>
        </EditForm>
    }
    else
    {
        <p> No hay personal para mostrar</p>
    }

    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }


    Respuesta<List<PersonalDTO>> oRtaPersonal = new();
    Ordentrabajo oTrabajo = new();

    Fallas falla = new();
    string? descripcion;
    PersonalDTO? operario;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta;

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;





    }
    public async Task Guardar()
    {
        falla.empleado = operario.Id;
        if (string.IsNullOrEmpty(falla.empleado.ToString()))
        {
            await alertaError("un empleado valid0");
        }
        else if (string.IsNullOrEmpty(falla.observacion.ToString()))
        {
            await alertaError("una observación valida");
        }
        else if (string.IsNullOrEmpty(falla.fecha.ToString()))
        {
            await alertaError("una fecha valida");
        }
        else
        {
           


            falla.etapa = oTrabajo.Estado;
            falla.OT = oTrabajo.Id;
            falla.empleado = operario.Id;

            await http.PostAsJsonAsync<Fallas>("/api/fallas", falla);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante}",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}
