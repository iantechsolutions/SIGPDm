<div class="card">
    <div class="card-body">
        @if (oRtaPersonal.List != null && oRtaPersonal.List.Count > 0)
        {
        <EditForm Model="@oRtaPersonal" OnValidSubmit="Guardar">
        <div class="col-sm-6">
            <label>Operario</label>
            <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                    Data=@(oRtaPersonal.List) Style="width: 100%" AllowColumnResize="true" @bind-Value="operario"
                                    TextProperty="Id" AllowFilteringByAllStringColumns="true">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombre/s" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
                </Columns>

            </RadzenDropDownDataGrid>

                    <label class="col-sm">Observaciones</label>
                    <InputText @bind-Value="@descripcion" class="form-control" placeholder="Observaciones"></InputText>
                    <ValidationMessage For="(()=> descripcion)" style="color:red;" />

                    <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Guardar" type="submit" />
                    <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>


        </div>
        </EditForm>
    }
    else
    {
        <p> No hay personal para mostrar</p>
    }

    </div>
</div>

@code {
    [Parameter] public int id { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }


    Respuesta<List<PersonalDTO>> oRtaPersonal = new();
    Ordentrabajo oTrabajo = new();

    Fallas falla = new();
    string? descripcion;
    PersonalDTO? operario;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta;

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

        



    }
    public async Task Guardar()
    {
        try
        {
        var fall  = await http.GetFromJsonAsync<Fallas>($"/api/fallas/ot/{id}");
         
        
            // fall.etapa = oTrabajo.Estado;
            // fall.fecha = DateTime.Now;
            // fall.empleado = operario.Id;
            // fall.OT = oTrabajo.Id;
            // fall.observacion = descripcion;

            // Console.WriteLine("tres");
            // await http.PutAsJsonAsync<Fallas>("/api/fallas", fall);
            // await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        catch
        {
            Console.WriteLine("tre2222s");


            falla.etapa = oTrabajo.Estado;
            falla.fecha = DateTime.Now;
            falla.empleado = operario.Id;
            falla.OT = oTrabajo.Id;
            falla.observacion = descripcion;

            await http.PostAsJsonAsync<Fallas>("/api/fallas", falla);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}
