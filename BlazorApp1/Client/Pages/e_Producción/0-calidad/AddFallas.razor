<div>
    
        @if (oRtaPersonal.List != null && oRtaPersonal.List.Count > 0)
        {
        <EditForm Model="@oRtaPersonal" OnValidSubmit="Guardar">
         <div class="row">
                <div class="col">
                    <label>Operario</label>
                    <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                                            Data=@(oRtaPersonal.List) Style="width: 100%" AllowColumnResize="true" @bind-Value="operario"
                                            TextProperty="Id" AllowFilteringByAllStringColumns="true">
                        <Columns>
                            <RadzenDropDownDataGridColumn Property="Legajo" Title="Legajo" Width="100px" />
                            <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombre/s" Width="100px" />
                            <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="100px" />
                        </Columns>

                    </RadzenDropDownDataGrid>
                    </div>
                <div class="col">
                    <label>Fecha</label>
                    <br />        
                    <RadzenDatePicker TValue="DateTime?" @bind-Value="@falla.fecha" DateFormat="dd/MM/yyyy" Class="w-75" />
                    </div>
               </div>
               <br />

            <div class="col">

                <div class="row" style="margin-top: 15px;">

                   
                        <label class="col-sm">Observaciones</label>
                        <InputText @bind-Value="@falla.observacion" class="form-control" placeholder="Observaciones"></InputText>
                        <ValidationMessage For="(()=> falla.observacion)" style="color:red;" />
                   </div>
                <div class="row" style="margin-top: 15px;">


                        <label class="col-sm">Correccion</label>
                        <InputText @bind-Value="@falla.correccion" class="form-control" placeholder="correccion"></InputText>
                        <ValidationMessage For="(()=> falla.correccion)" style="color:red;" />
                    </div>
                </div>
        <div>

                    <br />
                    <br />
                <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Guardar" type="submit" /> &nbsp;
                <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button> &nbsp;
        </div>
        </EditForm>
    }
    else
    {
        <p> No hay personal para mostrar</p>
    }



</div>

@code {
    [Parameter] public int id { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }


    Respuesta<List<PersonalDTO>> oRtaPersonal = new();
    Ordentrabajo? oTrabajo = new();

    Fallas falla = new();
    PersonalDTO? operario;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        falla.fecha = DateTime.Now;
        var rta = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal");
        oRtaPersonal = rta;

        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;

    }
    public async Task Guardar()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se falla se guardara en el sistema",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Aprobar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            falla.etapa = oTrabajo.Estado;
            falla.empleado = operario.Id;
            falla.OT = oTrabajo.Id;
            falla.codigo = oTrabajo.Codigo;
            await http.PostAsJsonAsync<Fallas>("/api/fallas", falla);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));

        }
        else
        {

        }
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}
