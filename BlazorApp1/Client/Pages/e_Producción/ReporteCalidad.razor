@page "/certificadocalidad/{id:int}"
@inject IJSRuntime _js

<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        .sidebar {
            display: none !important;
        }

        .style1 {
            -webkit-print-color-adjust: exact;
        }
    }
</style>

@if (oTrabajo.Cliente != null)
{

    <div class="no-print">
        <br />
        <button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
        <br class="no-print" />
        <br class="no-print" />
        <div class="row no-print">
            <div class="col-9">
                <h2 style="display:inline" class="no-print">Reporte de calidad orden @($"OT-{oTrabajo.Codigo}")</h2>
                <button style="outline:none; float: right;height:100%;" class="no-print btn btn-outline" @onclick="() => Print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
            </div>
        </div>
        <hr />
    </div>


    <div class="row">
        <div class="col-6">
            <img src="images/logo.png" />
        </div>
        <div class="col-6">
            <br />
            <br />
            <br />
            <h4>REPORTE DE CALIDAD</h4>
        </div>

    </div>
    <div class="row">
        <div class="col-6">
            <h6>
                <em><strong>CLIENTE:</strong></em> <span>@oTrabajo.Cliente</span>
            </h6>
        </div>
        <div class="col-6">
            <h6><em>Fecha de reporte:</em> <span>@DateTime.Now.ToLongDateString()</span></h6>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-6">
            <h6><em>Orden n°:</em> <span>@oTrabajo.Codigo</span></h6>
        </div>
    </div>
    <div class="row">
        <div class="col-6"> <center><strong>ETAPAS DE CONTROL</strong></center></div>
    </div>
    <br />
    <br />
    <br />
    <br />
    <div class="row">
        <div class="col-6">
            <h6><span>Control De Carpeta: </span><a>@(getLlego("CC"))</a></h6>
        </div>
        <div class="col-6">
            <h6><span>Control De Plegado: </span><a>@(getLlego("CPL"))</a></h6>
        </div>
    </div>
    <br />
    <br />
    <br />
    <div class="row">
        <div class="col-6">
            <h6><span>Control De Pulido: </span><a>@(getLlego("CPU"))</a></h6>
        </div>
        <div class="col-6">
            <h6><span>Control De Pintura: </span><a>@(getLlego("CP"))</a></h6>
        </div>
    </div>
    <br />
    <br />
    <br />  
    <div class="row">
        <h6><span>Control De Armado: </span><a>@(getLlego("CA"))</a></h6>
    </div>
    <br />
    <br />
    <br />
    <div class="row">
        <div class="col-6">
            <h6><em><span style="padding-right:250px;padding-bottom:75px;border-bottom:1px solid black" class="style1">FIRMA</span></em></h6>
        </div>
        <div class="col-6">
            <h6><em><span style="padding-right:250px;padding-bottom:75px;border-bottom:1px solid black" class="style1">ACLARACION</span></em></h6>
        </div>
    </div>
    <br />
    <br />
    <br />

}
else
{
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    List<string> Etapas = new List<string> { "Oficina tecnica", "CC", "Punzonado", "Plegado", "CPL", "Soldadura", "Pulido", "CPU", "Pintura", "CP", "Armado", "CA", "Despacho" };
    List<(bool, string, DateTime?)> listaFechas = new();
    bool pasada = true;
    List<TimesEtapa> listTimes = new();
    public void ComeBack()
    {
        nav.NavigateTo($"/ot/{id}");
    }
    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;
        if (!string.IsNullOrEmpty(oTrabajo.Fechas))
        {
            listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        }
        else
        {
            pasada = false;
        }
        foreach (var etapa in Etapas)
        {
            try
            {
                listaFechas.Add((pasada, etapa, listTimes.Where(x => x.Etapa == etapa).First().TimeEtapa));
            }
            catch
            {
                listaFechas.Add((pasada, etapa, null));
            }
            if (etapa == oTrabajo.Estado)
            {
                pasada = false;
            }
        }
    }
    public string getLlego(string etapa)
    {
        var oData = listaFechas.Where(x => x.Item2 == etapa).First();
        string outp = "";
        if (oData.Item1)
        {
            outp = $"Aprobado el {oData.Item3.ToString()}";
        }
        else
        {
            outp = "No aprobado aun";
        }
        return outp;
    }
    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}
