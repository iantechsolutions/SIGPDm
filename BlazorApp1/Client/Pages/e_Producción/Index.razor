@page "/produccion"
@inject NavigationManager Nav
@inject IJSRuntime _js

<style>
    .rz-cell-data,
    .rz-column-title-content {
        font-size: 11px !important;
    }

</style>

<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />



<RadzenBreadCrumb>
    <Template Context="item">
        <RadzenBadge class="btn" Text="@item.Text" IsPill="true" />
    </Template>
    <ChildContent>
        <RadzenBreadCrumbItem Text="Oficina técnica" @onclick="@(()=>nav.NavigateTo("/ot"))" />
        <RadzenBreadCrumbItem Text="Punzonado" @onclick="@(()=>nav.NavigateTo("/punzonado"))" />
        <RadzenBreadCrumbItem Text="Plegado" @onclick="@(()=>nav.NavigateTo("/Plegado"))" />
        <RadzenBreadCrumbItem Text="Soldadura" @onclick="@(()=>nav.NavigateTo("/Soldadura"))" />
        <RadzenBreadCrumbItem Text="Pulido" @onclick="@(()=>nav.NavigateTo("/Pulido"))" />
        <RadzenBreadCrumbItem Text="Pintura" @onclick="@(()=>nav.NavigateTo("/Pintura"))" />
        <RadzenBreadCrumbItem Text="Armado" @onclick="@(()=>nav.NavigateTo("/Armado"))" />
        <RadzenBreadCrumbItem Text="Despacho" @onclick="@(()=>nav.NavigateTo("/Despacho"))" />
        <RadzenBreadCrumbItem Text="Calidad" @onclick="@(()=>nav.NavigateTo("/calidad"))" />
    </ChildContent>
</RadzenBreadCrumb>
<br />
<div class="row">
    <div class="col-6">
        <h1>Panel de control producción</h1>
    </div>
    <div class="col-1">
        <button class="btn" @onclick="gotoreporte"><FeatherFileText Color="Black"></FeatherFileText></button>
    </div>
    <div class="col-1">
        <button class="btn" @onclick="gotoseguimiento"><FeatherClipboard Color="Black"></FeatherClipboard></button>
    </div>

</div>
<p>En esta sección se podrá mantener un control sobre las distintas etapas que vaya pasando un producto.</p>



<RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Server" Change="@onChange">
    <Tabs>
        <RadzenTabsItem Text="En curso">
            @if (oRespuestaCurso.List != null)
            {
                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

                <br />
                <br />
                <AuthorizeView Roles="Admin,USUARIOMAESTRO">
                <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="60"
                            AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid1"
                             Density="Density.Compact"   Data="@oRespuestaCurso.List" Style="font-size: 12px!important;" TItem="Ordentrabajo" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="10%">
                            <Template Context="data">
                                <a>@($"OT{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Referencia" Title="Referencia" Width="8%" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Obra" Title="Obra" Width="10%" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="10%" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Descripcion" Title="Descripcion" Width="20%">
                            <Template Context="data">
                                @try
                                {
                                    @(JsonSerializer.Deserialize<List<string>>(data.Descripcion).FirstOrDefault())
                                }
                                catch
                                {
                                    
                                }
                            </Template>
                        </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="UltimaEtapa" Title="Ultimo movimiento" Width="10%">
                                <Template Context="data">
                                    @if (data.UltimaEtapa.HasValue)
                                    {
                                        <p>@data.UltimaEtapa.Value.ToString("dd/MM/yyyy")</p>
                                    }
                                    else
                                    {
                                            @* <p>@DeserialiceFechas(data)</p> *@
                                        <p>-</p>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Fechaentrega" Title="Fecha de entrega" Width="10%" >
                            <Template Context="data">
                                @if (data.Fechaentrega.HasValue)
                                {
                                    <p>@data.Fechaentrega.Value.ToString("dd/MM/yyyy")</p>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="10%" />
                       @*  <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                            <Template Context="data">
                                <button class="btn" title="Duplicar" @onclick="() => alertaDuplicar(data.Id)"><FeatherCopy Color="green" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                            <Template Context="data">
                                <button class="btn" title="Cancelar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                            <Template Context="data">
                                <button class="btn" title="Reubicar" @onclick="() => relocate(data)"><FeatherSkipForward Color="black" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                </AuthorizeView>
                <AuthorizeView Roles="Soldadura,Punzonado,Plegado,Armado,Produccion,OficinaTecnica, ControlCalidad">
                    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="60"
                                    AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid1"
                                    Density="Density.Compact" Data="@oRespuestaCurso.List" Style="font-size: 12px!important;" TItem="Ordentrabajo" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                        <Columns>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="10%">
                                <Template Context="data">
                                    <a>@($"OT{data.Codigo}")</a>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Referencia" Title="Referencia" Width="8%" />
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Obra" Title="Obra" Width="10%" />
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="10%" />
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Descripcion" Title="Descripcion" Width="20%">
                                <Template Context="data">
                                    @try
                                    {
                                        @(JsonSerializer.Deserialize<List<string>>(data.Descripcion).FirstOrDefault())
                                    }
                                    catch
                                    {

                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Fechaentrega" Title="Fecha de entrega" Width="10%">
                                <Template Context="data">
                                    @if (data.Fechaentrega.HasValue)
                                    {
                                        <p>@data.Fechaentrega.Value.ToString("dd/MM/yyyy")</p>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="10%" />
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                                <Template Context="data">
                                    <button class="btn" title="Cancelar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" Size="16" /></button>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                                <Template Context="data">
                                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" Size="16" /></button>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                                <Template Context="data">
                                    <button class="btn" title="Reubicar" @onclick="() => relocate(data)"><FeatherSkipForward Color="black" Size="16" /></button>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </AuthorizeView>
            }
            else
            {
                <br />
                <center>
                    <div class="mb-2">
                        <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
                    </div>
                </center>
            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="Finalizados">
            @if (oRespuestaFinalizados.List != null)
            {
                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

                <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                            AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid2"
                            Data="@oRespuestaFinalizados.List" TItem="Ordentrabajo" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="55px">
                            <Template Context="data">
                                <a>@($"OT{data.Codigo}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="80px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Obra" Title="Obra" Width="130px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Referencia" Title="Referencia" Width="50px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="45px" />
                        @*<RadzenDataGridColumn TItem="Ordentrabajo" Property="Fechas" Title="Horario" Width="80px">
                    <Template Context="data">
                    <a>
                    @(async () => await getPrimerHorario(data.Id , data.esta))
                    </a>
                    </Template>
                    </RadzenDataGridColumn>*@
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cantidad" Title="Cantidad" Width="45px" />
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="5%">
                            <Template Context="data">
                                <button class="btn" title="Duplicar" @onclick="() => alertaDuplicar(data.Id)"><FeatherCopy Color="green" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="4%">
                            <Template Context="data">
                                <button class="btn" title="Cancelar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Width="4%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" Size="16" /></button>
                            </Template>
                        </RadzenDataGridColumn>


                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <br />
                <center>
                    <div class="mb-2">
                        <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
                    </div>
                </center>
            }
        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>



@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Ordentrabajo>> oRespuesta = new();
    Respuesta<List<Ordentrabajo>> oRespuestaFinalizados = new();
    Respuesta<List<Ordentrabajo>> oRespuestaCurso = new();
    RadzenDataGrid<Ordentrabajo>? grid1;
    RadzenDataGrid<Ordentrabajo>? grid2;
    bool allowFiltering = false;
    List<(int, DateTime?)> listaIdPrimerTiempo = new();
    int selectedIndex = 0;

    public DateTime? primerTiempo(Ordentrabajo ot)
    {
        var horario = listaIdPrimerTiempo.Where(x => x.Item1 == ot.Id).ToList().First().Item2;
        return horario;
    }

    protected override async Task OnInitializedAsync()
    {
        var context = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var role= context.User.Claims.First(c => c.Type == System.Security.Claims.ClaimTypes.Role).Value.ToUpper();
        switch(role){
            case "PUNZONADO":
                Nav.NavigateTo("/Punzonado");
                break;
            case "SOLDADURA":
                Nav.NavigateTo("/Soldadura");
                break;
            case "PLEGADO":
                Nav.NavigateTo("/Plegado");
                break;
            case "ARMADO":
                Nav.NavigateTo("/Armado");
                break;
        }
        getInfo(0);
    }

    async Task getInfo(int index)
    {
        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");
        if (index == 0)
        {
            oRespuestaCurso = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/curso");
            //foreach (var ot in oRespuestaCurso.List)
            //{
            //    var a = await http.GetFromJsonAsync<DateTime?>($"/api/EventosProduccion/GetPrimerInicio?ot={ot.Id}&etapa={ot.Estado}");
            //    (int, DateTime?) b = (ot.Id, a);
            //    listaIdPrimerTiempo.Add(b);
            //}
            StateHasChanged();
        }
        else if (index==1)
        {
            oRespuestaFinalizados = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/finalizados");
            //foreach (var ot in oRespuestaFinalizados.List)
            //{
            //    var a = await http.GetFromJsonAsync<DateTime?>($"/api/EventosProduccion/GetPrimerInicio?ot={ot.Id}&etapa={ot.Estado}");
            //    (int, DateTime?) b = (ot.Id, a);
            //    listaIdPrimerTiempo.Add(b);
            //}
            StateHasChanged();
        }
        grid1.Reload();
        grid2.Reload();

    }

    async Task onChange(int index)
    {
        await getInfo(index);
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/");
    }

    public void gotoreporte()
    {
        nav.NavigateTo("/reporteproduccion");

    }

    public void gotoseguimiento()
    {
        nav.NavigateTo("/reporteseguimiento");

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se cancelara esta orden",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public async Task alertaDuplicar(int id)
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se duplicara la orden, y se descontaran los materiales de vuelta",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Duplicar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await alertaCodigo(id);
            await OnInitializedAsync();
            StateHasChanged();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task alertaCodigo(int id)
    {
        var parameters = new ModalParameters();


        parameters.Add(nameof(DuplicarCotizacion.id), id);


        var options = new ModalOptions()
            {
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<DuplicarCotizacion>("Duplicar orden", parameters, options);
        var result = await formModal.Result;

        if (result.Confirmed)
        {
            await OnInitializedAsync();
        }
    }

    //public async Task alertaRelocate(Ordentrabajo ot)
    //{
    //    string OficinaTecnica = "";
    //    string Punzonado = "";
    //    string Plegado = "";
    //    string Soldadura = "";
    //    string Pulido = "";
    //    string Pintura = "";
    //    string Armado = "";
    //    string Despacho = "";
    //    await Swal.FireAsync(new SweetAlertOptions
    //        {
    //            Title = "¿Está seguro?",
    //            Text = "Se finalizara la orden",
    //            Input = "select",
    //            InputOptions = {
    //                { "OficinaTecnica", "Oficina Tecnica" },
    //                { "Punzonado", "Punzonado" },
    //                { "Plegado", "Plegado" },
    //                { "Soldadura", "Soldadura" },
    //                { "Pulido", "Pulido" },
    //                { "Pintura", "Pintura" },
    //                { "Armado", "Armado" },
    //                { "Despacho", "Despacho" }
    //            },
    //            InputPlaceholder = "Seleccione una etapa",
    //            InputValidator = new InputValidatorCallback((string input) => input.Length == 0 ? "Debe seleccionar una etapa" : null, this),
    //            Icon = SweetAlertIcon.Warning,
    //            ShowCancelButton = true,
    //            ConfirmButtonText = "Eliminar",
    //            CancelButtonText = "Cancelar"
    //        }).ContinueWith(swalTask =>
    //{
    //    SweetAlertResult result = swalTask.Result;
    //    if (!string.IsNullOrEmpty(result.Value))
    //    {
    //        Console.Write(12908412803);
    //        var temp = result.Value;
    //        relocate(ot);
    //    }
    //    else if (result.Dismiss == DismissReason.Cancel)
    //    {

    //    }
    //});
    //}

    //async Task alertaRelocate(string mensaje)
    //{
    //    await JS.MostrarMensaje<object>("Swal.fire", mensaje);
    //    var coso = "casa";
    //}


    private async Task<string?> alertaRelocate()
        => await _js.InvokeAsync<string?>("DropdownConfirm", "Reubicar orden de trabajo", "Selecciona una etapa", "question");


    async Task relocate(Ordentrabajo ot)
    {
        MovimientosOT movimiento = new();
        movimiento.EtapaOrigen = ot.Estado;
        // ot.UltimaEtapa = json.encode(ot.Fechas);

        var eleccion = await alertaRelocate();
        if (eleccion!=null){
            if (eleccion=="Oficina Tecnica")
            {
                eleccion = "Oficina tecnica";
            }

            ot.UltimaEtapa = DateTime.Now;
            ot.Estado = eleccion;
            movimiento.EtapaDestino = eleccion;
            movimiento.Fecha = DateTime.Now;
            movimiento.OT = ot.Id;
            await http.PostAsJsonAsync<MovimientosOT>("/api/movimientosot", movimiento); ;
            await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", ot);
            await OnInitializedAsync();
            await Swal.FireAsync("Proceso completado", "Orden de trabajo reubicada", "success");
            StateHasChanged();
        }
    }


    async Task delete(int id)
    {
        var ot = oRespuesta.List.Where(x => x.Id == id).FirstOrDefault();
        ot.Estado = "Cancelado";
        await http.PutAsJsonAsync<Ordentrabajo>($"/api/ot", ot);
        await OnInitializedAsync();
        StateHasChanged();
    }

    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/ot/{id}");
    }


    public string? DeserialiceFechas(Ordentrabajo data)
    {

        if(data.Fechas != null){

            var lastFechas = JsonSerializer.Deserialize<List<TimesEtapa>>(data.Fechas).LastOrDefault().TimeEtapa;
            Console.WriteLine(lastFechas);
            return lastFechas.ToString();
        }
        else{
            return "-";
        }
    }
}