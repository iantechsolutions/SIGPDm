@using System.Text.RegularExpressions
@page "/reporteproduccion"
@inject IJSRuntime _js

<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        .sidebar {
            display: none !important;
        }

        .style1 {
            
            -webkit-print-color-adjust: exact;
        }
    }
</style>

<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1 style="display:inline">Reporte de producción</h1>
@if (oRespuesta.List != null){
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => Print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
}
<p>Lista de trabajos en curso detallando etapas y fechas</p>
<hr />


@if (oRespuesta.List != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />
    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@oRespuesta.List" TItem="Ordentrabajo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="50px">
                <Template Context="data">
                    <a>@($"OT{data.Codigo}")</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Of. Tecnica" Width="70px">
                <Template Context="data">
                    @(GetDate(fechas, data.Codigo, "Oficina tecnica"))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Punzonado" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas,data.Codigo,"Punzonado"))</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Plegado" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas, data.Codigo, "Plegado"))</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Soldado" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas, data.Codigo, "Soldadura"))</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Pulido" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas, data.Codigo, "Pulido"))</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Pintura" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas, data.Codigo, "Pintura"))</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Armado" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas, data.Codigo, "Armado"))</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Despacho" Width="70px">
                <Template Context="data">
                    <a>@(GetDate(fechas, data.Codigo, "Despacho"))</a>
                </Template>
            </RadzenDataGridColumn>
            
        </Columns>
    </RadzenDataGrid>
    <br/>
    <p><FeatherX Color="red" />   Etapa Completada</p>
    <p><FeatherMinus Color="#9c9c02" />   Etapa Salteada</p>
    <p><FeatherClock Color="blue" />   Etapa en progreso o aguardando aprobacion</p>


}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    bool allowFiltering = false;
    Respuesta<List<Ordentrabajo>> oRespuesta = new();
    List<(string?,string?,string?)> fechas = new();
    bool primeroNoEncontrado = true;
    List<string> Etapas = new List<string> {"Oficina tecnica","CC","Punzonado","Plegado","CPL","Soldadura","Pulido","CPU","Pintura","CP","Armado","CA","Despacho"};
    protected override async Task OnInitializedAsync()
    {
        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/curso");
        foreach (var ot in oRespuesta.List)
        {
            primeroNoEncontrado = true;
            foreach (var etapa in Etapas){
                int tiempoEtapa = await http.GetFromJsonAsync<int>($"/api/EventosProduccion/getTiempoEtapa?ot={ot.Id}&etapa={etapa}");
                if (etapa == ot.Estado)
                {
                    primeroNoEncontrado = false;
                    if(etapa.StartsWith("C"))
                    {
                        var etapaCorrecta = fechas[fechas.Count - 1].Item2;
                        fechas.RemoveAt(fechas.Count - 1);
                        fechas.Add((ot.Codigo, etapaCorrecta, "Calidad"));
                    }
                    else{
                        fechas.Add((ot.Codigo, etapa, "Actual"));
                    }
                }
                if (etapa.StartsWith("C"))
                {
                }
                else if (tiempoEtapa != 0)
                {
                    fechas.Add((ot.Codigo, etapa, "Completo"));
                }
                else
                {
                    if (primeroNoEncontrado){
                        fechas.Add((ot.Codigo, etapa, "Omitido"));
                    }
                    else
                    {
                        fechas.Add((ot.Codigo, etapa, "Pendiente"));
                    }
                }

            }
        }
    }



    public void CambiarModoFiltro() 
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    public void ComeBack(){
        nav.NavigateTo("/produccion");
    }

    async Task delete(int id)
    {
        await http.DeleteAsync($"/api/ot/{id}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/ot/{id}");
    }
    public MarkupString GetDate(List<(string?, string?, string?)> fecha, string? codigo, string? etapa)
    {
        var oFecha = fecha.Where(x => x.Item1 == codigo && x.Item2 == etapa).FirstOrDefault();
        string output = $"";
        switch (oFecha.Item3)
        {
            case "Calidad":
            case "Actual":
                output = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"Blue\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-clock\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 6 12 12 16 14\"></polyline></svg>";
                break;
            case "Completo":
                output = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"red\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>";
                break;
            case "Omitido":
                output = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#9c9c02\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-minus\"><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line></svg>";
                if (oFecha.Item2 == "Of. Tecnica")
                {
                    output = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"red\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>";
                }
                break;
            case "Pendiente":
                break;
        }
        return (MarkupString)output;
    }
    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}

