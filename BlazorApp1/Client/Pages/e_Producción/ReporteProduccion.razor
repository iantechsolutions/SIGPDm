@using System.Text.RegularExpressions
@page "/reporteproduccion"
@inject IJSRuntime _js
<style>
    @@media print {
    .no-print {
        display: none !important;
    }

    .sidebar {
        display: none !important;
    }

    .style1 {
        -webkit-print-color-adjust: exact;
    }
    table {
        -webkit-print-color-adjust: exact;
    }


    table tr:nth-child(odd) {
        background-color: #f2f2f2;
        -webkit-print-color-adjust: exact;
    }

    table thead tr:nth-child(odd) {
        background-color: transparent;
        -webkit-print-color-adjust: exact;
    }

}
</style>

<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h3 style="display:inline">Reporte de producción</h3>
@if (oRespuesta.List != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => Print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
}
<p>Lista de trabajos en curso detallando etapas y fechas</p>
<hr />

@if (oRespuesta.List != null)
{
    <table style="font-size:80%;">
        <thead>

            <tr>

                <th>N° Orden</th>

                <th>Of. Técnica</th>

                <th>Punzonado</th>

                <th>Plegado</th>

                <th>Soldado</th>

                <th>Pulido</th>

                <th>Pintura</th>

                <th>Armado</th>

                <th>Despacho</th>

            </tr>

        </thead>

        <tbody>
            @foreach (var data in oRespuesta.List)
            {
                <tr>

                    <td>
                        <a>@($"OT{data.Codigo}")</a>
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Oficina tecnica"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Punzonado"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Plegado"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Soldadura"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Pulido"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Pintura"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Armado"))
                    </td>

                    <td>
                        @(GetDate(fechas, data.Codigo, "Despacho"))
                    </td>

                </tr>
            }
        </tbody>
    </table>
    <br />
    <br />
    <p><FeatherX Color="red" />   Etapa Completada</p>
    <p><FeatherClock Color="blue" />   Etapa en progreso o aguardando aprobacion</p>


}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    bool allowFiltering = false;
    Respuesta<List<Ordentrabajo>> oRespuesta = new();
    List<(string?, string?, string?)> fechas = new();
    bool primeroNoEncontrado = true;
    List<string> Etapas = new List<string> { "Oficina tecnica", "CC", "Punzonado", "Plegado", "CPL", "Soldadura", "Pulido", "CPU", "Pintura", "CP", "Armado", "CA", "Despacho" };
    protected override async Task OnInitializedAsync()
    {
        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/curso");
        foreach (var ot in oRespuesta.List)
        {
            primeroNoEncontrado = true;
            foreach (var etapa in Etapas)
            {
                if (etapa == ot.Estado)
                {
                    primeroNoEncontrado = false;
                    fechas.Add((ot.Codigo, etapa, "Actual"));
                }
                else if (primeroNoEncontrado)
                {
                    fechas.Add((ot.Codigo, etapa, "Completo"));
                }
                else
                {
                    fechas.Add((ot.Codigo, etapa, "Pendiente"));
                }

            }
        }
    }



    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    public void ComeBack()
    {
        nav.NavigateTo("/produccion");
    }

    async Task delete(int id)
    {
        await http.DeleteAsync($"/api/ot/{id}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/ot/{id}");
    }
    public MarkupString GetDate(List<(string?, string?, string?)> fecha, string? codigo, string? etapa)
    {
        var oFecha = fecha.Where(x => x.Item1 == codigo && x.Item2 == etapa).FirstOrDefault();
        string output = $"";
        switch (oFecha.Item3)
        {
            case "Calidad":
            case "Actual":
                output = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"Blue\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather  feather-clock\"><!--!--><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 6 12 12 16 14\"></polyline></svg>";
                break;
            case "Completo":
                output = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"Red\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather  feather-x\"><!--!--><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>";
                break;
          
            case "Pendiente":
                break;
        }
        return (MarkupString)output;
    }
    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}

