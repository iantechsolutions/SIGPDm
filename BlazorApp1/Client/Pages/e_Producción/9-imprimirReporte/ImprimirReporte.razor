@page "/ImprimirReporte/{etapa}"

@using System;
@using System.Drawing.Printing;
@using System.Windows;
@inject IJSRuntime _js
<style>
    @@media print {

        .no-print {
            display: none !important;
        }

        .sidebar {
            display: none !important;
        }

        .print {
            margin-top: 5px !important;
        }

        .no-border-input {
            border: none;
            box-shadow: none;
            width: 50px;
            font-size: 10px; /* Reducir el tamaño de la fuente */
        }

        .title{
            font-size: 15px;
        }
        br {
            display: none !important;
        }

        /* Reducir el tamaño de fuente de todo el contenido */
        body {
            font-size: 10px; /* Puedes ajustar este valor según necesites */
        }

        /* Reducir el tamaño de la fuente en las celdas de la grilla */
        .rz-datagrid-cell {
            font-size: 10px !important; /* Puedes ajustar este valor según necesites */
            border-left: none !important; /* Eliminar línea del lado izquierdo */
            border-right: none !important; /* Eliminar línea del lado derecho */
            border-top: 1px solid black !important; /* Mantener la línea superior */
            border-bottom: 1px solid black !important; /* Mantener la línea inferior */
        }
    }
</style>
<br />

<button class="btn btn-outline-primary no-print" @onclick="ComeBack">
    <FeatherArrowLeft Color="Blue"></FeatherArrowLeft>
</button>
<br />
<br />

<div style="display:flex; flex-direction:row; justify-content:space-between">
    <div>
        <RadzenText class="title" TextStyle="TextStyle.H5"><p style="font-weight:600">Prioridad de la etapa @etapaFiltro</p></RadzenText>

    </div>

    <button class="btn btn-outline-success no-print" @onclick="Print">Imprimir reporte</button>
</div>

<br />
<br />

@if (ordenes != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />

    <div class="impresion">

        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                        AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                        Data="@ordenesSeleccionadas" TItem="Ordentrabajo" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Ordentrabajo" Title="Prioridad" Width="10%">
                <Template Context="data">
                        <input type="number" class="form-control no-border-input" style="width: max-content;" min="1" max="@ordenesSeleccionadas.Count" value="@data.Orden" @onchange="@(e => OnOrderChanged(data, e))" />
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="30%">
                <Template Context="data">
                    <a>@($"OT {data.Codigo}")</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="30%" />
                <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="30%" />

        </Columns>
    </RadzenDataGrid>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center> 
}

@code {
    List<Ordentrabajo> ordenes = new();
    List<Ordentrabajo> ordenesSeleccionadas = new();

    bool allowFiltering = false;
    RadzenDataGrid<Ordentrabajo>? grid;

    [Parameter]
    public string etapa { get; set; }
    string? etapaFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");

        etapaFiltro = etapa switch
        {
            "ot" => "Oficina tecnica",
            "cc" => "CC",
            "punzonado" => "Punzonado",
            "plegado" => "Plegado",
            "cpl" => "CPL",
            "soldadura" => "Soldadura",
            "pulido" => "Pulido",
            "cpu" => "CPU",
            "pintura" => "Pintura",
            "cp" => "CP",
            "armado" => "Armado",
            "ca" => "CA",
            "despacho" => "Despacho",
            _ => throw new ArgumentException("Estado no soportado")
        };

        ordenes = respuesta.List.Where(x => x.Estado == etapaFiltro).ToList();
        ordenesSeleccionadas = ordenes;
        ActualizarOrdenes();

        for (int i = 0; i < ordenesSeleccionadas.Count; i++)
        {
            ordenesSeleccionadas[i].Orden = i + 1;
        }

        StateHasChanged();
    }

    public async void OnOrderChanged(Ordentrabajo ordenTrabajo, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newOrder))
        {

            if (newOrder < 1 || newOrder > ordenes.Count)
                return;


            ordenes.Remove(ordenTrabajo);

            if (newOrder > ordenes.Count)
            {
                newOrder = ordenes.Count;
            }


            ordenes.Insert(newOrder - 1, ordenTrabajo);

            for (int i = 0; i < ordenes.Count + 1; i++)
            {
                ordenes[i].Orden = i + 1;
            }
            ordenesSeleccionadas = ordenes.OrderBy(o => o.Orden).ToList();
            ActualizarOrdenes();
        }
    }

    public async void ActualizarOrdenes()
    {
        StateHasChanged();
        grid?.Reload();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
    }

    async Task goToReporte()
    {
        nav.NavigateTo($"/ImprimirReporte/{etapa}");
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    public async Task Print()
        => await _js.InvokeVoidAsync("window.print");

    public class Ordentrabajo
    {
        public string Codigo { get; set; }
        public string Cliente { get; set; }
        public string Estado { get; set; }
        public string Obra { get; set; }
        public string Referencia { get; set; }
        public int Orden { get; set; }
    }
}
