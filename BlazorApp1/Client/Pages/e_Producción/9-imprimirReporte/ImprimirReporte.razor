@page "/ImprimirReporte/{etapa}"

@using System;
@using System.Drawing.Printing;
@using System.Windows;
@inject IJSRuntime _js
<style>
    @@media print {
        .no-print {
            display: none !important;
        }
        body {
            font-size: 7px !important;
            margin: 0;
            padding: 0;
            margin-bottom: 5px;
        }
        .rz-datagrid-table {
            border-collapse: collapse !important;
        }
        .rz-datagrid-cell,
        .rz-datagrid-header-cell,
        .rz-datagrid-row {
            font-size: 6px !important;
            border: none !important;
            box-shadow: none !important;
        }

        .texto-clamp {
            display: -webkit-box;
            -webkit-line-clamp: 3; /* Limita el texto a 3 líneas */
            -webkit-box-orient: vertical;
            overflow: hidden;
            font-size: 8px !important;
            text-overflow: ellipsis; /* Añade '...' si el texto es muy largo */
        }
        .texto {
        font-size: 8px !important;}
        .sidebar {
            display: none !important;
        }
        .print {
            margin-top: 3px !important;
            overflow: hidden;
        }
        .no-border-input {
            border: none;
            box-shadow: none;
            width: 50px;
            font-size: 10px;
        }
        .title {
            margin: 0;
            padding: 0;
            font-size: 10px;
        }
        br {
            display: none !important;
        }
        * {
            -webkit-print-color-adjust: exact !important;
            color-adjust: exact !important;
            print-color-adjust: exact !important;
        }
        /* Para Firefox */
        @@moz-document url-prefix() {
            .title {
                display: none !important;
            }
        }
    }
</style>
<br />

<br />
<button class="btn btn-outline-primary no-print" @onclick="ComeBack">
    <FeatherArrowLeft Color="Blue"></FeatherArrowLeft>
</button>
<br />
<br />

<div style="display:flex; flex-direction:row; justify-content:space-between">
    <button class="btn btn-outline-success no-print" style="float: right;" @onclick="Print">Imprimir reporte</button>
</div>

<br />
<br />
@if (ordenes != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => CambiarModoFiltro()">
        <FeatherFilter Color="Black"></FeatherFilter>
    </button>
    <br />
    <br />

    <div class="impresion">
        <div>
            <RadzenText class="title" TextStyle="TextStyle.H5">
                <p style="font-weight:600">Prioridad de la etapa @etapaFiltro</p>
            </RadzenText>

            <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false"
                            FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="60" AllowPaging="true"
                            ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @ref="grid" Density="Density.Compact" Data="@ordenes" Style="font-size: 12px!important;border: none !important;
            box-shadow: none !important;"
                            TItem="Ordentrabajo" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Ordentrabajo" Title="Prioridad" Width="8%">
                        <Template Context="data">
                            <input class="form-control no-border-input" style="width: max-content;"
                                   min="1" max="@ordenes.Count" @onfocusout="()=>test(data)" value="@data.Orden"
                                   @onchange="@(e => OnOrderChanged(data, e))" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="15%">
                        <Template Context="data">
                            @if (data.Cliente != null)
                            {
                                 <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.Cliente)</p>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Ordentrabajo" Property="Obra" Title="Obra" Width="15%">
                        <Template Context="data">
                            @if (data.Obra != null)
                            {
                                <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.Obra)</p>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Ordentrabajo" Property="Titulo" Title="Titulo" Width="15%">
                        <Template Context="data">
                            @if (data.Titulo != null)
                            {
                                 <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.Titulo)</p>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    @* <RadzenDataGridColumn TItem="Ordentrabajo" Property="Descripcion" Title="Descripcion" Width="30%">
                        <Template Context="data">
                            @if (!string.IsNullOrEmpty(data.Descripcion))
                            {
                                <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">
                                   @(JsonSerializer.Deserialize<List<string>>(data.Descripcion)?.FirstOrDefault() ?? "-")
                                    </p>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </Template>
                    </RadzenDataGridColumn> *@
                    <RadzenDataGridColumn TItem="Ordentrabajo" Property="Pedidofabrica" Title="Ingreso" Width="15%">
                        <Template Context="data">
                            @if (data.Pedidofabrica.HasValue)
                            {
                                <a class="texto">@(data.Pedidofabrica.Value.ToString("dd/MM/yyyy"))</a>
                            }
                            else
                            {
                                <p>-</p>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Ordentrabajo" Property="" Title="Entrega" Width="15%">
                        <Template Context="data">
                            @if (data.Fechaentrega.HasValue)
                            {
                                <a class="texto">@(data.Fechaentrega.Value.ToString("dd/MM/yyyy"))</a>
                            }
                            else
                            {
                                <p>-</p>
                            }

                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
<br />
<br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center> 
}

@code {
    List<Ordentrabajo> ordenes = new();

    bool allowFiltering = false;
    RadzenDataGrid<Ordentrabajo>? grid;

    [Parameter]
    public string? etapa { get; set; }
    string? etapaFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot/curso");

        etapaFiltro = etapa switch
        {
            "ot" => "Oficina tecnica",
            "cc" => "CC",
            "punzonado" => "Punzonado",
            "plegado" => "Plegado",
            "cpl" => "CPL",
            "Soldadura" => "Soldadura",
            "pulido" => "Pulido",
            "cpu" => "CPU",
            "pintura" => "Pintura",
            "cp" => "CP",
            "armado" => "Armado",
            "ca" => "CA",
            "despacho" => "Despacho",
            _ => throw new ArgumentException("Estado no soportado")
        };

        ordenes = respuesta.List.Where(x => x.Estado == etapaFiltro).ToList();
        await ActualizarOrdenes();



        StateHasChanged();
    }

    public async void OnOrderChanged(Ordentrabajo ot, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newOrder))
        {
            var originalOrder = ot.Orden;

            var newOt = ordenes.Where(x => x == ot).First();

            newOt.Orden = newOrder;
            foreach (var order in ordenes)
            {
                if (order != ot)
                {
                    if (originalOrder < newOrder)
                    {
                        if (order.Orden > originalOrder && order.Orden <= newOrder)
                        {
                            order.Orden--;
                        }
                    }
                    else if (originalOrder > newOrder)
                    {
                        if (order.Orden < originalOrder && order.Orden >= newOrder)
                        {
                            order.Orden++;
                        }
                    }
                }
            }

        }
    }

    public async Task test(Ordentrabajo ot)
    {

        ordenes = ordenes.OrderBy(o => o.Orden).ToList();


    }
    public async Task ActualizarOrdenes()
    {
        for (int i = 0; i < ordenes.Count; i++)
        {
            ordenes[i].Orden = i + 1;
            Console.WriteLine("Descripcion", ordenes[i].Descripcion);
        }
        ordenes = ordenes.OrderBy(o => o.Orden).ToList();
        if (grid != null)
        {
            await grid.Reload();
        }
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo($"/{etapa}");
    }



    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    public async Task Print()
        => await _js.InvokeVoidAsync("window.print");

    public class Ordentrabajo
    {
        public string? Codigo { get; set; }
        public string? Cliente { get; set; }
        public string? Estado { get; set; }
        public string? Obra { get; set; }
        public string? Titulo { get; set; }

        public string? Referencia { get; set; }
        public string? Descripcion { get; set; }
        public DateTime? Fechaentrega { get; set; }
        public DateTime? Pedidofabrica { get; set; }


        public int? Orden { get; set; }
        public DateTime? Fechaaplazada { get; set; }

    }
}
