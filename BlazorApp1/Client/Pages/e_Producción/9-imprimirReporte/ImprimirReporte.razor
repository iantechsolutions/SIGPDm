@page "/ImprimirReporte/{etapa}"

@using System;
@using System.Drawing.Printing;
@using System.Windows;
@inject IJSRuntime _js
<style>
    @@media print {

        .no-print {
            display: none !important;
        }

        body {
            font-size: 10px !important; /* Ajusta el tamaño de la fuente para el cuerpo del documento */
        }

        .rz-datagrid-cell {
            font-size: 4px !important; /* Ajusta el tamaño de la fuente para las celdas de la grilla */
            border: none !important; /* Elimina los bordes de las celdas */
        }

        .sidebar {
            display: none !important; /* Oculta la barra lateral */
        }

        .print {
            margin-top: 5px !important; /* Ajusta el margen para elementos con la clase "print" */
        }

        .no-border-input {
            border: none;
            box-shadow: none;
            width: 50px;
            font-size: 10px; /* Ajusta el tamaño de la fuente de los inputs sin borde */
        }

        .title {
            font-size: 15px; /* Ajusta el tamaño de la fuente para los títulos */
        }

        br {
            display: none !important; /* Oculta los saltos de línea */
        }

        .print-grid {
            font-size: 6px !important; /* Ajusta el tamaño de la fuente para toda la grilla */
        }

            .print-grid .rz-datagrid-cell,
            .print-grid .rz-datagrid-header-cell,
            .print-grid .rz-datagrid-row {
                font-size: 6px !important; /* Ajusta el tamaño de la fuente en celdas, encabezados y filas */
                border: none !important; /* Elimina los bordes */
            }
    }
</style>
<br />

<button class="btn btn-outline-primary no-print" @onclick="ComeBack">
    <FeatherArrowLeft Color="Blue"></FeatherArrowLeft>
</button>
<br />
<br />

<div style="display:flex; flex-direction:row; justify-content:space-between">
    <div>
        <RadzenText class="title" TextStyle="TextStyle.H5"><p style="font-weight:600">Prioridad de la etapa @etapaFiltro</p></RadzenText>

    </div>

    <button class="btn btn-outline-success no-print" @onclick="Print">Imprimir reporte</button>
</div>

<br />
<br />

@if (ordenes != null)
{
    <button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
    <br />
    <br />

    <div class="impresion">

        <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="60"
                        AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @ref="grid"
                        Density="Density.Compact" Data="@ordenes" Style="font-size: 12px!important;" TItem="Ordentrabajo" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
                <RadzenDataGridColumn TItem="Ordentrabajo" Title="Prioridad" Width="10%">
                <Template Context="data">
                        <input type="number" class="form-control no-border-input" style="width: max-content;" min="1" max="@ordenes.Count" @onfocusout="()=>test(data) " value="@data.Orden" @onchange="@(e => OnOrderChanged(data, e))" />
                </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Ordentrabajo" Property="Codigo" Title="N° Orden" Width="30%">
                <Template Context="data">
                    <a>@($"OT {data.Codigo}")</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Ordentrabajo" Property="Cliente" Title="Cliente" Width="30%" />
                <RadzenDataGridColumn TItem="Ordentrabajo" Property="Estado" Title="Estado" Width="30%" />

        </Columns>
    </RadzenDataGrid>
    </div>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center> 
}

@code {
    List<Ordentrabajo> ordenes = new();

    bool allowFiltering = false;
    RadzenDataGrid<Ordentrabajo>? grid;

    [Parameter]
    public string etapa { get; set; }
    string? etapaFiltro = "";

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Ordentrabajo>>>("/api/ot");

        etapaFiltro = etapa switch
        {
            "ot" => "Oficina tecnica",
            "cc" => "CC",
            "punzonado" => "Punzonado",
            "plegado" => "Plegado",
            "cpl" => "CPL",
            "soldadura" => "Soldadura",
            "pulido" => "Pulido",
            "cpu" => "CPU",
            "pintura" => "Pintura",
            "cp" => "CP",
            "armado" => "Armado",
            "ca" => "CA",
            "despacho" => "Despacho",
            _ => throw new ArgumentException("Estado no soportado")
        };

        ordenes = respuesta.List.Where(x => x.Estado == etapaFiltro).ToList();
        await ActualizarOrdenes();



        StateHasChanged();
    }

    public async void OnOrderChanged(Ordentrabajo ot, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newOrder))
        {
            var originalOrder = ot.Orden;

            var newOt = ordenes.Where(x => x == ot).First();

            newOt.Orden = newOrder;
            foreach (var order in ordenes)
            {
                if (order != ot)
                {
                    if (originalOrder < newOrder)
                    {
                        if (order.Orden > originalOrder && order.Orden <= newOrder)
                        {
                            order.Orden--;
                        }
                    }
                    else if (originalOrder > newOrder)
                    {
                        if (order.Orden < originalOrder && order.Orden >= newOrder)
                        {
                            order.Orden++;
                        }
                    }
                }
            }
            // if (newOrder < 1 || newOrder > ordenes.Count)
            //     return;


            // ordenes.Remove(ordenTrabajo);

            // if (newOrder > ordenes.Count)
            // {
            //     newOrder = ordenes.Count;
            // }


            // ordenes.Insert(newOrder - 1, ordenTrabajo);

            // for (int i = 0; i < ordenes.Count + 1; i++)
            // {
            //     ordenes[i].Orden = i + 1;
            // }
            // await ActualizarOrdenes();
        }
    }

    public async Task test(Ordentrabajo ot)
    {

      ordenes = ordenes.OrderBy(o => o.Orden).ToList();

        
    }
    public async Task ActualizarOrdenes()
    {
        for (int i = 0; i < ordenes.Count; i++)
        {
            ordenes[i].Orden = i + 1;
        }
        ordenes = ordenes.OrderBy(o => o.Orden).ToList();
        if (grid != null)
        {
            await grid.Reload();
        }
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/ot");
    }

    async Task goToReporte()
    {
        nav.NavigateTo($"/ImprimirReporte/{etapa}");
    }

    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    public async Task Print()
        => await _js.InvokeVoidAsync("window.print");

    public class Ordentrabajo
    {
        public string Codigo { get; set; }
        public string Cliente { get; set; }
        public string Estado { get; set; }
        public string Obra { get; set; }
        public string Referencia { get; set; }
        public int Orden { get; set; }
    }
}
