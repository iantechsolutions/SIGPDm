<RadzenText TextStyle="TextStyle.H6"> Ingrese el codigo de la nueva orden</RadzenText>
<div class="card">
    <div class="card-body">
        <div class="row">
            <br />
            <div class="col-sm-6">
                <label>Codigo: </label>
                <input type="text" class="form-control" @bind="@Codigo"></input>
            </div>
        </div>
        <br />
        <button type="button" @onclick="accept" style=" float: right;" class="btn btn-primary mr-2">Aceptar</button>
        <button type="button" @onclick="cancel" style=" float: right;" class="btn btn-light">Cancelar</button>
    </div>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter] public int id { get; set; }
    public string? Codigo;

    async Task accept()
    {
        if (string.IsNullOrEmpty(Codigo))
        {
            await alertaError();
        }
        else{
            var otNueva = new Ordentrabajo();
            var oRta = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
            var ot = oRta.List;
            ot.Codigo = Codigo;
            ot.Id = otNueva.Id;
            if(!(string.IsNullOrEmpty(ot.Insumosusados))){
                var insumosUsados = JsonSerializer.Deserialize<List<InsumosUsados>>(ot.Insumosusados);
                foreach(var insumo in insumosUsados)
                {
                    var lote = await http.GetFromJsonAsync<Respuesta<Lote>>($"/api/Lotes/{insumo.lote}");
                    if (lote.List.Cantidad >= insumo.cantidad)
                    {

                    }
                    else
                    {
                        await alertaCantidad();
                        break;
                    }
                }
                foreach (var insumo in insumosUsados)
                {
                    var lote = await http.GetFromJsonAsync<Respuesta<Lote>>($"/api/Lotes/{insumo.lote}");
                    lote.List.Cantidad -= insumo.cantidad;
                    await http.PutAsJsonAsync<Lote>("/api/Lotes", lote.List);
                    if(insumo.insumo.Tipo!="Lote unico")
                    {
                        var ins = insumo.insumo;
                        ins.StockReal -= insumo.cantidad;
                        await http.PutAsJsonAsync<InsumoDTO>("/api/insumo", ins);
                    }
                }

                await http.PostAsJsonAsync<Ordentrabajo>("/api/ot", ot);
                await BlazoredModal.CloseAsync(ModalResult.Ok(Codigo));
            }
            else
            {
                await http.PostAsJsonAsync<Ordentrabajo>("/api/ot", ot);
                await BlazoredModal.CloseAsync(ModalResult.Ok(Codigo));

            }
        }
    }
    async Task cancel()
    {
        await BlazoredModal.CloseAsync(ModalResult.Cancel());

    }
    public async Task alertaError()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No ingresó un codigo válido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }

    public async Task alertaCantidad()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No cuenta con suficientes insumos",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }

}
