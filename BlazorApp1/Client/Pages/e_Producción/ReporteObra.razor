@page "/reporteobra/{id:int}"
@inject IJSRuntime _js
<style>

    @@media print {
        .no-print {
            display: none !important;
        }

        .sidebar {
            display: none !important;
        }
    }
    .text-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        line-height: 1.5;
    }
    style1{
        font-size:13px;
    }

    /* Styles for the table */
    table {
        width:100%;
        border-collapse: collapse; /* Ensures borders don't double up */
    }

    .tablaReporte{
        font-size:80%;
    }

</style>

<br class="no-print"/>
<button class="btn btn-outline-primary no-print" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline no-print" @onclick="() => Print()"><FeatherPrinter Color="Black"></FeatherPrinter></button>
<br class="no-print"/>
<br class="no-print"/>
<h3 class="no-print">Reporte correspondiente a la obra OT @id</h3>
<hr class="no-print"/>
@if(ot!=null && eventos!=null){
    <div class="text-row">
        <div class="col-4"/>
        <div class="col-6">
            <img src="images/logo.png" />
        </div>
        <div class="col-2" />
    </div>
    <div class="row">
        <div class="col-6">
            <h6>
                <em><strong class="style1">Cliente:</strong></em> <span class="style1">@ot.Cliente</span>
            </h6>
        </div>
        <div class="col-6">
            <h6>
                <em><strong class="style1">Cantidad:</strong></em> <span class="style1">&nbsp;@ot.Cantidad</span>
            </h6>
        </div>
    </div>

    <div class="row">
        <div class="col-6">
            <h6><em><strong class="style1">Fecha:</strong></em> <span class="style1">@DateTime.Now.ToString("dd-MM-yyyy")</span></h6>
        </div>
        <div class="col-6">
            <h6><em><strong class="style1">Fecha de entrega:</strong></em> <span class="style1">@(ot.Fechaaplazada.HasValue ? ot.Fechaaplazada.Value.ToString("dd-MM-yyyy") : ot.Fechaentrega.Value.ToString("dd-MM-YYYY"))</span></h6>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <h6>
                <em><strong class="style1">Obra:</strong></em> <span class="style1">@ot.Codigo</span>
            </h6>
            <p><h6><em><strong class="style1">Titulo:</strong></em> <span class="style1">@ot.Titulo</span></h6></p>
        </div>
        <div class="col-6">
            <em><strong>Materias primas usadas:</strong></em>
            @if (insumosUsados != null && insumosUsados.Count() > 0)
            {
                @foreach (var insumo in insumosUsados)
                {
                    <p class="style1" style="font-size:12px">- @insumo.Descripcion</p>
                }
            }
            else
            {
                <span class="style1">Ninguna registrada</span>
            }
        </div>
    </div>
    <div class="row">   
        <em><strong class="style1">Descripcion:</strong></em>
        @foreach (var des in descripcion)
        {
            <a style="font-size:12px">- @des</a>
        }
   </div>
    <br/>
    <div class="tablaReporte">
    <table border="1">
        <thead style="background-color: #f2f2f2;">
            <tr>
                <th style="background-color: #8f8f8f; text-align: center;border: 1px solid black; padding: 8px 12px;" colspan="7">TRAZABILIDAD</th>
            </tr>
            <tr>
                <th style=" border: 1px solid black; padding: 8px 12px; ">Etapa</th>
                <th style=" border: 1px solid black; padding: 8px 12px; ">Resp</th>
                <th style=" border: 1px solid black; padding: 8px 12px; ">Dia</th>
                <th style=" border: 1px solid black; padding: 8px 12px; ">Desde</th>
                <th style=" border: 1px solid black; padding: 8px 12px; ">Hasta</th>
                <th style=" border: 1px solid black; padding: 8px 12px; ">OK</th>
                <th style=" border: 1px solid black; padding: 8px 12px; ">NC</th>
            </tr>
        </thead> 
        <tbody>
            @foreach(string et in etapas)
            {
                @for (int i = 0; i < eventos.Count(); i = i + 2)
                {
                    <tr style=" border: 1px solid black; padding: 8px 12px; ">
                    @foreach(EventosProduccion evento in eventos.Where(x => x.Etapa == et).OrderBy(x=>x.Fecha).Skip(i).Take(2))
                    {
                        
                        @if (evento.Tipo == "Comenzar")
                        {
                            <td style=" border: 1px solid black; padding: 2px 6px; ">@et</td>
                            <td style=" border: 1px solid black; padding: 2px 6px; ">@nombres[evento.Operario]</td>
                            <td style=" border: 1px solid black; padding: 2px 6px; ">@evento.Fecha.Value.ToString("dd/MM/yyyy")</td>
                            <td style=" border: 1px solid black; padding: 2px 6px; ">@evento.Fecha.Value.ToString("HH:mm")</td>
                        }
                        else if (eventos.Where(x => x.Etapa == et).Count()>i+2)
                        {
                                <td style =" border: 1px solid black; padding: 2px 6px; " >@evento.Fecha.Value.ToString("HH:mm")</td>
                                <td style=" border: 1px solid black; padding: 2px 6px; "></td>
                                <td style=" border: 1px solid black; padding: 2px 6px; "><strong>X</strong></td>
                        }
                        else if (evento.Tipo == "Finalizado")
                        {
                                <td style=" border: 1px solid black; padding: 2px 6px; ">@evento.Fecha.Value.ToString("HH:mm")</td>
                                <td style =" border: 1px solid black; padding: 2px 6px; " ><strong>X</strong></td>
                                <td style=" border: 1px solid black; padding: 2px 6px; "></td>
                        }
                    }
                    </tr>
                }
            }
        </tbody>
    </table>
    </div>
    <br class="no-print"/>
    <br class="no-print" />
    <br class="no-print" />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}



@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo ot = new();
    List<EventosProduccion>? eventos = null;
    List<PersonalDTO> operarios = new();
    List<InsumosUsados>? insumosUsados = null;
    List<string> descripcion = new();
    Dictionary<int?,string> nombres = new();
    List<string> etapas = new List<string>(new string[]{ "Punzonado", "Plegado", "Soldadura", "Pulido", "Pintura", "Armado", "Despacho" });
    protected override async Task OnInitializedAsync()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        ot = rta.List;
        getDescripcion(ot.Descripcion);
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>(($"/api/EventosProduccion/getbyotid?ot={id}"));
        eventos = respuesta.List;
        if(ot.Insumosusados!=null && ot.Insumosusados!=""){
            insumosUsados = JsonSerializer.Deserialize<List<InsumosUsados>>(ot.Insumosusados);
        }
        foreach(var evento in eventos)
        {
            try{
                if (!(nombres.ContainsKey(evento.Operario.Value)))
                {
                    var resp = await http.GetFromJsonAsync<Respuesta<PersonalDTO>>($"/api/personal/{evento.Operario}");
                    nombres[evento.Operario.Value] = resp.List.Nombres + " " + resp.List.Apellido; 
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    public List<string> getDescripcion(string otdes)
    {
        Console.WriteLine(otdes);
        descripcion = JsonSerializer.Deserialize<List<string>>(otdes);
        return descripcion;
    }
    public void ComeBack()
    {
        nav.NavigateTo("/produccion");
    }
    private async Task Print()
        => await _js.InvokeVoidAsync("window.print");
}
