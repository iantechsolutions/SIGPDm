@page "/despacho/{id:int}"

<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Despacho</RadzenText>
@if (oRtaPersonal != null)
{
    <RadzenText TextStyle="TextStyle.Body1"><b>Información correspondiente a la orden @($"OT-{oTrabajo.Codigo}")</b></RadzenText>

   
    <hr />
    <br />
    <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Administrar personal</RadzenText>
    <br />
    <RadzenDropDownDataGrid TValue="PersonalDTO" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" AllowClear="true"
                            Data=@(oRtaPersonal) Style="width: 50%" AllowColumnResize="true" @bind-Value="persona"
                            TextProperty="Nombres" AllowFilteringByAllStringColumns="true" class="float-start">
        <Columns>

            <RadzenDropDownDataGridColumn Property="Id" Title="Id" Width="50%" />
            <RadzenDropDownDataGridColumn Property="Nombres" Title="Nombres" Width="25%" />
            <RadzenDropDownDataGridColumn Property="Apellido" Title="Apellido" Width="25%" />
        </Columns>
    </RadzenDropDownDataGrid>
    @if (persona != null)
    {
        <button class="btn btn-outline-success " @onclick="cargarOperario">Seleccionar</button>
    }
    <br />
    <br />
    @if (listaOperarios.Count() > 0)
    {
        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" AllowSorting="true" PageSize="10" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" @ref="gridOperarios" AllowFiltering="true"
                        Data="@listaOperarios" TItem="PersonaEvento" ColumnWidth="100px" Style="width: 100%">
            <Columns>
                <RadzenDataGridColumn TItem="PersonaEvento" Filterable="false" Title="Nombre" Width="4.5vh" TextAlign="TextAlign.Left">
                    <Template Context="data">
                        <RadzenText>@data.Operario.Nombres</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Filterable="false" Title="Apellido" Width="4.5vh" TextAlign="TextAlign.Left">
                    <Template Context="data">
                        <RadzenText>@data.Operario.Apellido</RadzenText>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Día" Filterable="false" Width="6.5vh">
                    <Template Context="data">
                        <RadzenDatePicker @bind-Value="data.Fecha" DateFormat="dd/MM/yyyy" HourFormat="24" Style="width:25vh;content: 'query_builder';" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Desde" Filterable="false" Width="4.5vh">
                    <Template Context="data">
                        <RadzenDatePicker @bind-Value="data.FechaDesde" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:15vh;" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="Hasta" Filterable="false" Width="4.5vh">
                    <Template Context="data">
                        <RadzenDatePicker @bind-Value="data.FechaHasta" ShowTime="true" TimeOnly="true" DateFormat="HHmm" Style="width:15vh;" />
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="" Filterable="false" Width="4vh">
                    <Template Context="data">
                        <RadzenButton Disabled="@(data.EndButton)" class="btn btn-outline-info btn-sm" Click="@(() => estallar(data))">Finalizar</RadzenButton>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="PersonaEvento" Property="" Title="" Filterable="false" Width="4vh">
                    <Template Context="data">
                        <button class="btn btn-danger btn-sm" @onclick="() => alertaDeleteOperario(data)">Eliminar</button>
                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
    <br />
    <RadzenButton class="btn btn-outline-primary" Disabled="disabled" Click="alertaSend">Finalizar despacho</RadzenButton>
    <br />
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [Parameter] public int id { get; set; }
    Ordentrabajo oTrabajo = new();
    List<PersonalDTO> oRtaPersonal;
    RadzenDataGrid<PersonaEvento>? gridOperarios;
    PersonalDTO persona;
    List<PersonaEvento> listaOperarios = new();
    Respuesta<List<EventosProduccion>> personalEventos = new();
    bool disabled = true;
    DateTime fechaInicio = DateTime.Now;
    DateTime fechaFinal = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetFromJsonAsync<Respuesta<Ordentrabajo>>($"/api/ot/{id}");
        oTrabajo = response.List;


        var response3 = await http.GetFromJsonAsync<Respuesta<List<PersonalDTO>>>("/api/personal/true");
        oRtaPersonal = response3.List.Where(x => x.Puesto == "Operario").ToList();

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Despacho");

        foreach (var persona in personalEventos.List)
        {

            if (persona.Tipo == "Comenzar")
            {
                var rta = await http.GetFromJsonAsync<Respuesta<PersonalDTO>>($"/api/personal/{persona.Operario}");
                PersonaEvento personaEvento = new();
                personaEvento.FechaDesde = persona.Fecha;
                personaEvento.Fecha = persona.Fecha.Value.Date;
                personaEvento.Operario = rta.List;
                listaOperarios.Add(personaEvento);
            }
            if (persona.Tipo == "Finalizado")
            {
                var operario = listaOperarios.Where(x => x.FechaHasta == null && x.Operario.Id == persona.Operario).First();
                operario.FechaHasta = persona.Fecha;
                operario.EndButton = true;

            }
        }

    }

    public async Task estallar(PersonaEvento operario)
    {
        var temp = operario.FechaDesde.Value;
        operario.FechaDesde = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        temp = operario.FechaHasta.Value;
        operario.FechaHasta = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        try
        {
            await http.PutAsJsonAsync<EventosProduccion>($"/api/eventosproduccion/{operario.Operario.Id}/Despacho/{oTrabajo.Id}", new EventosProduccion());
        }
        catch
        {

        }
        operario.EndButton = true;
        EventosProduccion evento = new();
        evento.Etapa = "Despacho";
        evento.Ot = id;
        evento.Operario = operario.Operario.Id;
        evento.Fecha = operario.FechaDesde;
        evento.Tipo = "Comenzar";
        await http.PostAsJsonAsync<EventosProduccion>("/api/eventosproduccion", evento);
        evento.Fecha = operario.FechaHasta;
        evento.Tipo = "Finalizado";
        await http.PostAsJsonAsync<EventosProduccion>("/api/eventosproduccion", evento);

        personalEventos = await http.GetFromJsonAsync<Respuesta<List<EventosProduccion>>>($"/api/EventosProduccion/getbyorder?ot={id}&etapa=Despacho");
        gridOperarios.Reload();
        StateHasChanged();
    }

    async Task ComeBack()
    {
        nav.NavigateTo("/despacho");
    }


    public async Task alertaSend()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se finalizará la orden de trabajo",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ConfirmButtonText = "Finalizar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            send();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task send()
    {

        oTrabajo.Estado = "Finalizado";

        List<TimesEtapa> listTimes = new();
        if (oTrabajo.Fechas != null) listTimes = JsonSerializer.Deserialize<List<TimesEtapa>>(oTrabajo.Fechas);
        TimesEtapa time = new("Despacho");
        var tiempoTotalEtapa = await http.GetFromJsonAsync<int>($"/api/EventosProduccion/getTiempoEtapa?ot={id}&etapa=Despacho");
        time.TimeTotalEtapa = tiempoTotalEtapa;
        listTimes.Add(time);
        oTrabajo.Fechas = JsonSerializer.Serialize<List<TimesEtapa>>(listTimes);

        await http.PutAsJsonAsync<Ordentrabajo>("/api/ot", oTrabajo);
        nav.NavigateTo($"/produccion");
    }

    public string getUltimoEstado(int id)
    {
        foreach (var item in personalEventos.List)
        {
            if (item.Operario == id)
            {
                return item.Tipo;
            }
        }
        return "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var a = disabled;
        disabled = !await estaFinalizado();
        if (a != disabled) StateHasChanged();
    }

    public async Task<bool> estaFinalizado()
    {

        if (listaOperarios.All(x => x.EndButton == true)) return true;
        return false;

    }

    public void cargarOperario()
    {
        PersonaEvento personaEvento = new();
        personaEvento.Operario = persona;
        personaEvento.Fecha = DateTime.Now;
        listaOperarios.Add(personaEvento);
        if (gridOperarios != null) gridOperarios.Reload();
        StateHasChanged();
    }

    public void deleteOperario(PersonaEvento operario)
    {
        try{
            var temp = operario.FechaDesde.Value;
            operario.FechaDesde = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
            temp = operario.FechaHasta.Value;
            operario.FechaHasta = new DateTime(operario.Fecha.Year, operario.Fecha.Month, operario.Fecha.Day) + temp.TimeOfDay;
        }
        catch
        {
            
        }
        listaOperarios.Remove(operario);
        gridOperarios.Reload();
        persona = new PersonalDTO();

        if (operario.FechaDesde != null && personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaDesde).Count() > 0) http.DeleteAsync($"/api/eventosproduccion/{personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaDesde).First().Id}");

        if (operario.FechaHasta != null && personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaDesde).Count() > 0) http.DeleteAsync($"/api/eventosproduccion/{personalEventos.List.Where(x => x.Operario == operario.Operario.Id && x.Ot == id && x.Fecha == operario.FechaHasta).First().Id}");
        gridOperarios.Reload();
        StateHasChanged();
    }

    public async Task alertaDeleteOperario(PersonaEvento operario)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se desasignará esta tarea",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            deleteOperario(operario);
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }

    public class PersonaEvento
    {
        public PersonalDTO Operario { get; set; }
        public DateTime Fecha { get; set; }
        public DateTime? FechaDesde { get; set; }
        public DateTime? FechaHasta { get; set; }
        public bool EndButton;
    }

}
