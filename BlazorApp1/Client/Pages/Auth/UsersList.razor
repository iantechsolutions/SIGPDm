@page "/Usuarios"
@*@attribute [Authorize(Roles = "USUARIOMAESTRO")]*@
@inject HttpClient http
@inject NavigationManager uriHelper

<AuthorizeView Roles="USUARIOMAESTRO,ADMINISTRADOR">
    <div style="display: flex;">
        <h3>Lista Usuarios | </h3> &nbsp;&nbsp;
        <a href="RegistroUsuario" class="btn btn-primary col-3" >
            <span class="oi oi-plus" aria-hidden="true"></span> Crear Nuevo Registro
        </a>
    </div>
    <br />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Advanced"
                    AllowSorting="true" PageSize="5" AllowPaging="true" ShowPagingSummary="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    Data="@employees" TItem="Employee" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Employee" Property="Names" Filterable="false" Title="Names" Width="40px" />
            <RadzenDataGridColumn TItem="Employee" Property="LastNames" Filterable="false" Title="LastNames" Width="40px" />
            <RadzenDataGridColumn TItem="Employee" Property="Dni" Filterable="false" Title="Dni" Width="40px" />
            <RadzenDataGridColumn TItem="Employee" Property="Phone" Filterable="false" Title="Phone" Width="40px" />
            <RadzenDataGridColumn TItem="Employee" Property="Rol" Filterable="false" Title="Rol" Width="40px" />
            <RadzenDataGridColumn TItem="Employee" Property="" Filterable="false" Title="" Width="40px">
                <Template Context="data">
                    <button class="btn" title="Editar" @onclick="@(()=>nav.NavigateTo($"/ActualizarUsuario/{@data.Id}"))"><FeatherEdit3 Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="" Filterable="false" Title="" Width="40px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="@(()=>nav.NavigateTo($"/EliminarUsuario/{data.Id}"))"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Employee" Property="" Filterable="false" Title="" Width="40px">
                <Template Context="data">
                    <button class="btn" title="Info" @onclick="@(() => ShowDetails(data))"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>


    @*<ListComponent OnClickEvent="GetRegisters" Response="response">
    <SelectOptions>
    <option value="">Estatus...</option>
    <option value="ACTIVO">ACTIVOS</option>
    <option value="SUSPENDIDO">SUSPENDIDOS</option>
    </SelectOptions>
    <TableHeader>
    <th>Nombre Completo</th>
    <th>Dni</th>
    <th>Télefono</th>
    <th>Rol</th>
    <th></th>
    </TableHeader>
    <TableBody>
    @if (employees != null)
    {
    @foreach (Employee employee in employees)
    {
    <tr>
    <td @onclick="@(()=> ShowDetails(employee))" style="cursor: pointer; color: blue; ">@employee.Names @employee.LastNames</td>
    <td>@employee.Dni</td>
    <td>@employee.Phone</td>
    <td>@employee.Rol</td>
    <td>
    <a href="/ActualizarUsuario/@employee.Id" class="btn btn-warning" title="Editar">
    <span class="oi oi-pencil" aria-hidden="true"></span>
    </a> |
    <a href="/EliminarUsuario/@employee.Id" class="btn btn-danger" title="Eliminar">
    <span class="oi oi-trash" aria-hidden="true"></span>
    </a>
    </td>
    </tr>
    }
    }
    </TableBody>
    </ListComponent>*@
</AuthorizeView>


@code {

    [CascadingParameter] public IModalService Modal { get; set; }

    ResponseForList response = new ResponseForList() { AllRegisters = 0 };
    private IList<Employee> employees;

    protected override async Task OnInitializedAsync()
    {

        GetRegisters("", "", 1, DateTime.UtcNow, DateTime.UtcNow);
    }

    private async void GetRegisters(string search, string status, int pageLocal, DateTime startDate, DateTime endDate)
    {
        if (search == "")
            search = "TODO";
        if (status == "")
            status = "TODO";

        var modal = Modal.Show<ModalWait>("", SharedModalOptions.modalOptionsWait);
        var result = await http.GetAsync($"api/Account/GetUsers/{search}/{status}/{pageLocal}");
        switch (result.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                response = JsonSerializer.Deserialize<ResponseForList>(result.Content.ReadAsStringAsync().Result);
                employees = JsonSerializer.Deserialize<IList<Employee>>(response.EntitiesPricipal);
                modal.Close();
                break;
            case System.Net.HttpStatusCode.NotFound:
                response = new ResponseForList() { AllRegisters = 0 };
                modal.Close();
                break;
            case System.Net.HttpStatusCode.Unauthorized:
                uriHelper.NavigateTo("/Logout");
                break;
            default:
                modal.Close();
                Modal.Show<ModalInfo>("Error", SharedModalOptions.SetParameterModalInfo(result.Content.ReadAsStringAsync().Result, "alert alert-danger"), SharedModalOptions.modalOptionsInfo);
                break;
        }
        StateHasChanged();
    }

    private void ShowDetails(Employee employee)
    {
        var modalOptions = new ModalOptions()
        {
        };

        var parameters = new ModalParameters();
        parameters.Add(nameof(DetailsEmployee.employee), employee);

        Modal.Show<DetailsEmployee>("Detalle Usuario", parameters, modalOptions);
    }

}
