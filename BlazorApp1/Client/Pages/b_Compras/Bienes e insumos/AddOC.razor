@using Microsoft.Extensions.Logging
@using System.Text.Json
@if (ProveedoresPosibles != null)
{
    if (ProveedoresPosibles.Count > 0)
    {
        <div class="card">
            <div class="card-body">
               
                <EditForm Model="@oPresupuesto" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />
                    <ValidationSummary ShowErrorsInline="false" />
                    <div class="row">
                        <div class="col-sm-6">
                            <label>Proveedor</label>
                            <RadzenDropDown AllowClear="true" TValue="int?" Style="width: 100%" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data=@(ProveedoresPosibles) TextProperty="RazonSocial" ValueProperty="Id" @bind-Value="oPresupuesto.Proveedor" />
                            <ValidationMessage For="(()=> oPresupuesto.PrecioUnitario)" style="color:red;" />
                        </div>
                        <div class="col-sm-6">
                            <label>Cantidad</label>
                            <InputNumber class="form-control" @bind-Value="@oPresupuesto.Cantidad" placeholder="Cantidad"></InputNumber>
                            <ValidationMessage For="(()=> oPresupuesto.Cantidad)" style="color:red;" />
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-6">
                            <label>Precio unitario</label>
                            <InputText class="form-control" @bind-Value="@oPresupuesto.PrecioUnitario" placeholder="Precio por unidad"></InputText>
                            <ValidationMessage For="(()=> oPresupuesto.PrecioUnitario)" style="color:red;" />
                        </div>
                        <div class="col-sm-6">
                            <label>IVA</label>
                            <RadzenDropDown class="form-control" TValue="string" Data=@IVAS placeholder="" @bind-Value=@oPresupuesto.Iva />


                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-6">
                            <label>Precio Total</label>
                            @if (double.TryParse(oPresupuesto.Iva, out double result) && double.TryParse(oPresupuesto.PrecioUnitario, out double result2) && oPresupuesto.Cantidad.HasValue)
                            {
                                <RadzenText class="form-control">@(oPresupuesto.Iva == "21" ? (1.21 * result2 * oPresupuesto.Cantidad) : (1.105 * result2 * oPresupuesto.Cantidad))</RadzenText>
                            }
                            else
                            {
                                <RadzenText class="form-control">0</RadzenText>
                            }
                        </div>
                        @* <div class="col-sm-6">
                            <label>Condicion pago</label>
                            <RadzenDropDown class="form-control" Data=@CondicionPago TextProperty="Nombre" placeholder="" @bind-Value=@oPresupuesto.CondicionPago />
                        </div> *@
                        <div class="col-sm-6">
                            <label>Condicion pago</label>
                            <RadzenDropDown AllowClear="true" TValue="string" Style="width: 100%" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data=@(CondicionPago) TextProperty="Nombre" ValueProperty="Nombre" @bind-Value="oPresupuesto.CondicionPago" />
                            <ValidationMessage For="(()=> oPresupuesto.CondicionPago)" style="color:red;" />
                        </div>
                    </div>
                    <br />
                    <div class="row">

                        <div class="col-sm-6">
                            <label>Especificación</label>
                            <InputTextArea class="form-control" @bind-Value="@oPresupuesto.Especificacion" placeholder="Especificación"></InputTextArea>
                            <ValidationMessage For="(()=> oPresupuesto.Especificacion)" style="color:red;" />
                        </div>


                    </div>

                    <br />
                    <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter"  Text="Cancelar" Click="cancel" />
                    <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" Disabled=@disable Text="Aprobar presupuesto" type="submit" />

                </EditForm>
            </div>
        </div>
    }
    

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    bool disable;
    Presupuesto oPresupuesto = new();
    Respuesta<Presupuesto> oRta = new();
    List<ProveedoreDTO> ProveedoresPosibles = new();
    IList<CondicionPago>? CondicionPagoDisponibles;
    List<CondicionPago> CondicionPago = new();

    List<string> IVAS = new List<string>
    {
        "10,5","21"
    };
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int idInsumo { get; set; }
    Respuesta<InsumoDTO> oRtaInsumo = new();
    InsumoDTO insumo = new();
    protected override async Task OnInitializedAsync()
    {
        disable = false;
        oRtaInsumo = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{idInsumo}");
        insumo = oRtaInsumo.List;
        var rta = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>($"/api/proveedore");
        ProveedoresPosibles = rta.List;

        try
        {
            var respuesta = await http.GetFromJsonAsync<Respuesta<List<CondicionPago>>>("/api/CondicionPago");
            CondicionPago = respuesta.List;
        }
        catch
        {

        }



        try
        {
            var coso = JsonSerializer.Deserialize<List<ProveedoreDTO>>(insumo.ProveedoresPosibles);
            if(coso.Count()>0){
                ProveedoresPosibles = coso;
            }

        }
        catch
        {

        }
    }

    async Task Guardar()
    {

        if (string.IsNullOrEmpty(oPresupuesto.Proveedor.ToString()))
        {
            await alertaError("un proveedor");
        }       
        else if (string.IsNullOrEmpty(oPresupuesto.Cantidad.ToString()))
        {
            await alertaError("una cantidad");
        }
        else if (string.IsNullOrEmpty(oPresupuesto.PrecioUnitario))
        {
            await alertaError("un precio");
        }
        else if (string.IsNullOrEmpty(oPresupuesto.Especificacion))
        {
            await alertaError("una especificación");
        }
        else if (string.IsNullOrEmpty(oPresupuesto.CondicionPago))
        {
            await alertaError("una condición de pago");

        }
        else
        {
            if (oPresupuesto.Iva == "21")
            {
                oPresupuesto.Precio = (double.Parse(oPresupuesto.PrecioUnitario) * 1.21 * oPresupuesto.Cantidad).ToString();
            }
            else
            {
                oPresupuesto.Precio = (double.Parse(oPresupuesto.PrecioUnitario) * 1.105 * oPresupuesto.Cantidad).ToString();
            }

            disable = true;
            oPresupuesto.Insumo = idInsumo;
            oPresupuesto.Estado = "Generada";
            oPresupuesto.Generada = DateTime.Now;

            await http.PostAsJsonAsync<Presupuesto>($"/api/Presupuesto", oPresupuesto);
            
            insumo.Recepcion = "Esperando confirmacion";
            await http.PutAsJsonAsync<InsumoDTO>("/api/Insumo", insumo);

            await ModalInstance.CloseAsync(ModalResult.Ok());
        }
    }

    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }


}
