@page "/infoinsumo/PresupuestosDisponibles/{id:int}"


@if (oRespuesta.List != null)
{

    <RadzenStack Gap="0">
        <RadzenColumn SizeSM="4">
            <button class="btn btn-outline-success no-print" title="Crear presupuesto" style="float: right;" @onclick="()=>AddPresupuesto()">Crear presupuesto</button>
            <button class="btn btn-outline-success no-print" title="Crear presupuesto" style="float: right;" @onclick="()=>AddCondicionDePago()">Administrar condiciones de pago</button>
            <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-black"><strong>INSUMO @oInsumo.Codigo</strong></RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Nombre</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Descripcion: </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.Descripcion</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Stock real: </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.StockReal</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Stock máximo: </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.StockMax</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-4 rz-mb-0" style="font-size: 15px">Stock minimo: </RadzenText>
            <RadzenText TextStyle="TextStyle.Body1"><b>@oInsumo.StockMin</b></RadzenText>

        </RadzenColumn>

    </RadzenStack>
    <br />
  
    <br />
    <br />

    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Aprobados">



                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@Presupuestos.Where(x=>x.Estado =="Generada"||x.Estado=="Aprobada")" TItem="Presupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">


                    <Columns>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="Proveedor" Width="20%">
                            <Template Context="data">
                                <p>@proveedores.Where(x=>x.Id==data.Proveedor).First().RazonSocial</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio" Width="20%">
                            <Template Context="data">
                                @try
                                {@Math.Round(double.Parse(data.Precio), 2).ToString("#.00")
                                }
                                catch
                                {
                                    <p>No se ingreso un precio valido </p>
                                }

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="CondicionPago" Title="CondicionPago" Width="25%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Especificacion" Title="Especificacion" Width="25%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Info" @onclick="() => GoToinfo(data.Id)"><FeatherInfo Color="blue" /></button>

                            </Template>
                        </RadzenDataGridColumn>
                      


                    </Columns>

                </RadzenDataGrid>


            </RadzenTabsItem>

            <RadzenTabsItem Text="Pendientes">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridPendientes"
                                Data="@Presupuestos.Where(x=>x.Estado =="Presupuesto")" TItem="Presupuesto" ColumnWidth="250px"  LogicalFilterOperator="LogicalFilterOperator.Or">

                    <Columns>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="Proveedor" Width="20%">
                            <Template Context="data">
                                <p>@proveedores.Where(x => x.Id == data.Proveedor).First().RazonSocial</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio" Width="20%">
                            <Template Context="data">
                                @Math.Round(double.Parse(data.Precio), 2).ToString("#.00")

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="CondicionPago" Title="Condicion pago" Width="20%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Especificacion" Title="Especificación" Width="20%" />
                       
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Aprobar" @onclick="() => alertaAprobar(data)"><FeatherCheck Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                                <Template Context="data">
                                <button class="btn" title="Rechazar" @onclick="() => AlertaReject(data)"><FeatherEdit Color="Blue" /></button>

                                </Template>

                           
                          </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="Red" /></button>

                            </Template>
                             </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Info" @onclick="() => GoToinfo(data.Id)"><FeatherInfo Color="blue" /></button>

                            </Template>
                        </RadzenDataGridColumn>




                    </Columns>

                </RadzenDataGrid>

            </RadzenTabsItem>

            <RadzenTabsItem Text="Rechazados">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@Presupuestos.Where(x=>x.Estado =="Rechazada")" TItem="Presupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="Proveedor" Width="20%">
                            <Template Context="data">
                                <p>@proveedores.Where(x => x.Id == data.Proveedor).First().RazonSocial</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio" Width="70px">
                            <Template Context="data">
                                @Math.Round(double.Parse(data.Precio), 2).ToString("#.00")

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="CondicionPago" Title="CondicionPago" Width="25%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Especificacion" Title="Especificacion" Width="25%" />

                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Info" @onclick="() => GoToinfo(data.Id)"><FeatherInfo Color="blue" /></button>

                            </Template>
                        </RadzenDataGridColumn>


                    </Columns>


                </RadzenDataGrid>

            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<InsumoDTO> oRespuesta = new();
    Respuesta<Presupuesto> oRtaPres = new();
    List<ProveedoreDTO> proveedores = new();


    InsumoDTO oInsumo = null;


    ICollection<Presupuesto> Presupuestos;



    [Parameter] public int? id { get; set; }

    RadzenDataGrid<Presupuesto>? grid;
    RadzenDataGrid<Presupuesto>? gridPendientes;
    RadzenDataGrid<Presupuesto>? gridRecepcion;
    int currentPage;
    int currentPageStock;
    int currentPageRecepcion;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    public async Task Get()
    {
        oRespuesta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{id}");
        var rtaa = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>($"/api/Proveedore");
        proveedores = rtaa.List;

        oInsumo = oRespuesta.List;

        try
        {
            var rta = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>($"/api/Presupuesto");
            Presupuestos = rta.List;
        }
        catch
        {
            
        }
    }


    public async Task Aprobar(Presupuesto presupuesto)
    {

        presupuesto.Estado = "Generada";
        presupuesto.Generada = DateTime.Now;
        await http.PutAsJsonAsync<Presupuesto>("/api/Presupuesto", presupuesto);

        await Get();
        StateHasChanged();

    }
    public async Task alertaAprobar(Presupuesto presupuesto)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Desea aprobar el presupuesto?",                
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Aprobar(presupuesto);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task AlertaReject(Presupuesto presupuesto)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Desea rechazar el presupuesto?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Reject(presupuesto);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task Reject(Presupuesto presupuesto)
    {
        presupuesto.Estado = "Rechazada";
        await http.PutAsJsonAsync<Presupuesto>("/api/Presupuesto", presupuesto);

        await Get();
        StateHasChanged();
    }

    public async Task Delete(int? id)
    {
        await http.DeleteAsync($"/api/presupuesto/{id}");
        await Get();
        StateHasChanged();
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este presupuesto",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task AddPresupuesto()
    {
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();

        object? filtroAnteriorDes = new();
        object? filtroAnteriorCod = new();

        if (columnDes != null || columnCod != null)
        {
            filtroAnteriorDes = columnDes.GetFilterValue();
            filtroAnteriorCod = columnCod.GetFilterValue();
        }

        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddOC.idInsumo), id);

        var options = new ModalOptions()
            {
                HideHeader = true,
            };

        var formModal = Modal.Show<AddOC>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            StateHasChanged();
            await gridPendientes.GoToPage(currentPage);
            
          
            await gridPendientes.Reload();

        }



    }
    public async Task AddCondicionDePago()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddCP>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await Get();
            StateHasChanged();           
        }

    }
    async Task GoToinfo(int? id)
    {
       
            currentPage = grid.CurrentPage;
            var parameters = new ModalParameters();
            var options = new ModalOptions()
                {
                    HideHeader = true,
                    HideCloseButton = true
                };
            parameters.Add(nameof(Info.id), id);
            var formModal = Modal.Show<Info>("", parameters, options);
            var result = await formModal.Result;

            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
}
