@page "/infoinsumo/PresupuestosDisponibles/{id:int}"


@if (oRespuesta.List != null)
{



    <br />
    <button class="btn btn-outline-success no-print" title="Crear presupuesto" @onclick="()=>AddPresupuesto()">Crear presupuesto</button>
    <br />
    <br />

    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Aprobados">

              @*  <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridStock"
                                Data="@oRespuestaPresupuestoAprobada" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="100px" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Código" Width="100px" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="Cantidad" Width="100px">
                            <Template Context="data">
                                @if (esDeLoteUnico(data))
                                {
                                    @data.StockReal
                                }
                                else
                                {
                                    @data.StockReal
                                }
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>*@

            </RadzenTabsItem>

            <RadzenTabsItem Text="Pendientes">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@Presupuestos" TItem="OrdencompraDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="InsumoNavigation.Descripcion" Title="Descripción" Width="40px" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Proveedor" Title="Proveedor" Width="40px" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Precio" Title="Precio" Width="40px" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="CondicionPago" Width="40px" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Especificacion" Title="Especificacion" Width="40px"/>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="30px">
                            <Template Context="data">


                                <button class="btn" title="Aprobar" @onclick="() => Aprobar(data.Id)"><FeatherCheck Color="green" /></button>
                                <button class="btn" title="Rechazar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="Red" /></button>

                            </Template>

                        </RadzenDataGridColumn>


                    </Columns>

                </RadzenDataGrid>

            </RadzenTabsItem>

            <RadzenTabsItem Text="Rechazados">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

             
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<InsumoDTO> oRespuesta = new();
    Respuesta<OrdencompraDTO> oRtaOC = new();

    ICollection<OrdencompraDTO> Presupuestos;
    OrdencompraDTO rechazado = new();
    [Parameter] public int? id { get; set; }

    RadzenDataGrid<OrdencompraDTO>? grid;
    RadzenDataGrid<OrdencompraDTO>? gridStock;
    RadzenDataGrid<OrdencompraDTO>? gridRecepcion;
    int currentPage;
    int currentPageStock;
    int currentPageRecepcion;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    bool esDeLoteUnico(InsumoDTO insumo)
    {
        if (insumo.Lotes == null) return false;
        var lotes = JsonSerializer.Deserialize<List<Lotes>>(insumo.Lotes);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote unico") return true;
        }
        return false;
    }
    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<InsumoDTO>>($"/api/Insumo/{id}");
        oRespuesta = respuesta;


        Presupuestos = oRespuesta.List.OrdencompraInsumoNavigations;

        StateHasChanged();


    }

    public async Task Aprobar(int? id)
    {



    }
    public async Task Delete(int? id)
    {
        Console.WriteLine("HOLA");
        await http.DeleteAsync($"/api/oc/{id}");
        await OnInitializedAsync();
        StateHasChanged();
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este presupuesto",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task AddPresupuesto()
    {
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();

        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddOC.idInsumo), id);

        var options = new ModalOptions()
            {
                HideHeader = true,
            };

        var formModal = Modal.Show<AddOC>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await OnInitializedAsync();
            await grid.GoToPage(currentPage);
            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            grid.Reload();

        }



    }


}
