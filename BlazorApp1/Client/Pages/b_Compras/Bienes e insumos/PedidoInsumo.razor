
<div style="text-align: center;">
    <h1 style="font-weight:600; font-size: 25px">Solicitud de cotización</h1>
</div>
<br />

@if (insumos != null && insumos.Count() > 0)
{
    <RadzenDataGrid AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                    Data="@insumos" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Insumo" Width="25%" />
            <RadzenDataGridColumn TItem="InsumoDTO" Property="StockReal" Title="Cantidad" Width="20%" />
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="precio" Width="20%">
                <Template Context="data">
                    <input class="card" style="width: 90%; height: 100%;" @bind-value="precio"></input>

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="Precio Unitario" Width="20%">
                <Template Context="data">
                    <input class="card" style="width: 90%;" @bind-value="precioUni"></input>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="10%">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
        <br/>
    

    <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" style="float: right" Text="Generar pedido" Click="Guardar" />



}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    int currentPage;
    bool allowFiltering = false;
    RadzenDataGrid<InsumoDTO>? grid;
    List<InsumoDTO> insumos = new();

    int? precio;
    int? precioUni;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        insumos = respuesta.List.Where(x => (x.StockReal <= x.StockMin && x.Recepcion != "Esperando recepcion")).ToList();

        StateHasChanged();
    }



    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará el insumo de la lista",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            Console.WriteLine(precio);

            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            Console.WriteLine(precio);

        }
    }
    async void delete(int id)
    {
        Console.WriteLine(precio);

        await OnInitializedAsync();
        if (currentPage > grid.Count / grid.PageSize - 1 && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }
    async Task Guardar()
    {
        Console.WriteLine(precio);
        Console.WriteLine(precioUni);

    }
}

