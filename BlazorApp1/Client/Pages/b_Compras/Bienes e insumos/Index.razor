@page "/bienes"
@using BlazorApp1.Client.Pages.d_Deposito.Insumos

<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<button class="btn btn-outline-success no-print" title="Crear Ordencompra" style="float: right;" @onclick="()=>AddPresupuestos()">Crear un presupuesto</button>&nbsp;
<h1>Bienes e insumos</h1>
<p>En esta sección se podrán gestionar las solicitudes que llegan desde el pañol.</p>
<br />
<hr />


@if (oRespuesta.List != null)
{
    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Stock">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridStock"
                            Data="@oRespuesta.List" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="25%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Código" Width="20%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="Cantidad" Width="25%">
                            <Template Context="data">
                                @if (data.Tipo == "Lote unico")
                                {
                                    @data.StockReal
                                }
                                else
                                {
                                    @data.StockReal
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Editar insumo" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            </RadzenTabsItem>

            <RadzenTabsItem Text="Pendiente compra">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                
                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                Data="@oRespuestaPendienteCompra" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="35%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Código" Width="20%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="Cantidad" Width="30%">
                            <Template Context="data">

                                @if (data.Tipo == "Lote unico")
                                {
                                    @data.StockReal
                                }
                                else
                                {
                                    @data.StockReal
                                }
                                
                            </Template>

                        </RadzenDataGridColumn>
                        
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="15%">                           
                            <Template Context="data">
                                <button type="button" class="btn" title="Presupuestos" @onclick="() => GoPresupuestos(data.Id)"><FeatherInfo Color="blue" /> </button>
                            </Template>
                        </RadzenDataGridColumn>
@*                         <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="15%">
                            <Template Context="data">
                                <button type="button" class="btn" title="Crear presupuestos" @onclick="() => AddPresupuesto(data.Id)"> <FeatherFilePlus Color="green" /> </button>
                            </Template>

                        </RadzenDataGridColumn> *@
                    </Columns>

                </RadzenDataGrid>

            </RadzenTabsItem>
           
            <RadzenTabsItem Text="Pendiente recepción">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                            AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridRecepcion"
                                Data="@oRespuestaPendienteRecepcion" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripción" Width="40%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Código" Width="30%" />
                        <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="Cantidad" Width="30%">
                            <Template Context="data">
                                @if (data.Tipo == "Lote unico")
                                {
                                    @data.StockReal
                                }
                                else
                                {
                                    @data.StockReal
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<InsumoDTO>> oRespuesta = new();
    Respuesta<OrdencompraDTO> oRtaOC = new();

    List<Lote> lotes = new();
    List<InsumoDTO> oRespuestaPresupuestoAsociado = new();
    List<InsumoDTO> oRespuestaPendienteCompra = new();
    List<InsumoDTO> oRespuestaPendienteRecepcion = new();

    RadzenDataGrid<InsumoDTO>? grid;
    RadzenDataGrid<InsumoDTO>? gridStock;
    RadzenDataGrid<InsumoDTO>? gridRecepcion;
    int currentPage;
    int currentPageStock;
    int currentPageRecepcion;
    bool allowFiltering = false;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var listalote = lotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote in listalote)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null)
            {
                total += lote.Cantidad;
            }
            if (lote.Tipo == "Lote de recorte")
            {
                total += 1;
            }


        }
        insumo.StockReal = total;
        return total;
    }
    async Task gotoinfo(int id)
    {
        nav.NavigateTo($"/infoinsumo/{id}");
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }

    async Task Get()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/Lotes");
        lotes = rta.List;
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        oRespuesta = respuesta;



        oRespuestaPresupuestoAsociado = respuesta.List.Where(e => e.OrdencompraInsumoNavigations.Any(x => x.Estado == "Presupuesto")).ToList();

        oRespuestaPendienteCompra = respuesta.List.Where(x => (x.StockReal <= x.StockMin && x.Recepcion != "Esperando recepcion")).ToList();
        oRespuestaPendienteRecepcion = respuesta.List.Where(x => x.Recepcion == "Esperando recepcion").ToList();
        StateHasChanged();


    }

    async void delete(int id)
    {
        var columnDes = gridStock.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = gridStock.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();

        currentPageStock = gridStock.CurrentPage;
        await http.DeleteAsync($"/api/Insumo/{id}");
        await Get();
        if (currentPageStock >= (gridStock.Count / gridStock.PageSize) && gridStock.Count != 0 && filtroAnteriorDes == null)
        {
            await gridStock.GoToPage(currentPageStock - 1);
        }
        else if (gridStock.Count != 0 && filtroAnteriorDes == null)
        {
            await gridStock.GoToPage(currentPageStock);
        }
        else
        {
            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            gridStock.Reload();
        }
    }
    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    async Task add(int id)
    {
        var columnDes = gridStock.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = gridStock.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();
        object? filtroAnteriorDes = columnDes.GetFilterValue();
        object? filtroAnteriorCod = columnCod.GetFilterValue();

        currentPageStock = gridStock.CurrentPage;

        var parameters = new ModalParameters();
        parameters.Add(nameof(AddInsumo.id), id);
        var options = new ModalOptions()
            {
                Size = ModalSize.Large

            };

        var formModal = Modal.Show<AddInsumo>("Agregar insumo", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await gridStock.GoToPage(currentPageStock);
        }
        else
        {

            await Get();
            await gridStock.GoToPage(currentPageStock);

            columnDes.FilterValue = filtroAnteriorDes;
            columnCod.FilterValue = filtroAnteriorCod;
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;
            gridStock.Reload();
        }
    }
    async Task GoPresupuestos(int? id)
    {      
        var parameters = new ModalParameters();

        parameters.Add(nameof(InsumoDTO.Id), id);

        nav.NavigateTo($"/PresupuestosAsociados/{id}");


    }

    public async Task AddPresupuesto(int id)
    {
        
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddOC.idInsumo), id);

        var options = new ModalOptions()
            {
                HideHeader = true,
            };

        var formModal = Modal.Show<AddOC>("Generar presupuesto", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            StateHasChanged();

        }
    }

    public async Task AddPresupuestos()
    {

        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Large,
            };

        var formModal = Modal.Show<AddPresupuesto>("Generar presupuesto", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await grid.GoToPage(currentPage);
            StateHasChanged();

        }
    }
}