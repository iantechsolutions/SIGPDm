@using Microsoft.Extensions.Logging
@using System.Text.Json
@using System;
@using System.Globalization;


@if (insumos != null)
{
     <h1 style="font-weight: bold; font-size: 22px; margin-bottom: 10px;">Generar Presupuestos</h1>
    if (insumos.Count > 0)
    {
        <div class="card">
            <div class="card-body">
                <RadzenSteps @ref="steps">
                    <Steps>

                        <RadzenStepsItem Text="Seleccionar insumo a utilizar">
                            <br />
                        <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                        <br />
                            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                            AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                            Data="@insumos" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>
                                    <RadzenDataGridColumn TItem="InsumoDTO" Property="Codigo" Title="Codigo" Width="25%">
                                        <Template Context="data">
                                            <a>@($"{data.Codigo}")</a>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripcion" Width="50%">
                                                        <Template Context="data">
                                            @if (data.Descripcion != null)
                                                {
                                                <p class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data.Descripcion)</p>
                                                }
                                                else
                                                {
                                                    <p>-</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="InsumoDTO" Property="StockReal" Title="Cantidad" Width="15%">
                                        <Template Context="data">
                                            @if (data.Tipo == "Lote unico")
                                            {
                                                @data.StockReal
                                            }
                                            else
                                            {
                                                @calcularCantidad(data)
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="10%">
                                        <Template Context="data">
                                            <button class="btn" type="button" title="Agregar a la orden de compra" @onclick="() => ADDOC(data)"><FeatherCheck Color="green" /></button>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                            <br />
                            <br />
                            <label>Insumos seleccionados</label>
                            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                            AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridSelec"
                                            Data="@InsumosSeleccionados" TItem="ItemPresupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Descripcion" Title="Descripcion" Width="40%" />
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="20%">
                                        <Template Context="data">
                                            <input type="number" class="card" style="width:60%" value="@data.Cantidad" @onchange="@(e => UpdateCantidad(data, e.Value.ToString()))" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio unitario (Sin iva)" Width="20%">
                                        <Template Context="data">
                                            <input style="width:60%" class="card" value="@data.PrecioUnitario" @onchange="@(e => UpdatePrecio(data, e.Value.ToString()))" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="" Title="" Filterable="false" Width="10%">
                                        <Template Context="data">
                                            <button class="btn" type="button" title="Eliminar de la orden de compra" @onclick="() => DeleteOC(data)"><FeatherTrash Color="red" /></button>
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                            <br />
                        </RadzenStepsItem>
                        <RadzenStepsItem Text="Información del proveedor">
                            <br />
                            <div class="row">
                                
                                <div class="col-sm-6">
                                    <label>Proveedor</label>
                                    <RadzenDropDown AllowClear="true" TValue="int?" Style="width: 100%" AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    Data=@(ProveedoresPosibles) TextProperty="NombreFantasia" ValueProperty="Id" @bind-Value="presupuesto.Proveedor" />
                                    <ValidationMessage For="(()=> presupuesto.PrecioUnitario)" style="color:red;" />
                                </div>
                                <div class="col-sm-6">
                                    <label>Condición pago</label>
                                    <RadzenDropDown AllowClear="true" TValue="string" Style="width: 100%" AllowFiltering="true"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    Data=@(CondicionPago) TextProperty="Nombre" ValueProperty="Nombre" @bind-Value="presupuesto.CondicionPago" />
                                    <ValidationMessage For="(()=> presupuesto.CondicionPago)" style="color:red;" />
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-sm-6">
                                    <label>IVA</label>
                                    <RadzenDropDown class="form-control" TValue="string" Data=@IVAS placeholder="" @bind-Value=@presupuesto.Iva />
                                </div>
                                <div class="col-sm-6">
                                    <label>Moneda</label>
                                    <RadzenDropDown class="form-control" TValue="string" Data=@Moneda
                                                    placeholder="@presupuesto.Moneda"
                                                    @bind-Value=@presupuesto.Moneda
                                                    @onchange="(args) => OnMonedaChange(args.Value.ToString())" />
                                </div>

                            </div>
                            <br />
                            <div class="row">

                               
                                <div class="col-sm-6">
                                    <label>Plazo de pago(Dias)</label>
                                    <input class="form-control" @bind="presupuesto.PlazoDePago" placeholder="Plazo de pago" />
                                </div>
                                <div class="col-sm-6">
                                    <label>Precio Dolar</label>
                                    @if (Dolar.Valor != null)
                                    {
                                        <input class="form-control" @bind="Dolar.Valor" placeholder="@Dolar.Valor" />
                                    }
                                    else
                                    {
                                        <RadzenText class="form-control">0</RadzenText>
                                    }
                                </div>
                                
                            </div>
                            <br />
                            <div class="row">

                                    <div class="col-sm-6">
                                        <label>Especificación</label>
                                        <input class="form-control" @bind="@presupuesto.Especificacion" placeholder="Especificación" />

                                   </div>
                                <div class="col-sm-6">
                                    <label>Precio Total (Incluye IVA)</label>
                                    @if (presupuesto.Iva != null)
                                    {
                                        <RadzenText class="form-control">@FormatearComoMoneda(CalcularPrecioTotalConIVA() ?? 0)</RadzenText>
                                    }
                                    else
                                    {
                                        <RadzenText class="form-control">0</RadzenText>
                                    }
                                </div>
                            </div>
                            <br />
                            <div class="row">

                                <div class="col-sm-12">
                                    <label>Identificación (Descripción o titulo para identificar el presupuesto)</label>
                                    <input class="form-control" @bind="@presupuesto.Identificacion" placeholder="Identificacion" />

                                </div>
                                
                            </div>
                            <br />
                                </RadzenStepsItem>

                        <br />
                        <br />

                        <RadzenStepsItem Text="Presupuesto">
                            <br />
                            <br />
                            <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                            AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridSelec"
                                            Data="@InsumosSeleccionados" TItem="ItemPresupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Codigo" Title="Codigo" Width="20%">
                                        <Template Context="data">
                                            <a>@($"{data.Codigo}")</a>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Descripcion" Title="Descripcion" Width="20%" />
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="15%" />
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio unitario" Width="20%">
                                        <Template Context="data">
                                            @if (double.TryParse(data.PrecioUnitario, out double precioUnitario))
                                            {
                                                double valorDolar = 1;
                                                if (presupuesto.Moneda == "Dolares" && double.TryParse(Dolar.Valor, out double dolar))
                                                {
                                                    valorDolar = dolar;
                                                }

                                                double ivaMultiplier = presupuesto.Iva switch
                                                {
                                                    "0" => 1.0,
                                                    "10,5" => 1.105,
                                                    "21" => 1.21,
                                                    _ => 1.0
                                                };

                                                double precioFinal = precioUnitario * valorDolar;
                                                <span>@precioFinal.ToString("N2")</span>
                                            }
                                            else
                                            {
                                                <span>0</span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Precio" Title="Precio final(Incluye IVA)" Width="25%">
                                             <Template Context="data">
                                            @if (double.TryParse(data.Precio, out double precioUnitario))
                                            {
                                                double valorDolar = 1;
                                                if (presupuesto.Moneda == "Dolares" && double.TryParse(Dolar.Valor, out double dolar))
                                                {
                                                    valorDolar = dolar;
                                                }

                                                double ivaMultiplier = presupuesto.Iva switch
                                                {
                                                    "0" => 1.0,
                                                    "10,5" => 1.105,
                                                    "21" => 1.21,
                                                    _ => 1.0
                                                };

                                                double precioFinal = precioUnitario * valorDolar;
                                                <span>@precioFinal.ToString("N2")</span>
                                            }
                                            else
                                            {
                                                <span>0</span>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Observacion" Title="Especificación" Width="20%" />
                                      

                                </Columns>
                            </RadzenDataGrid>

                            <br />
                            <br />
                            <span class="input-group-btn">

                                <button class="btn btn-primary mr-2" style="float: right;" title="Guardar" @onclick="Guardar">Guardar</button>&nbsp;
                            </span>
                            <span class="input-group-btn">

                                <button class="btn btn-outline" style="float: right;" title="cancelar" @onclick="cancel">Cancelar</button>&nbsp;
                            </span>
                        </RadzenStepsItem>
                    </Steps>
                </RadzenSteps>
                <br />
            </div>
        </div>
    }
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    bool disable;


    double? precioTotalFinal = 0;
    List<Lote>? listaLotes = new();
    List<ItemPresupuesto>? InsumosSeleccionados = new();
    List<InsumoDTO>? insumos = new();
    InsumoDTO oInsumo = new();
    Presupuesto? presupuesto = new();
    bool allowFiltering = false;
    RadzenSteps? steps;
    RadzenDataGrid<InsumoDTO>? grid;
    RadzenDataGrid<ItemPresupuesto>? gridSelec;


    ValorDolar Dolar = new();
    List<ProveedoreDTO> ProveedoresPosibles = new();
    IList<CondicionPago>? CondicionPagoDisponibles;
    List<CondicionPago> CondicionPago = new();

    List<string> IVAS = new List<string>
    {
        "0","10,5","21"
    };
    List<string> Moneda = new List<string>
    {
        "Pesos","Dolares"
    };

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }
    public async Task Get()
    {
        disable = false;

        presupuesto.Moneda = "Pesos";
        presupuesto.Iva = "0";

        var lotes = await http.GetFromJsonAsync<Respuesta<List<Lote>>>("/api/lotes");
        listaLotes = lotes.List;

        var ort = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        insumos = ort.List.OrderBy(x => x.StockReal).ToList();

        var rta = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>($"/api/proveedore");
        ProveedoresPosibles = rta.List.Where(x => x.NombreFantasia != null).ToList();

        var respuesta = await http.GetFromJsonAsync<Respuesta<List<CondicionPago>>>("/api/CondicionPago");
        CondicionPago = respuesta.List;

        try{

            var rta3 = await http.GetFromJsonAsync<Respuesta<ValorDolar>>($"/api/valordolar/{1}");

            Dolar = rta3.List;
        }
        catch
        {
            var rta3 = await http.GetFromJsonAsync<Respuesta<List<ValorDolar>>>($"/api/valordolar");

            Dolar = rta3.List.FirstOrDefault();
        }
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async Task Guardar()
    {
        if (InsumosSeleccionados.Count == 0)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"No ingreso ningun presupuesto",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Aceptar",
                });
        }
        else if (string.IsNullOrEmpty(presupuesto.Especificacion) || presupuesto.Proveedor == null || presupuesto.CondicionPago == null)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"Ingrese la informacion requerida",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Aceptar",
                });
        }
        else
        {



            presupuesto.Estado = "Generada";
            presupuesto.TipoCuenta = ProveedoresPosibles.Where(x => x.Id == presupuesto.Proveedor).FirstOrDefault().TipoCuenta ;

            presupuesto.Generada = DateTime.Now;
            await http.PostAsJsonAsync<Presupuesto>($"/api/presupuesto", presupuesto);

            var lastPresu = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>($"/api/presupuesto");
            var idLast = lastPresu.List.LastOrDefault().Id;

            double ivaMultiplier = presupuesto.Iva switch
            {
                "0" => 1.0,
                "21" => 1.21,
                "10,5" => 1.105,
                _ => 1.0
            };

            foreach (var item in InsumosSeleccionados)
            {

                if(presupuesto.Moneda == "Dolares")
                {
                    item.PrecioUnitario = (Double.Parse(item.PrecioUnitario) * Double.Parse(Dolar.Valor)).ToString();
                }
                else
                {
                    item.PrecioUnitario = (Double.Parse(item.PrecioUnitario)).ToString();

                }   

                item.Proveedor = presupuesto.Proveedor;
                item.Identificacion = presupuesto.Identificacion;
                item.Moneda = presupuesto.Moneda;
                item.Estado = "Creada";
                item.CondicionPago = presupuesto.CondicionPago;
                item.Presupuesto = idLast;
                item.Observacion = presupuesto.Especificacion;
                await http.PostAsJsonAsync<ItemPresupuesto>("/api/itempresupuesto", item);
            }

            await ModalInstance.CloseAsync(ModalResult.Ok());
        }
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",
            });
    }
    async Task cancel()
    {
        Console.WriteLine("cancela");
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }
    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
        var lotes = listaLotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
        }


        insumo.StockReal = total;
        if(total == null)
        {
            return 0;
        }
        else
        {
            return total;
        }
    }
    public async Task ADDOC(InsumoDTO? insumo)
    {
        if (!InsumosSeleccionados.Any(x => x.Insumo == insumo.Id))
        {
            InsumosSeleccionados.Add(new ItemPresupuesto
                {
                    Insumo = insumo.Id,
                    Descripcion = insumo.Descripcion,
                    Codigo = insumo.Codigo,

                });
        }

        gridSelec.Reload();
        StateHasChanged();
    }
    public async Task DeleteOC(ItemPresupuesto? item)
    {
        InsumosSeleccionados = InsumosSeleccionados.Where(x => x.Insumo != item.Insumo).ToList();
        gridSelec.Reload();
        StateHasChanged();

        Console.WriteLine("Orden nueva: ", item);
    }

    public void UpdateCantidad(ItemPresupuesto item, string value)
    {
        if (int.TryParse(value, out int cantidad))
        {
            item.Cantidad = cantidad;
            CalcularPrecioTotalConIVA(); // Recalcular al cambiar cantidad
            gridSelec.Reload();
            StateHasChanged();
        }
    }

    public void UpdatePrecio(ItemPresupuesto item, string value)
    {
        string formattedValue = value.Replace('.', ',');

        item.PrecioUnitario = formattedValue;

        CalcularPrecioTotalConIVA();

        gridSelec.Reload();

        StateHasChanged();
    }

    public double? CalcularPrecioTotalConIVA()
    {
        precioTotalFinal = 0;


        double ivaMultiplier = presupuesto.Iva switch
        {
            "0" => 1.0,
            "21" => 1.21,
            "10,5" => 1.105,
            _ => 1.0 
        };

        foreach (var item in InsumosSeleccionados)
        {
            item.Observacion = presupuesto.Especificacion;

            double cantidad = item.Cantidad ?? 0; // Asignar 0 si es null
            double precioUnitario;
            bool precioParsed = double.TryParse(item.PrecioUnitario, out precioUnitario);

            // Si el parseo falla, asignar 0 al precio unitario
            if (!precioParsed)
            {
                precioUnitario = 0;
            }

            double precioTotal;

            if (presupuesto.Moneda == "Dolares")
            {
                // Asegurarse de que el valor del dólar sea un número válido

                string? dolar = Dolar.Valor.Replace('.', ',');
                double valorDolar;
                bool dolarParsed = double.TryParse(dolar, out valorDolar);
                if (!dolarParsed)
                {
                    valorDolar = 1; // Asignar 1 si no se puede parsear el valor del dólar
                }

                // Calcular el precio total con IVA y valor del dólar, redondeando a 2 dígitos decimales
                precioTotal = Math.Round(cantidad * precioUnitario * valorDolar, 2);
            }
            else
            {
                // Calcular el precio total con IVA, redondeando a 2 dígitos decimales
                precioTotal = Math.Round(cantidad * precioUnitario, 2);
            }

            item.Precio = precioTotal.ToString("F2"); // Convertir a string con 2 dígitos después de la coma
            precioTotalFinal += precioTotal * ivaMultiplier;
        }

        // Redondear el precio total final a 2 dígitos decimales
        precioTotalFinal = Math.Round(precioTotalFinal.Value, 2);
        presupuesto.Precio = precioTotalFinal?.ToString("F2");

        return precioTotalFinal;
    }

    public void UpdateComment(ItemPresupuesto? item, string? comment)
    {
        var index = InsumosSeleccionados.FindIndex(x => x.Insumo == item.Insumo);

        if (index != -1)
        {
            InsumosSeleccionados[index].Detalle = comment;

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("No se encontró el item con el Insumo especificado.");
        }
    }


    public void OnMonedaChange(string? nuevaMoneda)
    {
        presupuesto.Moneda = nuevaMoneda;
        CalcularPrecioTotalConIVA(); // Recalcula el precio total
        StateHasChanged(); // Actualiza la interfaz de usuario
    }

    public static string FormatearComoMoneda(object cantidad)
    {
        double valor;

        if (cantidad is string cantidadString)
        {
            if (!double.TryParse(cantidadString, out valor))
            {
                return "$0,00";
            }
        }
        else if (cantidad is double cantidadDouble)
        {
            valor = cantidadDouble;
        }
        else
        {
            return "$0,00";
        }

        string formatoMoneda = valor.ToString("#,0.00", new CultureInfo("es-AR"));

        string cantidadFormateada = formatoMoneda.Replace(",", "TEMP").Replace(".", ",").Replace("TEMP", ".");

        return "$" + cantidadFormateada;
    }



}

