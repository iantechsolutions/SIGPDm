@page "/proveedores"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<h1>Proveedores</h1>
<p>Descripción proveedores (*)</p>
<hr />
<br />
<button class="btn btn-outline-success" @onclick="()=>add(0)">Agregar proveedor</button>
<button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
<br />

@if (oRespuesta.List != null)
{
    <br />

    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="50"
                AllowPaging="true" ShowPagingSummary="true" @ref="grid"
                Data="@oRespuesta.List" TItem="Proveedore" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Proveedore" Property="Id" Title="ID" Width="40px" />
            <RadzenDataGridColumn TItem="Proveedore" Property="RazonSocial" Title="Razón social" Width="100px" />
            <RadzenDataGridColumn TItem="Proveedore" Property="Cuit" Title="Cuit" Width="100px" />
            <RadzenDataGridColumn TItem="Proveedore" Property="NombreContacto" Title="Nombre del Contácto" Width="100px" />
            <RadzenDataGridColumn TItem="Proveedore" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Editar proveedor" @onclick="() => add(data.Id)"><FeatherEdit Color="green" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Proveedore" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Eliminar" @onclick="() => alertaDelete(data.Id)"><FeatherTrash2 Color="red" /></button>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Proveedore" Property="" Title="" Filterable="false" Width="30px">
                <Template Context="data">
                    <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}










@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    Respuesta<List<Proveedore>> oRespuesta = new();
    RadzenDataGrid<Proveedore>? grid;
    bool allowFiltering = false;
    int currentPage;

    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    async Task Get()
    {
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Proveedore>>>("/api/Proveedore");
        oRespuesta = respuesta;
        StateHasChanged();
        
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }


    async Task delete(int id)
    {
        currentPage = grid.CurrentPage;
        await http.DeleteAsync($"/api/Proveedore/{id}");
        await Get();
        if(currentPage>=grid.Count/grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if(grid.Count!=0)
        {
            await grid.GoToPage(currentPage);
        }

    }

    public async Task alertaDelete(int id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminará este grupo",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Eliminar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }


    async Task add(int id)
    {
        if (id != 0)
        {
            currentPage = grid.CurrentPage;
            var parameters = new ModalParameters();
            parameters.Add(nameof(AddProveedor.id), id);
            var formModal = Modal.Show<AddProveedor>("Editar proveedor", parameters);
            var result = await formModal.Result;
            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);

            }
            /*if (result.Cancelled)
                {
                Console.WriteLine("Modal was cancelled");
            }
            else
                {
                await Get();
            }*/
        }
        else
        {

            var formModal = Modal.Show<AddProveedor>("Agregar proveedor");
            var result = await formModal.Result;


            if (result.Cancelled)
            {
                Console.WriteLine("Modal was cancelled");
                await grid.GoToPage(currentPage);
            }
            else
            {
                await Get();
                await grid.GoToPage(currentPage);
            }
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                HideCloseButton = true
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            await grid.GoToPage(currentPage);
        }
    }
}