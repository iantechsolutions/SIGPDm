@using Blazored.Typeahead
<div class="card">
    <div class="card-body">

        <EditForm Model="@oProveedor" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-sm">
                    <label>Razon social</label>
                    <InputText class="form-control" @bind-Value="@oProveedor.RazonSocial" placeholder="Razon social"></InputText>
                    <ValidationMessage For="(()=> oProveedor.RazonSocial)" style="color:red;" />


                </div>
                <div class="col-sm">
                    <label class="col-sm">Número de CUIT</label>
                    <InputText @bind-Value="@oProveedor.Cuit" class="form-control" placeholder="CUIT"></InputText>
                    <ValidationMessage For="(()=> oProveedor.Cuit)" style="color:red;" />
                </div>

            </div>
            <br />
            <div class="row">
                
                <div class="col-sm">
                    <label class="col-sm">Mail</label>
                    <InputText @bind-Value="@oProveedor.Mail" class="form-control" placeholder="Mail"></InputText>
                    <ValidationMessage For="(()=> oProveedor.Mail)" style="color:red;" />
                </div>
                <div class="col-sm">
                    <label class="col-sm">Dirección</label>
                    <InputText @bind-Value="@oProveedor.Direccion" class="form-control" placeholder="Dirección"></InputText>
                    <ValidationMessage For="(()=> oProveedor.Direccion)" style="color:red;" />
                </div>
            </div>
            <br />

            <div class="row">
                <div class="col-sm">
                    <label class="col-sm">Telefono</label>
                    <InputText @bind-Value="@oProveedor.Telefono" class="form-control" placeholder="Telefono"></InputText>
                    <ValidationMessage For="(()=> oProveedor.Telefono)" style="color:red;" />

                </div>
                <div class="col-sm">
                    <label class="col-sm">Código postal</label>
                    <InputText @bind-Value="@oProveedor.Cp" class="form-control" placeholder="Código postal"></InputText>
                    <ValidationMessage For="(()=> oProveedor.Cp)" style="color:red;" />

                </div>
            </div>
            <br />
            <div class="row">

                <div class="col-sm">
                    <label class="col-sm">Nombre del contacto</label>
                    <InputText @bind-Value="@oProveedor.NombreContacto" class="form-control" placeholder="Nombre contacto"></InputText>
                    <ValidationMessage For="(()=> oProveedor.NombreContacto)" style="color:red;" />

                </div>
                <div class="col-sm">
                    <label class="col-sm">Observaciones</label>
                    <InputText @bind-Value="@oProveedor.Observaciones" class="form-control" placeholder="Observaciones"></InputText>
                    <ValidationMessage For="(()=> oProveedor.Observaciones)" style="color:red;" />

                </div>
                
            </div>
            <br />
            <div class="row">
                <div class="col-sm">
                    <label class="col-sm">Categorias</label>
                    <BlazoredTypeahead SearchMethod="BuscarCategoria"
                    @bind-Values="categoriasSeleccionadas"
                                       EnableDropDown="true"
                                       AddItemOnEmptyResultMethod="AgregarCategoria"
                                       placeholder="Busque por Nombre">
                        <SelectedTemplate Context="cate">
                            @cate.Nombre
                        </SelectedTemplate>
                        <NotFoundTemplate Context="searchText">
                            Agregar "@searchText" como nueva categoria<br />
                            La categoria va a ser seleccionada despues de ser agregada
                        </NotFoundTemplate>
                        <ResultTemplate Context="cate">
                            @cate.Nombre
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </div>
                
            </div>
            <br />
            <button type="submit" class="btn btn-primary mr-2" disabled=@disable>Aceptar</button>
            <button type="button" @onclick="cancel" class="btn btn-light">Cancelar</button>
        </EditForm>
    </div>
</div>




@code {
    bool disable;

    ProveedoreDTO oProveedor = new();
    Respuesta<ProveedoreDTO> oRta = new();
    List<Categoria> categoriasPosibles = new();
    IList<Categoria> categoriasSeleccionadas;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        disable = false;
        var respuesta = await http.GetFromJsonAsync<Respuesta<List<Categoria>>>("/api/Categoria");
        categoriasPosibles = respuesta.List;
        if (id != 0)
        {
            oRta = await http.GetFromJsonAsync<Respuesta<ProveedoreDTO>>($"/api/Proveedore/{id}");
            oProveedor = oRta.List;


            Console.WriteLine(oProveedor.Categorias);
            Console.WriteLine(oProveedor.RazonSocial);

            if(oProveedor.Categorias != null)
            {
                categoriasSeleccionadas = JsonSerializer.Deserialize<List<Categoria>>(oProveedor.Categorias);
            }


        }
    }

    async Task Guardar()
    {
        if (string.IsNullOrEmpty(oProveedor.RazonSocial))
        {
            await alertaError("una razon social");

        }
        else if (string.IsNullOrEmpty(oProveedor.Cuit))
        {
            await alertaError("un cuit");
        }
        else if (string.IsNullOrEmpty(oProveedor.Direccion))
        {
            await alertaError("una dirección");
        }
        else if (string.IsNullOrEmpty(oProveedor.Telefono))
        {
            await alertaError("un telefono");
        }
        else
        {
           
        oProveedor.Categorias = JsonSerializer.Serialize<List<Categoria>>(categoriasSeleccionadas.ToList());
        
        disable = true;
        if (id == 0)
        {
            await http.PostAsJsonAsync<ProveedoreDTO>("/api/Proveedore", oProveedor);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        else
        {
            await http.PutAsJsonAsync<ProveedoreDTO>("/api/Proveedore", oProveedor);
            await ModalInstance.CloseAsync(ModalResult.Ok($"Form was submitted successfully."));
        }
        }
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });


    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));
    }
    private async Task<IEnumerable<Categoria>> BuscarCategoria(string searchText)
    {
        return await Task.FromResult(categoriasPosibles.Where(x => x.Nombre.ToLower().Contains(searchText.ToLower())).ToList());
    }
    private async Task<Categoria> AgregarCategoria(string searchText)
    {
        var nueva = new Categoria { Nombre = searchText };
        await http.PostAsJsonAsync<Categoria>("/api/Categoria", nueva);
        categoriasPosibles.Add(nueva);
        return nueva;
    }
}