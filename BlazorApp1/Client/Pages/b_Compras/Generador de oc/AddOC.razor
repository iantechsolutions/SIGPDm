@using Microsoft.Extensions.Logging
@using System.Text.Json
@if (insumos != null)
{
    if (insumos.Count > 0)
    {
        <div class="card">
            <div class="card-body">

                <EditForm Model="@insumos" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />
                    <ValidationSummary ShowErrorsInline="false" />
                    <label>
                    Seleccione un insumo
                    </label>
                    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                    AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                    Data="@insumos" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">



                        <Columns>
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="Id" Title="Id" Width="10%">
                                <Template Context="data">
                                    <a>@($"{data.Id}")</a>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripcion" Width="10%" />
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="StockReal" Title="Cantidad" Width="10%">
                                <Template Context="data">
                                    @if (data.Tipo == "Lote unico")
                                    {
                                        @data.StockReal
                                    }
                                    else
                                    {
                                        @calcularCantidad(data)
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="20%">
                                <Template Context="data">
                                    <button class="btn" type="button" title="Agregar a la orden de compra" @onclick="() => ADDOC(data)"><FeatherCheck Color="green" /></button>
                                    
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    <br />
                    <br />
                    <label>
                        Insumos seleccionados
                    </label>
                    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                    AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridSelec"
                                    Data="@InsumosSeleccionados" TItem="InsumoDTO" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">



                        <Columns>

                            <RadzenDataGridColumn TItem="InsumoDTO" Property="Id" Title="Id" Width="10%">
                                <Template Context="data">
                                    <a>@($"{data.Id}")</a>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="Descripcion" Title="Descripcion" Width="10%" />
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="StockReal" Title="Cantidad" Width="10%">
                                <Template Context="data">
                                    @if (data.Tipo == "Lote unico")
                                    {
                                        @data.StockReal
                                    }
                                    else
                                    {
                                        @calcularCantidad(data)
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="Especificacion" Title="Especificacion" Width="25%" />
                            <RadzenDataGridColumn TItem="InsumoDTO" Property="" Title="" Filterable="false" Width="20%">
                                <Template Context="data">
                                    <button class="btn" type="button" title="Eliminar de la orden de compra" @onclick="() => DeleteOC(data)"><FeatherTrash Color="red" /></button>

                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    <br />
                    <RadzenButton Variant="Variant.Text" type="button" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Cancelar" Click="cancel" />
                    <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" Text="Generar orden de compra" Click="Guardar" />

                </EditForm>
                <br />




            </div>
        </div>
    }
    

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    bool disable;


    List<Lote>? listaLotes = new();

    List<InsumoDTO>? InsumosSeleccionados = new();

    List<InsumoDTO>? insumos = new();

    InsumoDTO oInsumo = new();
    bool allowFiltering = false;


    RadzenDataGrid<InsumoDTO>? grid; 
    RadzenDataGrid<InsumoDTO>? gridSelec;

    protected override async Task OnInitializedAsync()
    {
        await Get();

    }
    public async Task Get()
    {
        disable = false;

        var lotes = await http.GetFromJsonAsync<Respuesta<List<Lote>>>($"/api/lote");
        listaLotes = lotes.List;


        var ort = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        insumos = ort.List.OrderByDescending(x => x.StockReal).ToList(); ;




    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async Task Guardar()
    {
        if(InsumosSeleccionados.Count == 0)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"No ingreso ningun presupuesto",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Aceptar",

                });
        }
        else
        {



            Presupuesto? presupuesto = new();
            await http.PostAsJsonAsync<Presupuesto>($"/api/presupuesto", presupuesto);

            var lastPresu = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>($"/api/presupuesto");


            foreach (var insumo in InsumosSeleccionados)
            {

                ItemPresupuesto items = new();
                items.Insumo = insumo.Id;
                items.Presupuesto = lastPresu.List.LastOrDefault().Id;

                    await http.PutAsJsonAsync<ItemPresupuesto>("/api/insumo", items);
            
                }

        

        await ModalInstance.CloseAsync(ModalResult.Ok());
        }
    }

    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }
    async Task cancel()
    {
        Console.WriteLine("cancela");
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }
    int? calcularCantidad(InsumoDTO insumo)
    {
        int? total = 0;
       

        var lotes = listaLotes.Where(x => x.IdInsumo == insumo.Id);
        foreach (var lote in lotes)
        {
            if (lote.Tipo == "Lote nuevo" && lote.Cantidad != null) total += lote.Cantidad;
        }
        insumo.StockReal = total;
        return total;
    }
    public async Task ADDOC(InsumoDTO? insumo)
    {
        if (InsumosSeleccionados.Where(x => x.Id == insumo.Id).Count() == 0)
        {

            InsumosSeleccionados.Add(insumo);
        }

        
        gridSelec.Reload();
        StateHasChanged();
    }
    public async Task DeleteOC(InsumoDTO? insumo)
    {

        InsumosSeleccionados = InsumosSeleccionados.Where(x => x.Id != insumo.Id).ToList();
        gridSelec.Reload();
        StateHasChanged();

        Console.WriteLine("Orden nueva: ", insumo);
    }
}
