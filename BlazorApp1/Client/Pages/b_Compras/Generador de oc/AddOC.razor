@using Microsoft.Extensions.Logging
@using System.Text.Json
@if (ProveedoresPosibles != null)
{
    if (ProveedoresPosibles.Count > 0)
    {
        <div class="card">
            <div class="card-body">

                <EditForm Model="@ProveedoresPosibles">
                    <DataAnnotationsValidator />
                    <ValidationSummary ShowErrorsInline="false" />
                    
                 

                    <div class="row-sm-6">

                            <label>Proveedor</label>

                            <br />
                            <RadzenDropDown AllowClear="true"  Style="width: 100%" AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data=@(ProveedoresPosibles) TextProperty="RazonSocial" ValueProperty="RazonSocial" @bind-Value="prov" />
                    </div>
                        <div class="row-sm-6">
                            <button class="bt n" title="Aprobar" @onclick="() => Aceptar(prov)"><FeatherCheck Color="green" /></button>
                    </div>
                  

                </EditForm>
                                                                    
                     
                
                    <br />
        <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
       <Tabs>
          

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>

                <br />
                <br />

                <RadzenDataGrid  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                        Data="@PresupuestoPosibles" TItem="Presupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">

                  

                    <Columns>
                                <RadzenDataGridColumn TItem="Presupuesto" Property="Id" Title="id" Width="10%">
                                    <Template Context="data">
                                        <a>@($"{data.Id}")</a>
                                    </Template>
                                </RadzenDataGridColumn>                              
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio" Width="10%">
                            <Template Context="data">
                                @try
                                {@Math.Round(double.Parse(data.Precio), 2).ToString("#.00")
                                }
                                catch
                                {
                                    <p>No se ingreso un precio valido </p>
                                }

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="CondicionPago" Title="CondicionPago" Width="20%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Especificacion" Title="Especificacion" Width="25%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="20%">
                            <Template Context="data">
                                <button class="btn" title="Agregar a la orden de compra" disabled="@(data.OC != null)" @onclick="() => ADDOC(data)"><FeatherCheck Color="green" /></button>
                                        <button class="btn" title="Eliminar de la orden de compra" disabled="@(data.OC == null)" @onclick="() => DeleteOC(data)"><FeatherTrash Color="red" /></button>

                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>

            
         </Tabs>
    </RadzenTabs>
                    <br />
                <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter"  Text="Cancelar" Click="cancel" />
                <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" Text="Generar orden de compra" @onclick="() => Guardar()" />


            </div>
        </div>
    }
    

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    bool disable;
    Presupuesto oPresupuesto = new();
    Respuesta<Presupuesto> oRta = new();
    IList<CondicionPago>? CondicionPagoDisponibles;
    List<CondicionPago> CondicionPago = new();

    List<ProveedoreDTO> ProveedoresPosibles = new();

    List<Presupuesto> PresupuestoPosibles = new();

    List<int>? presupuestos = new();
    string? prov;
    OrdencompraDTO oOrdenCompra = new();


    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    bool allowFiltering = false;
    RadzenDataGrid<Presupuesto>? grid;

    protected override async Task OnInitializedAsync()
    {
        disable = false;




        var rtaPro = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>($"/api/proveedore");
        ProveedoresPosibles = rtaPro.List;




        try
        {
            var respuesta = await http.GetFromJsonAsync<Respuesta<List<CondicionPago>>>("/api/CondicionPago");
            CondicionPago = respuesta.List;
            Console.WriteLine("rr");
        }
        catch
        {

        }




    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async Task Guardar()
    {



        oOrdenCompra.Generada = DateTime.Now;
        oOrdenCompra.Estado = "Generada";
        oOrdenCompra.Proveedor = oPresupuesto.Proveedor;
        oOrdenCompra.Insumo = oPresupuesto.Insumo;

        await http.PutAsJsonAsync<OrdencompraDTO>($"/api/oc", oOrdenCompra);

        var OC = await http.GetFromJsonAsync<List<OrdencompraDTO>>("/api/oc");

        OrdencompraDTO LastOC = OC.Last();

      
        foreach (var pres in presupuestos)
        {

        Presupuesto Orden = PresupuestoPosibles.Where(x => x.Id == pres).FirstOrDefault();

            Orden.OC = LastOC.Id;

            Console.WriteLine(Orden.OC);

            await http.PutAsJsonAsync<Presupuesto>("/api/Presupuesto", Orden);
        }

        await ModalInstance.CloseAsync(ModalResult.Ok());
    }

    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }
    public async Task Aceptar(string? prov)
    {

        var rtaPre = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>($"/api/Presupuesto");

        int? num = ProveedoresPosibles.Where(x => x.RazonSocial == prov).FirstOrDefault().Id;
        Console.WriteLine(num);
        PresupuestoPosibles = rtaPre.List.Where(x => x.Estado == "Generada" && x.Proveedor == num).ToList();

        grid.Reload();
        Console.WriteLine(prov);
    }
    public async Task ADDOC(Presupuesto? presupuesto)
    {


        presupuestos.Add(presupuesto.Id);
        
        Console.WriteLine("Orden nueva: ", presupuesto);
    }
    public async Task DeleteOC(Presupuesto? presupuesto)
    {
       
        presupuestos.Remove(presupuesto.Id);
        
    

        Console.WriteLine("Orden nueva: ", presupuestos);
    }
}
