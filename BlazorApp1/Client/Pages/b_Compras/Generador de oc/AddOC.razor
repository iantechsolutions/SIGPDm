@using Microsoft.Extensions.Logging
@using System.Text.Json
@if (ProveedoresPosibles != null)
{
    if (ProveedoresPosibles.Count > 0)
    {
<div class="card">
<div class="card-body">

    <EditForm Model="@ProveedoresPosibles" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <ValidationSummary ShowErrorsInline="false" />
                    
                 
        <div class="row">
                <div class="col-sm-2">
                            <label>Filtros</label>
                    <br />
                    <label>Proveedor</label>
                    <RadzenDropDown AllowClear="true"  Style="width: 100%" AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data=@(ProveedoresPosibles) TextProperty="NombreFantasia" Change="SetList" @bind-Value="proveedor" />


                <br />
                <br />
                <br />

                    <label>Condicion de pago</label>
                    <RadzenDropDown AllowClear="true" Style="width: 100%" AllowFiltering="true"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            Data=@(condicionesPago) TextProperty="Nombre" Change="SetList" @bind-Value="condicionPago" />
        

                </div>
        <div class="col-sm-10">

                    <label>
                        Presupuestos disponibles
                    </label>
                    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                    AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="grid"
                                            Data="@PresupuestoSeleccionados" TItem="Presupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">


                                            
                        <Columns>
                                   
                                    <RadzenDataGridColumn TItem="Presupuesto" Property="Especificacion" Title="Especificacion" Width="30%" />
                                   <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio" Width="20%"/>

                                    <RadzenDataGridColumn TItem="Presupuesto" Property="CondicionPago" Title="Condicion Pago" Width="25%" />
                                    <RadzenDataGridColumn TItem="Presupuesto" Property="TipoCuenta" Title="Tipo cuenta" Width="25%" />


                            <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                                <Template Context="data">
                                    <button class="btn" type="button" title="Agregar a la orden de compra" @onclick="() => ADDOC(data)"><FeatherCheck Color="green" /></button>
                                    
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                    <br />
                    <br />
                    <label>
                        Presupuesto seleccionado
                    </label>
                    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                    AllowSorting="true" PageSize="50" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridSelec"
                                    Data="@ItemsSeleccionados" TItem="ItemPresupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or">



                        <Columns>

                             <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Codigo" Title="Codigo" Width="20%" />
                            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="" Title="Insumo" Filterable="false" Width="20%">
                                <Template Context="data">
                                    <p>@insumos.Where(x => x.Id == data.Insumo).First().Descripcion</p>
                                </Template>
                            </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="15%">
                                        <Template Context="data">
                                            @try
                                            {
                                                <input style="width:60%" class="card" value="@data.Cantidad" @onchange="@(e => UpdateCantidad(data, e.Value.ToString()))" />
                                            }
                                            catch
                                            {
                                                <p>No se ingreso un precio valido </p>
                                            }

                                        </Template>
                                    </RadzenDataGridColumn>

                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio unitario" Width="15%">
                                        <Template Context="data">
                                            @try
                                            {
                                                <input style="width:60%" class="card" value="@data.PrecioUnitario" @onchange="@(e => UpdatePrecio(data, e.Value.ToString()))" />
                                            }
                                            catch
                                            {
                                                <p>No se ingreso un precio valido </p>
                                            }

                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Observacion" Title="Especificacion" Width="20%" />
                                    <RadzenDataGridColumn TItem="ItemPresupuesto" Property="" Title="" Filterable="false" Width="10%">
                                <Template Context="data">
                                    <button class="btn" type="button" title="Eliminar de la orden de compra" @onclick="() => DeleteOC(data)"><FeatherTrash Color="red" /></button>

                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                            <div class="row card flex">
                                <div class="col-3">
                                <p1>Moneda: @presupuestoUni.Moneda</p1>
                                </div>
                                <div class="col-3">
                                <p1 class="col-3">IVA: @presupuestoUni.Iva</p1>
                                </div>
                                <div class="col-3">
                                <p1 class="col-3">Precio Total: @presupuestoUni.Precio</p1>
                                </div>
                                
                    </div>
                    <br />
                            <br />

                            <div class="row">
                                <div class="col-3 d-flex justify-content-center">
                                    <RadzenButton Variant="Variant.Text" type="button" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Cancelar" Click="cancel" />
                                </div>
                                <div class="col-3 d-flex justify-content-center">
                                    <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter" Text="Generar orden de compra" Click="Guardar" />
                                </div>
                               @*  <div class="col-6">
                                    <label>
                                        Tipo de cuenta
                                    </label>
                                    <RadzenDropDown class="form-control" TValue="string" Data=@tipoCuentas placeholder="@oOrdenCompra.TipoCuenta" @bind-Value=@oOrdenCompra.TipoCuenta />
                                </div> *@
                            </div>

        </div>
        </div>
                </EditForm>
                <br />
    </div>
</div>
    }
    

}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    bool disable;
    Respuesta<Presupuesto> oRta = new();
    IList<CondicionPago>? CondicionPagoDisponibles;
    List<CondicionPago> condicionesPago = new();

    List<ProveedoreDTO> ProveedoresPosibles = new();

    List<ItemPresupuesto> ItemPresupuestosPosibles = new();
    List<ItemPresupuesto> ItemsSeleccionados = new();
    List<Presupuesto> PresupuestoSeleccionados = new();


    List<Presupuesto> PresupuestoPosibles = new();
    int? prov;
    double? valor;
    List<int>? presupuestos = new();
    ProveedoreDTO proveedor;
    CondicionPago condicionPago;
    OrdencompraDTO oOrdenCompra = new();


    List<string> tipoCuentas = new List<string>
    {
        "Cuenta corriente","cuenta a saldo"
    };


    List<InsumoDTO> insumos = new();
    InsumoDTO oInsumo = new();
    bool allowFiltering = false;
    RadzenDataGrid<Presupuesto>? grid;
    RadzenDataGrid<ItemPresupuesto>? gridSelec;
    Presupuesto? presupuestoUni = new();
    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {
        disable = false;

        oOrdenCompra.TipoCuenta = "Cuenta corriente";
        var rtaPre = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>($"/api/Presupuesto");
        PresupuestoPosibles = rtaPre.List.Where(x => x.Estado == "Generada").ToList();
        PresupuestoSeleccionados = PresupuestoPosibles;
        var VarItems = await http.GetFromJsonAsync<Respuesta<List<ItemPresupuesto>>>($"/api/itempresupuesto");
        ItemPresupuestosPosibles = VarItems.List;



        var ort = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        insumos = ort.List;
        try
        {
            var respuesta = await http.GetFromJsonAsync<Respuesta<List<CondicionPago>>>("/api/CondicionPago");
            condicionesPago = respuesta.List;
            var rtaPro = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>($"/api/proveedore");
            ProveedoresPosibles = rtaPro.List.Where(x => x.NombreFantasia != null).ToList();

        }
        catch
        {

        }



        StateHasChanged();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    async Task Guardar()
    {
        if(ItemsSeleccionados.Count == 0)
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = $"No ingreso ningun presupuesto",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Aceptar",

                });
        }
        else
        {


            oOrdenCompra.Generada = DateTime.Now;
            oOrdenCompra.Estado = "Generada";
            oOrdenCompra.CondicionPago = presupuestoUni.CondicionPago;
            oOrdenCompra.Moneda = presupuestoUni.Moneda;

            oOrdenCompra.Proveedor = presupuestoUni.Proveedor;
            oOrdenCompra.Precio =  presupuestoUni.Precio;
            oOrdenCompra.Iva = presupuestoUni.Iva;
            oOrdenCompra.Especificacion = presupuestoUni.Especificacion;


            var response = await http.PostAsJsonAsync<OrdencompraDTO>($"/api/oc", oOrdenCompra);

            if (response.IsSuccessStatusCode)
            {
                var resp = await response.Content.ReadFromJsonAsync<Respuesta<Ordencompra>>();
                var ocPusheada = resp.List;

                presupuestoUni.OC = ocPusheada.Id;
                presupuestoUni.Estado = "OrdenGenerada";



                foreach (var item in ItemsSeleccionados)
                {
                    item.Estado = "OrdenGenerada";
                    item.OC = ocPusheada.Id;
                    item.fechaIngreso = new DateTime();
                    await http.PutAsJsonAsync<ItemPresupuesto>("/api/itempresupuesto", item);



                }

                await http.PutAsJsonAsync<Presupuesto>("/api/Presupuesto", presupuestoUni);

            }



            await ModalInstance.CloseAsync(ModalResult.Ok());
        }
    }


    public void SetList()
    {

        PresupuestoSeleccionados = PresupuestoPosibles;

        if(condicionPago != null)
        {
            PresupuestoSeleccionados = PresupuestoSeleccionados.Where(x => x.CondicionPago == condicionPago.Nombre).ToList();

        }
        if(proveedor != null)
        {
            PresupuestoSeleccionados = PresupuestoSeleccionados.Where(x => x.Proveedor == proveedor.Id).ToList();


        }

        grid.Reload();
        StateHasChanged();
    }
    public async Task alertaError(string faltante)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso {faltante} valido",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }
    public async Task ADDOC(Presupuesto? presupuesto)
    {

        ItemsSeleccionados = ItemPresupuestosPosibles.Where(x => x.Presupuesto == presupuesto.Id).ToList();
        presupuestoUni = presupuesto;


        if (presupuestoUni.TipoCuenta == "Cuenta a saldo")
        {
            oOrdenCompra.TipoCuenta = "Cuenta a saldo";
        }

        Console.WriteLine(oOrdenCompra.TipoCuenta);
        Console.WriteLine(presupuestoUni.TipoCuenta);

        gridSelec.Reload();
        StateHasChanged();
    }
    public async Task UpdateCantidad(ItemPresupuesto item, string newCantidad)
    {
        if (int.TryParse(newCantidad, out var cantidad))
        {
            item.Cantidad = cantidad;

            // Recalcular el precio del ítem
            if (double.TryParse(item.PrecioUnitario, out var precioUnitario))
            {
                item.Precio = (cantidad * precioUnitario).ToString("F2"); // Asegurar que el formato tenga 2 decimales
            }
            else
            {
                await alertaError("un precio unitario válido");
                return;
            }

            // Recalcular el precio total del presupuesto
            await RecalcularPrecipresupuestoUni(item.Presupuesto);
        }
        else
        {
            await alertaError("una cantidad válida");
        }
    }

    public async Task UpdatePrecio(ItemPresupuesto item, string newPrecio)
    {
        if (double.TryParse(newPrecio, out var precioUnitario))
        {
            item.PrecioUnitario = newPrecio;

            item.Precio = (item.Cantidad * precioUnitario).ToString(); 

            await RecalcularPrecipresupuestoUni(item.Presupuesto);
        }
        else
        {
            await alertaError("un precio válido");
        }
    }

    public async Task RecalcularPrecipresupuestoUni(int? presupuestoId)
    {
        double nuevoTotal = ItemPresupuestosPosibles
            .Where(i => i.Presupuesto == presupuestoId)
            .Sum(i => double.TryParse(i.Precio, out var precioDecimal) ? precioDecimal : 0);

        // Aplicamos el multiplicador del IVA
        double ivaMultiplier = presupuestoUni.Iva switch
        {
            "0" => 1.0,
            "21" => 1.21,
            "10,5" => 1.105,
            _ => 1.0
        };

        // Calculamos el total con IVA
        presupuestoUni.Precio = (nuevoTotal * ivaMultiplier).ToString("F2");

        // Recargar la interfaz si es necesario
        grid.Reload();
        StateHasChanged();
    }



    public async Task DeleteOC(ItemPresupuesto? presupuesto)
    {
        ItemsSeleccionados = ItemsSeleccionados.Where(x => x.Id != presupuesto.Id).ToList();
        gridSelec.Reload();
        StateHasChanged();

        Console.WriteLine("Orden nueva: ", presupuestos);
    }
}
