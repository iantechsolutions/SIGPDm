<h3><strong> Orden de compra @id</strong></h3>

<div class="row">
    <div class="col-sm-4">

        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Proveedor</RadzenText>

        <RadzenText TextStyle="TextStyle.Body1"><b>@Proveedores.Where(x => x.Id == presupuesto.Proveedor).First().RazonSocial</b></RadzenText>


        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Condicion de pago</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1">@presupuesto.CondicionPago</RadzenText>

    </div>
    <div class="col-sm-3">
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Precio Total</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><a>@presupuesto.Precio</a></RadzenText>
    </div>
    <div class="col-sm-3">
        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Generada</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1"><b>@presupuesto.Iva</b></RadzenText>

        <RadzenText TextStyle="TextStyle.Overline" Class="d-flex mt-3 mb-0">Plazo de pago</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1">@presupuesto.PlazoDePago</RadzenText>
    </div>

</div>
@if (itempresupuesto != null)
{
    <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                    AllowSorting="false" PageSize="50" AllowPaging="true" ShowPagingSummary="true" @ref="grid"
                    Data="@itempresupuesto" TItem="ItemPresupuesto" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Id" Title="Id" Width="10%">
                <Template Context="data">
                    <a>@($"{data.Id}")</a>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Observacion" Title="Especificación" Width="20%" />
            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="20%" />
            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio Unitario" Width="20%" />
            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Precio" Title="Precio" Width="20%" />
            <RadzenDataGridColumn TItem="ItemPresupuesto" Property="" Title="Insumo" Filterable="false" Width="20%">
                <Template Context="data">
                    <p>@oInsumo.Where(x => x.Id == data.Insumo).First().Descripcion</p>
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}




@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public int id { get; set; }
    List<Insumo> oInsumo = new();
    List<ProveedoreDTO> Proveedores = new();


    Presupuesto presupuesto = new();



    List<ItemPresupuesto> itempresupuesto = new();


    bool allowFiltering = false;
    RadzenDataGrid<ItemPresupuesto>? grid;



    protected override async Task OnInitializedAsync()
    {

        await Get();

    }

    public async Task Get()
    {
        if (id != 0)
        {
            var rta = await http.GetFromJsonAsync<Respuesta<Presupuesto>>($"/api/presupuesto/{id}");
            presupuesto = rta.List;
        }
        var ort2 = await http.GetFromJsonAsync<Respuesta<List<ItemPresupuesto>>>("/api/itempresupuesto");
        itempresupuesto = ort2.List.Where(x => x.Presupuesto == id).ToList();

        var ort = await http.GetFromJsonAsync<Respuesta<List<Insumo>>>("/api/Insumo");
        oInsumo = ort.List;

        var prov = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>("/api/Proveedore");
        Proveedores = prov.List;
    }
    async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok($"Form was cancelled"));

    }
}