@page "/ordenes"
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<button class="btn btn-outline-success no-print" title="Crear condicion de pago" style="float: right;" @onclick="()=>AddCondicionDePago()">Administrar condiciones de pago</button>&nbsp;
<button class="btn btn-outline-success no-print" title="Crear Ordencompra" style="float: right;" @onclick="()=>AddPresupuesto()">Crear un presupuesto</button>&nbsp;

<h1>Generador de órdenes de compra</h1>
<p>En esta sección se podrán gestionar las órdenes de compra.</p>
<hr />

@if (oRespuesta != null)
{
    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            
            <RadzenTabsItem Text="Generadas">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                            AllowSorting="false" PageSize="50" AllowPaging="true" ShowPagingSummary="true" @ref="grid"
                            Data="@oRespuestaGenerada" TItem="OrdencompraDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%">
                            <Template Context="data">
                                <a>@($"OC{data.Id}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="oOrdenCompra.ProveedorNavigation.RazonSocial" Title="Proveedor" Width="15%" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="25%" Filterable="false" />

                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Aprobar/rechazar orden de compra" @onclick="() => alertaAprobar(data)"><FeatherCheckCircle Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Eliminar" @onclick="() => Eliminar(data.Id)"><FeatherTrash Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Aprobadas">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                            AllowSorting="false" PageSize="50" AllowPaging="true" ShowPagingSummary="true" @ref="gridAprobadas"
                            Data="@oRespuestaAprobadas" TItem="OrdencompraDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%">
                            <Template Context="data">
                                <a>@($"OC{data.Id}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="oOrdenCompra.ProveedorNavigation.RazonSocial" Title="Proveedor" Width="30%" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="25%" Filterable="false" />

                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="25%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Rechazadas">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                                AllowSorting="false" PageSize="50" AllowPaging="true" ShowPagingSummary="true" @ref="gridRechazadas"
                                Data="@oRespuestaRechazadas" TItem="OrdencompraDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%">
                            <Template Context="data">
                                <a>@($"OC{data.Id}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="oOrdenCompra.ProveedorNavigation.RazonSocial" Title="Proveedor" Width="15%" />
                       
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="20%" Filterable="false" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="25%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Presupuestos disponibles">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                                AllowSorting="false" PageSize="50" AllowPaging="true" ShowPagingSummary="true" @ref="gridDisponibles" Density="Density.Compact"
                                Data="@oRespuestaDisponibles" TItem="Presupuesto" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Insumo" Title="Insumo" Width="10%">
                            <Template Context="data">
                                @(oInsumo.Where(x => x.Id == data.Insumo).FirstOrDefault())
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="PrecioUnitario" Title="Precio Unidad" Width="15%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Cantidad" Title="Cantidad" Width="10%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Proveedor" Title="Proveedor" Width="10%">
                            <Template Context="data">
                                @(oProveedores.Where(x => x.Id == data.Proveedor).FirstOrDefault())
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="CondicionPago" Title="Forma de pago" Width="20%" Filterable="false" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio total" Width="20%" Filterable="false" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => infoPresupuestos(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Eliminar" @onclick="() => EliminarPresupuesto(data.Id)"><FeatherTrash Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
    
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;


    Respuesta<List<OrdencompraDTO>> oRespuesta;
    List<OrdencompraDTO> oRespuestaGenerada;
    List<OrdencompraDTO> oRespuestaAprobadas;
    List<OrdencompraDTO> oRespuestaRechazadas;

    List<Presupuesto> oRespuestaDisponibles;

    RadzenDataGrid<OrdencompraDTO>? grid;
    RadzenDataGrid<OrdencompraDTO>? gridAprobadas;
    RadzenDataGrid<OrdencompraDTO>? gridRechazadas;


    RadzenDataGrid<Presupuesto>? gridDisponibles;
    RadzenDataGrid<Presupuesto>? gridPresupuesto;



    List<InsumoDTO>? oInsumo;
    List<ProveedoreDTO>? oProveedores;


    Respuesta<List<Presupuesto>> oPresupuestos = new();

    int currentPage;
    int currentPageAprobadas;
    int currentPageRechazadas;
    bool allowFiltering = false;




    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {


        oPresupuestos = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>("/api/presupuesto");



        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<OrdencompraDTO>>>("/api/oc");

        var rtaInsumo = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oInsumo = rtaInsumo.List;

        var rta = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>("/api/proveedore");
        oProveedores = rta.List;



        oRespuestaGenerada = oRespuesta.List.Where(x => x.Estado == "Generada").ToList();
        oRespuestaAprobadas = oRespuesta.List.Where(x => x.Estado == "Aprobada").ToList();
        oRespuestaRechazadas = oRespuesta.List.Where(x => x.Estado == "Rechazada").ToList();

        oRespuestaDisponibles = oPresupuestos.List.Where(x => x.Estado == "Generada").ToList();

        StateHasChanged();
        await grid.Reload();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    public async Task alertaAprobar(OrdencompraDTO orden)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Cotizacion {orden.Id}",
                Text = "¿Desea aprobar esta cotizacion?",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ShowDenyButton = true,
                ConfirmButtonText = "Aprobar",
                CancelButtonText = "Cancelar",
                DenyButtonText = "Rechazar"
            });

        if (result.IsConfirmed) //Codigo anterior: !string.IsNullOrEmpty(result.Value) No funcionaba(NICO)
        {
            //Console.WriteLine(result.Value);
            await aprobar(orden);

        }
        else if (result.IsDenied)
        {
            //Console.WriteLine(result.Value);
            await rechazar(orden);
        }
        //Console.WriteLine(result.Value);
    }

    async Task aprobar(OrdencompraDTO orden)
    {
        currentPage = grid.CurrentPage;

        var pres = oPresupuestos.List.Where(x => x.OC == orden.Id).ToList();
        foreach (var presu in pres)
        {
            presu.Estado = "OrdenGenerada";
            presu.Aprobada = DateTime.Now;
            presu.Recepcionada = null;

            await http.PutAsJsonAsync<Presupuesto>($"/api/Presupuesto", presu);
        }
        orden.Aprobada = DateTime.Now;
        orden.Estado = "Aprobada";
        await http.PutAsJsonAsync<OrdencompraDTO>($"/api/OC", orden);
        await OnInitializedAsync();
        StateHasChanged();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }

    async Task rechazar(OrdencompraDTO orden)
    {
        currentPage = grid.CurrentPage;
        orden.Estado = "Rechazada";
        await http.PutAsJsonAsync<OrdencompraDTO>("/api/OC", orden);
        await OnInitializedAsync(); //Agregado para que actualice luego de tocar el boton (NICO)
        StateHasChanged();
        if (currentPage >= (grid.Count / grid.PageSize) && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }

    public async Task Eliminar(int? orden)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminara la orden de compra",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Delete(orden);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task Delete(int? id)
    {
        Console.WriteLine("puo");
        await http.DeleteAsync($"/api/oc/{id}");
        await Get();
        StateHasChanged();

    }

    public async Task EliminarPresupuesto(int? presu)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminara el presupuesto",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await DeletePresupuesto(presu);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task DeletePresupuesto(int? id)
    {
        await http.DeleteAsync($"/api/presupuesto/{id}");
        await Get();
        StateHasChanged();

    }


    async Task infoPresupuestos(int id)
    {
        currentPage = grid.CurrentPage;
        currentPageAprobadas = gridAprobadas.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(InfoPresupuestos.id), id);
        var formModal = Modal.Show<InfoPresupuestos>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
        else
        {
            await OnInitializedAsync();
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        currentPageAprobadas = gridAprobadas.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
        else
        {
            await OnInitializedAsync();
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
    }
    public async Task AddCondicionDePago()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Large
            };

        var formModal = Modal.Show<AddCP>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
            StateHasChanged();
        }

    }

    public async Task AddPresupuesto()
    {
        var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();

        object? filtroAnteriorDes = new();
        object? filtroAnteriorCod = new();

        if (columnDes != null && columnCod != null)
        {
            filtroAnteriorDes = columnDes.GetFilterValue();
            filtroAnteriorCod = columnCod.GetFilterValue();
        }

        currentPage = grid.CurrentPage;
        var parameters = new ModalParameters();
       

        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.ExtraLarge
            };

        var formModal = Modal.Show<AddOC>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
        }
        else
        {
            await Get();
            StateHasChanged();
            if (filtroAnteriorDes != null && filtroAnteriorCod != null)
            {

                columnDes.FilterValue = filtroAnteriorDes;
                columnCod.FilterValue = filtroAnteriorCod;
            }
            columnDes.FilterOperator = FilterOperator.StartsWith;
            columnCod.FilterOperator = FilterOperator.StartsWith;


        }



    }
    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }
}

