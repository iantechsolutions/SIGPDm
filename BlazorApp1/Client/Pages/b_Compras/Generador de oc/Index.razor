@page "/ordenes"


@using BlazorApp1.Client.Pages.b_Compras.Generador_de_oc
@using Microsoft.Extensions.Logging
@using System.Text.Json
@using BlazorApp1.Client.Pages.b_Compras.Generador_de_oc
@using System.Globalization
<br />
<button class="btn btn-outline-primary" @onclick="ComeBack"><FeatherArrowLeft Color="Blue"></FeatherArrowLeft></button>
<br />
<br />
<button class="btn btn-outline-success no-print" title="Crear condicion de pago" style="float: right;margin-left: 10px;" @onclick="()=>AddCondicionDePago()">Administrar condiciones de pago</button>&nbsp;
<button class="btn btn-outline-success no-print" title="Crear Ordencompra" style="float: right; margin-left: 10px;" @onclick="()=>AddPresupuesto()">Crear una orden de compra</button>&nbsp;

<h1>Generador de órdenes de compra</h1>
<p>En esta sección se podrán gestionar las órdenes de compra.</p>
<hr />

@if (oRespuesta != null)
{
    <RadzenTabs Class="w-100 mx-auto" RenderMode="TabRenderMode.Client">
        <Tabs>
            
            <RadzenTabsItem Text="Generadas">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />

                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                            AllowSorting="false" PageSize="5" AllowPaging="true" ShowPagingSummary="true" @ref="grid"
                            Data="@oRespuestaGenerada" TItem="OrdencompraDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or"
                                Expandable="true" ExpandableProperty="Expanded" @bind-Expanded="expandedPresupuestosOrdenes">
                    
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%">
                            <Template Context="data">
                                <a>@($"OC{data.Id}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Identificacion" Title="identificación" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Comentario ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Especificacion" Title="Especificacion" Width="25%" Filterable="false" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="oOrdenCompra.ProveedorNavigation.RazonSocial" Title="Proveedor" Width="15%" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="15%" Filterable="false" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Generada" Title="Fecha" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText>@(data?.Generada.Value.ToString("dd/MM/yyyy") ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Aprobar/rechazar orden de compra" @onclick="() => alertaAprobar(data)"><FeatherCheckCircle Color="green" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Imprimir" @onclick='() => OpenImprimir(data.Id, "Generada")'><FeatherPrinter Color="black" /></button>

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Eliminar" @onclick="() => Eliminar(data.Id)"><FeatherTrash Color="red" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>

                    <Template Context="data">
                        <RadzenDataGrid TItem="ItemPresupuesto" Data="@GetItemPresupuestosForOrdenes(data.Id)" AllowSorting="true" PageSize="5" ShowPagingSummary="true" AllowPaging="true" TItem="ItemPresupuesto">
                            <Columns>
                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Codigo" Title="Codigo" Width="20%" />
                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Insumo" Title="Insumo" Filterable="false" Width="20%">
                                    <Template Context="data2">
                                        <p>@(insumos?.Where(x => x.Id == data2.Insumo).First().Descripcion ?? "")</p>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="15%" />

                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio unitario" Width="15%" />

                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Observacion" Title="Especificacion" Width="20%" />

                            </Columns>
                        </RadzenDataGrid>
                    </Template>

                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Aprobadas">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                            AllowSorting="false" PageSize="10" AllowPaging="true" ShowPagingSummary="true" @ref="gridAprobadas"
                            Data="@oRespuestaAprobadas" TItem="OrdencompraDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%">
                            <Template Context="data">
                                <a>@($"OC{data.Id}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Identificacion" Title="identificación" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Comentario ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Especificacion" Title="Especificacion" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Especificacion ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="oOrdenCompra.ProveedorNavigation.RazonSocial" Title="Proveedor" Width="20%" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Generada" Title="Fecha" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText>@(data?.Generada.Value.ToString("dd/MM/yyyy") ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="20%" Filterable="false" />
                       @*  <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Imprimir" @onclick='() => OpenImprimir(data.Id, "Aprobada")'><FeatherPrinter Color="black" /></button>
                            </Template>
                        </RadzenDataGridColumn> *@
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" position="absolute" title="Imprimir" @onclick='() => OpenImprimir(data.Id, "Aprobada")'><FeatherPrinter Color="black" /></button>

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="10%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Rechazadas">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="true" FilterMode="FilterMode.Simple"
                                AllowSorting="false" PageSize="10" AllowPaging="true" ShowPagingSummary="true" @ref="gridRechazadas"
                                Data="@oRespuestaRechazadas" TItem="OrdencompraDTO" ColumnWidth="50px" LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Id" Title="Id" Width="10%">
                            <Template Context="data">
                                <a>@($"OC{data.Id}")</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Identificacion" Title="identificación" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Comentario ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Especificacion" Title="Especificacion" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Especificacion ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="oOrdenCompra.ProveedorNavigation.RazonSocial" Title="Proveedor" Width="15%" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Generada" Title="Fecha creación" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText>@(data?.Generada.Value.ToString("dd/MM/yyyy") ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="CondicionPago" Title="Condicion de pago" Width="20%" Filterable="false" />
                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="Moneda" Title="Moneda" Width="20%" Filterable="false" />

                        <RadzenDataGridColumn TItem="OrdencompraDTO" Property="" Title="" Filterable="false" Width="25%">
                            <Template Context="data">
                                <button class="btn" title="Ver info" @onclick="() => gotoinfo(data.Id)"><FeatherInfo Color="blue" /></button>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Presupuestos disponibles">

                <button style="outline:none; float: right;height:100%;" class="btn btn-outline" @onclick="() => CambiarModoFiltro()"><FeatherFilter Color="Black"></FeatherFilter></button>
                <br />
                <br />


                <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="allowFiltering" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Simple"
                                AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" @ref="gridDisponibles"
                                Data="@oRespuestaDisponibles" TItem="Presupuesto" ColumnWidth="250px" LogicalFilterOperator="LogicalFilterOperator.Or"
                                Expandable="true" ExpandableProperty="Expanded" @bind-Expanded="expandedPresupuestos">

                    <Columns>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Identificacion" Title="identificación" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Identificacion ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Especificacion" Title="Especificacion" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText class="texto-clamp" style="word-wrap: break-word; word-break: break-all; white-space: normal;">@(data?.Especificacion ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Presupuesto" Property="Proveedor" Title="Proveedor" Width="20%" Filterable="false">
                            <Template Context="data">
                                <RadzenText>@(oProveedores.Where(x => x.Id == data.Proveedor).FirstOrDefault().NombreFantasia ?? "~")</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Generada" Title="Fecha de creación" Width="25%">
                            <Template Context="data">
                                <p>@data.Generada.Value.ToString("dd/MM/yyyy")</p>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Presupuesto" Property="PlazoDePago" Title=Plazo de pago" Width="20%" />
                        <RadzenDataGridColumn TItem="Presupuesto" Property="Precio" Title="Precio total" Width="15%" Filterable="false">
                            <Template Context="data">
                                <RadzenText>$ @data.Precio.ToString()</RadzenText>
                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                    <Template Context="data">
                        <RadzenDataGrid TItem="ItemPresupuesto" Data="@GetItemPresupuestosForPresupuesto(data.Id)" AllowSorting="true" PageSize="5" ShowPagingSummary="true" AllowPaging="true" TItem="ItemPresupuesto">
                            <Columns>
                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Codigo" Title="Codigo" Width="20%" />
                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Insumo" Title="Insumo" Filterable="false" Width="20%">
                                    <Template Context="data2">
                                        <p>@(insumos?.Where(x => x.Id == data2.Insumo).First().Descripcion ?? "")</p>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Cantidad" Title="Cantidad" Width="15%" />

                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="PrecioUnitario" Title="Precio unitario" Width="15%" />

                                <RadzenDataGridColumn TItem="ItemPresupuesto" Property="Observacion" Title="Especificacion" Width="20%" />

                            </Columns>
                        </RadzenDataGrid>
                    </Template>
                </RadzenDataGrid>
            </RadzenTabsItem>

        </Tabs>
    </RadzenTabs>
}
else
{
    <br />
    <center>
        <div class="mb-2">
            <RadzenProgressBar Value="100" ShowValue="false" ProgressBarStyle="ProgressBarStyle.Secondary" Mode="ProgressBarMode.Indeterminate" />
        </div>
    </center>
}
    
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    CultureInfo germanCulture = new CultureInfo("de-DE");

    Respuesta<List<OrdencompraDTO>>? oRespuesta;
    List<OrdencompraDTO>? oRespuestaGenerada;
    List<OrdencompraDTO>? oRespuestaAprobadas;
    List<OrdencompraDTO>? oRespuestaRechazadas;

    List<Presupuesto>? oRespuestaDisponibles;

    RadzenDataGrid<OrdencompraDTO>? grid;
    RadzenDataGrid<OrdencompraDTO>? gridAprobadas;
    RadzenDataGrid<OrdencompraDTO>? gridRechazadas;


    RadzenDataGrid<Presupuesto>? gridDisponibles;
    RadzenDataGrid<Presupuesto>? gridPresupuesto;



    List<InsumoDTO>? oInsumo;
    List<ProveedoreDTO>? oProveedores;


    Respuesta<List<Presupuesto>>? oPresupuestos = new();
    List<InsumoDTO>? insumos = new();


    bool expandedPresupuestos = false;
    bool expandedPresupuestosOrdenes = false;

    int currentPage;
    int currentPageAprobadas;
    int currentPageRechazadas;
    bool allowFiltering = false;

    List<ItemPresupuesto>? ItemPresupuestosPosibles = new();


    protected override async Task OnInitializedAsync()
    {
        await Get();
    }

    public async Task Get()
    {


        oPresupuestos = await http.GetFromJsonAsync<Respuesta<List<Presupuesto>>>("/api/presupuesto");

        var VarItems = await http.GetFromJsonAsync<Respuesta<List<ItemPresupuesto>>>($"/api/itempresupuesto");
        ItemPresupuestosPosibles = VarItems.List;

        oRespuesta = await http.GetFromJsonAsync<Respuesta<List<OrdencompraDTO>>>("/api/oc");

        var rtaInsumo = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/insumo");
        oInsumo = rtaInsumo.List;

        var rta = await http.GetFromJsonAsync<Respuesta<List<ProveedoreDTO>>>("/api/proveedore");
        oProveedores = rta.List;

        var ort = await http.GetFromJsonAsync<Respuesta<List<InsumoDTO>>>("/api/Insumo");
        insumos = ort.List;

        oRespuestaGenerada = oRespuesta?.List.Where(x => x.Estado == "Generada").ToList();
        oRespuestaGenerada = oRespuestaGenerada?.OrderByDescending(x => x.Generada).ToList();
        oRespuestaAprobadas = oRespuesta?.List.Where(x => x.Estado == "Aprobada").ToList();
        oRespuestaAprobadas = oRespuestaAprobadas?.OrderByDescending(x => x.Aprobada).ToList();
        oRespuestaRechazadas = oRespuesta?.List.Where(x => x.Estado == "Rechazada").ToList();

        oRespuestaDisponibles = oPresupuestos?.List.Where(x => x.Estado == "Generada").ToList();

        StateHasChanged();
        await grid.Reload();
    }
    public void CambiarModoFiltro()
    {
        allowFiltering = !allowFiltering;
        StateHasChanged();
    }
    public async Task alertaAprobar(OrdencompraDTO orden)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Orden de compra {orden.Id}",
                Text = "¿Desea aprobar esta orden?",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
                ShowDenyButton = true,
                ConfirmButtonText = "Aprobar",
                CancelButtonText = "Cancelar",
                DenyButtonText = "Rechazar"
            });

        if (result.IsConfirmed) //Codigo anterior: !string.IsNullOrEmpty(result.Value) No funcionaba(NICO)
        {
            //Console.WriteLine(result.Value);
            await aprobar(orden);

        }
        else if (result.IsDenied)
        {
            //Console.WriteLine(result.Value);
            await rechazar(orden);
        }
        //Console.WriteLine(result.Value);
    }

    async Task aprobar(OrdencompraDTO orden)
    {
        currentPage = grid.CurrentPage;

        var pres = oPresupuestos.List.Where(x => x.OC == orden.Id).ToList();
        foreach (var presu in pres)
        {
            presu.Estado = "OrdenGenerada";
            presu.Aprobada = DateTime.Now;
            presu.Recepcionada = null;

            await http.PutAsJsonAsync<Presupuesto>($"/api/Presupuesto", presu);
        }
        orden.Aprobada = DateTime.Now;
        orden.Estado = "Aprobada";
        await http.PutAsJsonAsync<OrdencompraDTO>($"/api/OC", orden);
        await OnInitializedAsync();
        StateHasChanged();
        if (currentPage >= grid.Count / grid.PageSize && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }

    async Task rechazar(OrdencompraDTO orden)
    {
        currentPage = grid.CurrentPage;
        orden.Estado = "Rechazada";
        await http.PutAsJsonAsync<OrdencompraDTO>("/api/OC", orden);
        await OnInitializedAsync(); //Agregado para que actualice luego de tocar el boton (NICO)
        StateHasChanged();
        if (currentPage >= (grid.Count / grid.PageSize) && grid.Count != 0)
        {
            await grid.GoToPage(currentPage - 1);
        }
        else if (grid.Count != 0)
        {
            await grid.GoToPage(currentPage);
        }
    }

    public async Task Eliminar(int? orden)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminara la orden de compra",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Delete(orden);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task Delete(int? id)
    {
        Console.WriteLine("puo");
        await http.DeleteAsync($"/api/oc/{id}");
        await Get();
        StateHasChanged();

    }

    public async Task EliminarPresupuesto(int? presu)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminara el presupuesto",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await DeletePresupuesto(presu);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task DeletePresupuesto(int? id)
    {
        await http.DeleteAsync($"/api/presupuesto/{id}");
        await Get();
        StateHasChanged();

    }


    async Task infoPresupuestos(int id)
    {
        currentPage = grid.CurrentPage;
        currentPageAprobadas = gridAprobadas.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(InfoPresupuestos.id), id);
        var formModal = Modal.Show<InfoPresupuestos>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
        else
        {
            await OnInitializedAsync();
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
    }
    async Task gotoinfo(int id)
    {
        currentPage = grid.CurrentPage;
        currentPageAprobadas = gridAprobadas.CurrentPage;
        currentPageRechazadas = gridRechazadas.CurrentPage;
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.ExtraLarge
            };
        parameters.Add(nameof(Info.id), id);
        var formModal = Modal.Show<Info>("", parameters, options);
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
        else
        {
            await OnInitializedAsync();
            await grid.GoToPage(currentPage);
            await gridAprobadas.GoToPage(currentPageAprobadas);
            await gridAprobadas.GoToPage(currentPageRechazadas);
        }
    }
    public async Task AddCondicionDePago()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions()
            {
                HideHeader = true,
                Size = ModalSize.Medium
            };

        var formModal = Modal.Show<AddCP>("", parameters, options);
        var result = await formModal.Result;
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            await OnInitializedAsync();
            StateHasChanged();
        }

    }

    public async Task AddPresupuesto()
    {

        nav.NavigateTo("/ordenes/generar-orden-compra");

        // var columnDes = grid.ColumnsCollection.Where(c => c.Property == "Descripcion").FirstOrDefault();
        // var columnCod = grid.ColumnsCollection.Where(c => c.Property == "Codigo").FirstOrDefault();

        // object? filtroAnteriorDes = new();
        // object? filtroAnteriorCod = new();

        // if (columnDes != null && columnCod != null)
        // {
        //     filtroAnteriorDes = columnDes.GetFilterValue();
        //     filtroAnteriorCod = columnCod.GetFilterValue();
        // }

        // currentPage = grid.CurrentPage;
        // var parameters = new ModalParameters();


        // var options = new ModalOptions()
        //     {
        //         HideHeader = true,
        //         Size = ModalSize.ExtraLarge
        //     };

        // var formModal = Modal.Show<AddOC>("", parameters, options);
        // var result = await formModal.Result;
        // if (result.Cancelled)
        // {
        //     Console.WriteLine("Modal was cancelled");
        //     await grid.GoToPage(currentPage);
        // }
        // else
        // {
        //     await Get();
        //     StateHasChanged();
        //     if (filtroAnteriorDes != null && filtroAnteriorCod != null)
        //     {

        //         columnDes.FilterValue = filtroAnteriorDes;
        //         columnCod.FilterValue = filtroAnteriorCod;
        //     }
        //     columnDes.FilterOperator = FilterOperator.StartsWith;
        //     columnCod.FilterOperator = FilterOperator.StartsWith;


        // }



    }
    public List<ItemPresupuesto> GetItemPresupuestosForPresupuesto(int presupuestoId)
    {
        return ItemPresupuestosPosibles.Where(x => x.Presupuesto == presupuestoId).ToList();
    }
    public List<ItemPresupuesto> GetItemPresupuestosForOrdenes(int presupuestoId)
    {
        var presu = oPresupuestos.List.Where(x => x.OC == presupuestoId).FirstOrDefault();
        return ItemPresupuestosPosibles.Where(x => x.Presupuesto == presu.Id).ToList();
    }


    private bool modalAbiertoGenerada = false;
    private bool modalAbiertoAprobada = false;

    async Task OpenImprimir(int id, string? tipo)
    {
        if (tipo == "Generada" && modalAbiertoGenerada)
            return;
        if (tipo == "Aprobada" && modalAbiertoAprobada)
            return;

        if (tipo == "Generada") modalAbiertoGenerada = true;
        if (tipo == "Aprobada") modalAbiertoAprobada = true;

        var parameters = new ModalParameters();
        var options = new ModalOptions() { HideHeader = true, Size = ModalSize.ExtraLarge };
        parameters.Add(nameof(Factura.id), id);
        var formModal = Modal.Show<Factura>("", parameters, options);
        var result = await formModal.Result;

        if (tipo == "Generada") modalAbiertoGenerada = false;
        if (tipo == "Aprobada") modalAbiertoAprobada = false;
    }



    async Task ComeBack()
    {
        nav.NavigateTo("/compras");
    }



    public static string FormatearComoMoneda(object cantidad)
    {
        double valor;

        if (cantidad is string cantidadString)
        {
            if (!double.TryParse(cantidadString, out valor))
            {
                return "$0,00";
            }
        }
        else if (cantidad is double cantidadDouble)
        {
            valor = cantidadDouble;
        }
        else
        {
            return "$0,00";
        }

        string formatoMoneda = valor.ToString("#,0.00", new CultureInfo("es-AR"));

        string cantidadFormateada = formatoMoneda.Replace(",", "TEMP").Replace(".", ",").Replace("TEMP", ".");

        return "$" + cantidadFormateada;
    }
}

