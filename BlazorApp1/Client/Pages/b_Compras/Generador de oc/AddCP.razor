<div>

    <RadzenText>Agregar condición de pago</RadzenText>

    <br />
    <EditForm Model="@condicionPago" OnValidSubmit="Agregar">

                <div class="col-sm-6">
                        <InputText class="form-control" @bind-Value="@condicionPago.Nombre" placeholder="Nombre"></InputText>
            <br />

                        <RadzenButton Variant="Variant.Text" Class="rz-text-secondary-color rz-background-color-secondary-lighter" Text="Cancelar" Click="cancel" />        

                         <RadzenButton Variant="Variant.Text" Class="rz-text-primary-color rz-background-color-primary-lighter"  type="submit" Text="Aceptar" />
                </div>

                <br/>
                <br />
                   


        <RadzenDataGrid FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowColumnResize="false" AllowAlternatingRows="false" AllowSorting="true" PageSize="6" @ref="grid"
                        AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" AllowFiltering="false"
                        Data="@oCondicionPago" TItem="CondicionPago" ColumnWidth="600px" LogicalFilterOperator="LogicalFilterOperator.Or">
            <Columns>
               
                <RadzenDataGridColumn TItem="CondicionPago" Property="Id" Title="Id" Width="40%" />
                <RadzenDataGridColumn TItem="CondicionPago" Property="Nombre" Title="Nombre" Width="40%" />

                <RadzenDataGridColumn TItem="CondicionPago" Property="" Title="" Filterable="false" Width="20%">
                    <Template Context="data">
                       @*  <button type="button" class="btn" title="Editar" @onclick="() => Editar(data.Id)"><FeatherEdit Color="red" /> </button> *@
                        <button type="button" class="btn" title="Editar" @onclick="() => Eliminar(data.Id)"><FeatherTrash Color="red" /> </button>
                    </Template>
                </RadzenDataGridColumn>
               
            </Columns>
        </RadzenDataGrid>

           

              
 

    </EditForm>
</div>

@code {



    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    int? id;
    RadzenDataGrid<CondicionPago>? grid;
    CondicionPago condicionPago = new();
    List<CondicionPago> oCondicionPago = new();

    protected override async Task OnInitializedAsync()
    {
        var rta = await http.GetFromJsonAsync<Respuesta<List<CondicionPago>>>("/api/condicionpago");
        oCondicionPago = rta.List;

    }


    public async Task Agregar()
    {
        if (condicionPago.Nombre == null)
        {
            await alertaError();
        }
        else
        {
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = "Desea agregar la condición de pago?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar",
                    CancelButtonText = "Cancelar"
                });

            if (!string.IsNullOrEmpty(result.Value))
            {
                await http.PostAsJsonAsync<CondicionPago>($"/api/CondicionPago", condicionPago);
                await ModalInstance.CloseAsync(ModalResult.Ok());
            }
            else if (result.Dismiss == DismissReason.Cancel)
            {

            }
        }


    }
    public async Task Eliminar(int? id)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Está seguro?",
                Text = "Se eliminara la condición de pago",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Aceptar",
                CancelButtonText = "Cancelar"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Delete(id);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {

        }
    }
    public async Task Editar(int? id)
    {
        
    }
    public async Task Delete(int? id)
    {
        await http.DeleteAsync($"/api/CondicionPago/{id}");
        await OnInitializedAsync();
        StateHasChanged();
    }

    public async Task alertaError()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"No ingreso el nombre",
                Icon = SweetAlertIcon.Error,
                ShowCancelButton = false,
                ConfirmButtonText = "Aceptar",

            });
    }
    public async Task cancel()
    {
        await ModalInstance.CloseAsync(ModalResult.Cancel());
    }


}

